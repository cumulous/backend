AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  VpcRange:
    Type: String
  EncryptionKeyId:
    Type: String
  SecretsBucket:
    Type: String
  SSHKeyName:
    Type: String
  SSHKeyS3Path:
    Type: String
  SSHKeyPutRole:
    Type: String
  SSHKeyGetRole:
    Type: String
  APISubdomain:
    Type: String
  Auth0Domain:
    Type: String
  Auth0CloudFormationClientID:
    Type: String
  Auth0CloudFormationClientSecret:
    Type: String
    NoEcho: true
    Default: ''
  Auth0CloudFormationSecretsRole:
    Type: String

Resources:
  BackendVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcRange
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  BackendRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BackendVPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  BackendVPCInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: BackendVPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref BackendRouteTable
      GatewayId: !Ref BackendInternetGateway

  BackendVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref BackendVPC
      InternetGatewayId: !Ref BackendInternetGateway

  BackendInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  BackendS3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref BackendVPC
      RouteTableIds:
        - !Ref BackendRouteTable

  SendCloudFormationResponse:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SendCloudFormationResponse
      CodeUri: ../app
      Handler: aws.sendCloudFormationResponse
      Runtime: nodejs4.3

  SetupCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SetupCustomResource
      CodeUri: ../app
      Handler: aws.setupCustomResource
      Runtime: nodejs4.3
      Timeout: 10
      Policies:
        Statement:
          - Effect: Allow
            Action: states:StartExecution
            Resource:
              - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*

  Subnets:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupSubnetsStateMachine
      VpcId: !Ref BackendVPC
      VpcRange: !Ref VpcRange
      AvailabilityZones: !GetAZs
        Ref: AWS::Region

  CalculateSubnets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CalculateSubnets
      CodeUri: ../app
      Handler: vpc.calculateSubnets
      Runtime: nodejs4.3

  CreateSubnets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateSubnets
      CodeUri: ../app
      Handler: vpc.createSubnets
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateSubnet
            Resource: '*'

  ModifySubnets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ModifySubnets
      CodeUri: ../app
      Handler: vpc.modifySubnets
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:ModifySubnetAttribute
            Resource: '*'

  RouteSubnets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RouteSubnets
      CodeUri: ../app
      Handler: vpc.routeSubnets
      Runtime: nodejs4.3
      Environment:
        Variables:
          ROUTE_TABLE: !Ref BackendRouteTable
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:AssociateRouteTable
            Resource: '*'

  DescribeSubnets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DescribeSubnets
      CodeUri: ../app
      Handler: vpc.describeSubnets
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeSubnets
            Resource: '*'

  DeleteSubnets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteSubnets
      CodeUri: ../app
      Handler: vpc.deleteSubnets
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:DeleteSubnet
            Resource: '*'

  InstancesInit:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-InstancesInit
      CodeUri: ../app
      Handler: aws.executeStateMachine
      Runtime: nodejs4.3
      Environment:
        Variables:
          STATE_MACHINE: !Ref InstancesInitStateMachine
      Events:
        InstanceRunning:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - EC2 Instance State-change Notification
              detail:
                state:
                  - running
      Policies:
        Statement:
          - Effect: Allow
            Action: states:StartExecution
            Resource:
              - !Ref InstancesInitStateMachine

  DescribeInstance:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DescribeInstance
      CodeUri: ../app
      Handler: instances.describeInstance
      Runtime: nodejs4.3
      Timeout: 5
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DescribeInstances
            Resource: '*'

  SetupSSHKey:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupSSHKeyStateMachine

  CreateSSHKey:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateSSHKey
      CodeUri: ../app
      Handler: instances.createSSHKey
      Runtime: nodejs4.3
      Environment:
        Variables:
          ENCRYPTION_KEY_ID: !Ref EncryptionKeyId
          SSH_KEY_NAME: !Ref SSHKeyName
          SSH_KEY_S3_BUCKET: !Ref SecretsBucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${SSHKeyPutRole}

  DeleteSSHKey:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteSSHKey
      CodeUri: ../app
      Handler: instances.deleteSSHKey
      Runtime: nodejs4.3
      Environment:
        Variables:
          SSH_KEY_NAME: !Ref SSHKeyName
          SSH_KEY_S3_BUCKET: !Ref SecretsBucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DeleteKeyPair
            Resource: '*'
          - Effect: Allow
            Action: s3:DeleteObject
            Resource:
              - !Sub arn:aws:s3:::${SecretsBucket}/${SSHKeyS3Path}

  CheckSSHKeyName:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CheckSSHKeyName
      CodeUri: ../app
      Handler: instances.checkSSHKeyName
      Runtime: nodejs4.3
      Environment:
        Variables:
          SSH_KEY_NAME: !Ref SSHKeyName

  CalculateVolumeSizes:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CalculateVolumeSizes
      CodeUri: ../app
      Handler: instances.calculateVolumeSizes
      Runtime: nodejs4.3

  CreateVolumes:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateVolumes
      CodeUri: ../app
      Handler: instances.createVolumes
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:CreateVolume
            Resource: '*'

  WaitForVolumesAvailable:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-WaitForVolumesAvailable
      CodeUri: ../app
      Handler: instances.waitForVolumesAvailable
      Runtime: nodejs4.3
      Timeout: 20
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DescribeVolumes
            Resource: '*'

  CalculateVolumeDevices:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CalculateVolumeDevices
      CodeUri: ../app
      Handler: instances.calculateVolumeDevices
      Runtime: nodejs4.3

  AttachVolumes:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-AttachVolumes
      CodeUri: ../app
      Handler: instances.attachVolumes
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:AttachVolume
            Resource: '*'

  DetachVolumes:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DetachVolumes
      CodeUri: ../app
      Handler: instances.detachVolumes
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DetachVolume
            Resource: '*'

  DeleteVolumes:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteVolumes
      CodeUri: ../app
      Handler: instances.deleteVolumes
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DeleteVolume
            Resource: '*'

  DeleteVolumesOnTermination:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteVolumesOnTermination
      CodeUri: ../app
      Handler: instances.deleteVolumesOnTermination
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:ModifyInstanceAttribute
            Resource: '*'

  TransferInitScript:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-TransferInitScript
      CodeUri: ../app
      Handler: instances.transferInitScript
      Runtime: nodejs4.3
      Timeout: 10
      Environment:
        Variables:
          SSH_KEY_S3_BUCKET: !Ref SecretsBucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${SSHKeyGetRole}
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt BackendVPC.DefaultSecurityGroup
        SubnetIds: !GetAtt Subnets.SubnetIds

  ExecuteInitScript:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ExecuteInitScript
      CodeUri: ../app
      Handler: instances.executeInitScript
      Runtime: nodejs4.3
      Timeout: 15
      Environment:
        Variables:
          SSH_KEY_S3_BUCKET: !Ref SecretsBucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${SSHKeyGetRole}
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt BackendVPC.DefaultSecurityGroup
        SubnetIds: !GetAtt Subnets.SubnetIds

  Auth0:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupAuth0StateMachine
      CloudFormation:
        Domain: !Ref Auth0Domain
        ID: !Ref Auth0CloudFormationClientID
        Secret:
          Value: !Ref Auth0CloudFormationClientSecret
          Bucket: !Ref SecretsBucket
          Path: !Sub auth0/${AWS::StackName}-cf.key
          EncryptionKeyId: !Ref EncryptionKeyId

  RotateAndStoreAuth0Secret:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RotateAndStoreAuth0Secret
      CodeUri: ../app
      Handler: auth0.rotateAndStoreClientSecret
      Runtime: nodejs4.3
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${Auth0CloudFormationSecretsRole}

  DeleteS3Object:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteS3Object
      CodeUri: ../app
      Handler: aws.deleteS3Object
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: s3:DeleteObject
            Resource: '*'

  GetProjects:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetProjects
      CodeUri: ../app
      Handler: projects.get
      Runtime: nodejs4.3

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Authorizer
      CodeUri: ../app
      Handler: members.authorize
      Runtime: nodejs4.3

  AuthorizerInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AuthorizerInvocationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt Authorizer.Arn

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  InstancesInitStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "DescribeInstance",
          "States": {
            "DescribeInstance": {
              "Type": "Task",
              "InputPath": "$.detail.instance-id",
              "Resource": "${DescribeInstance.Arn}",
              "Next": "CheckSSHKeyName"
            },
            "CheckSSHKeyName": {
              "Type": "Task",
              "InputPath": "$.KeyName",
              "ResultPath": null,
              "Resource": "${CheckSSHKeyName.Arn}",
              "Next": "CalculateVolumeSizes"
            },
            "CalculateVolumeSizes": {
              "Type": "Task",
              "InputPath": "$.InstanceType",
              "ResultPath": "$.volumeSizes",
              "Resource": "${CalculateVolumeSizes.Arn}",
              "Next": "PrepareVolumes"
            },
            "PrepareVolumes": {
              "Type": "Parallel",
              "Next": "MountVolumes",
              "Branches": [{
                "StartAt": "CreateVolumes",
                "States": {
                  "CreateVolumes": {
                    "Type": "Task",
                    "ResultPath": "$.volumeIds",
                    "Resource": "${CreateVolumes.Arn}",
                    "Next": "WaitForVolumesCreated"
                  },
                  "WaitForVolumesCreated": {
                    "Type": "Task",
                    "InputPath": "$.volumeIds",
                    "ResultPath": null,
                    "Resource": "${WaitForVolumesAvailable.Arn}",
                    "Next": "CalculateVolumeDevices"
                  },
                  "CalculateVolumeDevices": {
                    "Type": "Task",
                    "InputPath": "$.volumeIds",
                    "ResultPath": "$.volumeDevices",
                    "Resource": "${CalculateVolumeDevices.Arn}",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DeleteVolumes"
              }]
            },
            "MountVolumes": {
              "Type": "Parallel",
              "InputPath": "$.[0]",
              "End": true,
              "Branches": [{
                "StartAt": "AttachVolumes",
                "States": {
                  "AttachVolumes": {
                    "Type": "Task",
                    "ResultPath": null,
                    "Resource": "${AttachVolumes.Arn}",
                    "Next": "DeleteVolumesOnTermination",
                    "Retry": [{
                        "ErrorEquals": [ "HandledError" ],
                        "IntervalSeconds": 5
                    }]
                  },
                  "DeleteVolumesOnTermination": {
                    "Type": "Task",
                    "ResultPath": null,
                    "Resource": "${DeleteVolumesOnTermination.Arn}",
                    "Next": "TransferInitScript"
                  },
                  "TransferInitScript": {
                    "Type": "Task",
                    "InputPath": "$.PrivateIpAddress",
                    "ResultPath": null,
                    "Resource": "${TransferInitScript.Arn}",
                    "TimeoutSeconds": 5,
                    "Next": "ExecuteInitScript",
                    "Retry": [{
                        "ErrorEquals": [ "HandledError", "States.Timeout" ],
                        "IntervalSeconds": 5, "MaxAttempts": 5
                    }]
                  },
                  "ExecuteInitScript": {
                    "Type": "Task",
                    "Resource": "${ExecuteInitScript.Arn}",
                    "TimeoutSeconds": 10,
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DetachVolumes"
              }]
            },
            "DetachVolumes": {
              "Type": "Task",
              "InputPath": "$.volumeIds",
              "ResultPath": null,
              "Resource": "${DetachVolumes.Arn}",
              "Next": "WaitForVolumesDetached"
            },
            "WaitForVolumesDetached": {
              "Type": "Task",
              "InputPath": "$.volumeIds",
              "ResultPath": null,
              "Resource": "${WaitForVolumesAvailable.Arn}",
              "Next": "DeleteVolumes",
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DeleteVolumes"
              }]
            },
            "DeleteVolumes": {
              "Type": "Task",
              "InputPath": "$.volumeIds",
              "Resource": "${DeleteVolumes.Arn}",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Fail",
              "Cause": "Failed to initialize instance"
            }
          }
        }

  SetupSubnetsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupSubnets",
          "States": {
            "SetupSubnets": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckCreate",
                "States": {
                  "CheckCreate": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Create",
                      "Next": "CalculateSubnets"
                    }],
                    "Default": "DescribeSubnets"
                  },
                  "CalculateSubnets": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.ResourceProperties.SubnetRanges",
                    "Resource": "${CalculateSubnets.Arn}",
                    "Next": "CreateSubnets"
                  },
                  "CreateSubnets": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.Data.SubnetIds",
                    "Resource": "${CreateSubnets.Arn}",
                    "Next": "ModifySubnets"
                  },
                  "ModifySubnets": {
                    "Type": "Task",
                    "InputPath": "$.Data.SubnetIds",
                    "ResultPath": null,
                    "Resource": "${ModifySubnets.Arn}",
                    "Next": "RouteSubnets"
                  },
                  "RouteSubnets": {
                    "Type": "Task",
                    "InputPath": "$.Data.SubnetIds",
                    "ResultPath": null,
                    "Resource": "${RouteSubnets.Arn}",
                    "Next": "Success"
                  },
                  "DescribeSubnets": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.VpcId",
                    "ResultPath": "$.Data.SubnetIds",
                    "Resource": "${DescribeSubnets.Arn}",
                    "Next": "ChooseUpdateOrDelete"
                  },
                  "ChooseUpdateOrDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "ModifySubnets"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "DeleteSubnets"
                      }
                    ]
                  },
                  "DeleteSubnets": {
                    "Type": "Task",
                    "InputPath": "$.Data.SubnetIds",
                    "ResultPath": null,
                    "Resource": "${DeleteSubnets.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  SetupSSHKeyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupSSHKey",
          "States": {
            "SetupSSHKey": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "ChooseEventType",
                "States": {
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Or": [
                          {
                            "Variable": "$.RequestType",
                            "StringEquals": "Update"
                          },
                          {
                            "Variable": "$.RequestType",
                            "StringEquals": "Delete"
                          }
                        ],
                        "Next": "DeleteSSHKey"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "CreateSSHKey"
                      }
                    ]
                  },
                  "DeleteSSHKey": {
                    "Type": "Task",
                    "ResultPath": null,
                    "Resource": "${DeleteSSHKey.Arn}",
                    "Next": "CheckCreateSSHKey"
                  },
                  "CheckCreateSSHKey": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "CreateSSHKey"
                      }
                    ],
                    "Default": "Success"
                  },
                  "CreateSSHKey": {
                    "Type": "Task",
                    "ResultPath": null,
                    "Resource": "${CreateSSHKey.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  SetupAuth0StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupAuth0",
          "States": {
            "SetupAuth0": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckToSkipSetup",
                "States": {
                  "CheckToSkipSetup": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.ResourceProperties.CloudFormation.Secret.Value",
                        "StringGreaterThan": "",
                        "Next": "ChooseEventType"
                      }
                    ],
                    "Default": "Success"
                  },
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "RotateAndStoreSecret"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "CheckIfSecretUpdated"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "DeleteSecret"
                      }
                    ]
                  },
                  "CheckIfSecretUpdated": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.OldResourceProperties.CloudFormation.Secret.Value",
                        "StringEquals": "${Auth0CloudFormationClientSecret}",
                        "Next": "Success"
                      }
                    ],
                    "Default": "RotateAndStoreSecret"
                  },
                  "RotateAndStoreSecret": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.CloudFormation",
                    "ResultPath": null,
                    "Resource": "${RotateAndStoreAuth0Secret.Arn}",
                    "Next": "Success"
                  },
                  "DeleteSecret": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.CloudFormation.Secret",
                    "ResultPath": null,
                    "Resource": "${DeleteS3Object.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  SetupApiDomainName:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupApiDomainNameStateMachine
      Domain:
        Name: !Ref APISubdomain
        Certificate: !Ref ApiCertificate

  CreateApiDomainName:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateApiDomainName
      CodeUri: ../app
      Handler: apig.createDomainName
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: apigateway:POST
            Resource:
              - !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${Api}/domainnames

  UpdateApiDomainName:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UpdateApiDomainName
      CodeUri: ../app
      Handler: apig.updateDomainName
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: apigateway:PATCH
            Resource:
              - !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${Api}/domainnames/${APISubdomain}

  DeleteApiDomainName:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteApiDomainName
      CodeUri: ../app
      Handler: apig.deleteDomainName
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: apigateway:DELETE
            Resource:
              - !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${Api}/domainnames/${APISubdomain}

  SetupApiDomainNameStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupApiCertificate",
          "States": {
            "SetupApiCertificate": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "ChooseEventType",
                "States": {
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "CreateApiDomainName"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "CheckReplaceDomainName"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "DeleteApiDomainName"
                      }
                    ]
                  },
                  "CreateApiDomainName": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Domain",
                    "ResultPath": null,
                    "Resource": "${CreateApiDomainName.Arn}",
                    "Next": "Success"
                  },
                  "CheckReplaceDomainName": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.OldResourceProperties.Domain.Name",
                        "StringEquals": "${APISubdomain}",
                        "Next": "DeleteOldApiDomainName"
                      }
                    ],
                    "Default": "UpdateApiDomainName"
                  },
                  "DeleteOldApiDomainName": {
                    "Type": "Task",
                    "InputPath": "$.OldResourceProperties.Domain.Name",
                    "ResultPath": null,
                    "Resource": "${DeleteApiDomainName.Arn}",
                    "Next": "CreateApiDomainName"
                  },
                  "UpdateApiDomainName": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Domain",
                    "ResultPath": null,
                    "Resource": "${UpdateApiDomainName.Arn}",
                    "Next": "Success"
                  },
                  "DeleteApiDomainName": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Domain.Name",
                    "ResultPath": null,
                    "Resource": "${DeleteApiDomainName.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref APISubdomain

  # WARNING: this resource should be the last one in this template!
  # We concatenate it with the Swagger template afterwards.
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: latest
      DefinitionBody: !Sub |-