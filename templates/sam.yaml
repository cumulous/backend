AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  EncryptionKeyId:
    Type: String
    MinLength: 1
  SSHKeyName:
    Type: String
    MinLength: 1
  SSHKeyS3Bucket:
    Type: String
    MinLength: 1
  SSHKeyS3Path:
    Type: String
    MinLength: 1
  SSHKeyPutRole:
    Type: String
    MinLength: 1
  SSHKeyGetRole:
    Type: String
    MinLength: 1

Resources:
  SendCloudFormationResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: cloudformation.sendResponse
      Runtime: nodejs4.3

  CreateStateMachinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: cloudformation:DescribeStackResource
            Resource:
              - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
          - Effect: Allow
            Action: states:CreateStateMachine
            Resource:
              - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*_${AWS::StackName}
          - Effect: Allow
            Action: iam:PassRole
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/StatesExecutionRole-${AWS::Region}

  CreateStateMachine:
    Type: AWS::Serverless::Function
    Properties: !Sub |
      CodeUri: ../app
      Handler: states.createStateMachine
      Runtime: nodejs4.3
      Timeout: 5
      Environment:
        Variables:
          AWS_ACCOUNT: ${AWS::AccountId}
          STACK_NAME: ${AWS::StackName}
      Policies: ${CreateStateMachinePolicy}

  ExecuteStateMachine:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: states.executeStateMachine
      Runtime: nodejs4.3
      Environment:
        Variables:
          AWS_ACCOUNT: !Ref AWS::AccountId
          STACK_NAME: !Ref AWS::StackName
      Policies:
        Statement:
          - Effect: Allow
            Action: states:StartExecution
            Resource:
              - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*_${AWS::StackName}

  SetupInstancesInitResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - CreateStateMachine
      - SendCloudFormationResponse
    Properties:
      ServiceToken: !GetAtt SetupInstancesInit.Arn

  SetupInstancesInit:
    Type: AWS::Serverless::Function
    Properties: !Sub |
      CodeUri: ../app
      Handler: instances.setupInstancesInit
      Runtime: nodejs4.3
      Environment:
        Variables:
          AWS_ACCOUNT: ${AWS::AccountId}
          STACK_NAME: $AWS::StackName}
      Policies: ${CreateStateMachinePolicy}

  InstancesInit:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.init
      Runtime: nodejs4.3
      Environment:
        Variables:
          AWS_ACCOUNT: !Ref AWS::AccountId
          STACK_NAME: !Ref AWS::StackName
      Events:
        InstanceRunning:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - EC2 Instance State-change Notification
              detail:
                state:
                  - running
      Policies:
        Statement:
          - Effect: Allow
            Action: states:StartExecution
            Resource:
              - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:Instances-Init-*_${AWS::StackName}

  DescribeInstance:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.describeInstance
      Runtime: nodejs4.3
      Timeout: 5
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DescribeInstances
            Resource: '*'

  SetupSSHKeyResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - CreateSSHKey
      - DeleteSSHKey
      - CreateStateMachine
      - ExecuteStateMachine
      - SendCloudFormationResponse
    Properties:
      ServiceToken: !GetAtt SetupSSHKey.Arn

  SetupSSHKey:
    Type: AWS::Serverless::Function
    Properties: !Sub |
      CodeUri: ../app
      Handler: instances.setupSSHKey
      Runtime: nodejs4.3
      Environment:
        Variables:
          AWS_ACCOUNT: ${AWS::AccountId}
          STACK_NAME: ${AWS::StackName}
      Policies:
        - ${CreateStateMachinePolicy}
        -
          Statement:
            - Effect: Allow
              Action: states:StartExecution
              Resource:
                - arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:Instances-SetupSSHKey-*_${AWS::StackName}

  CreateSSHKey:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.createSSHKey
      Runtime: nodejs4.3
      Environment:
        Variables:
          ENCRYPTION_KEY_ID: !Ref EncryptionKeyId
          SSH_KEY_NAME: !Ref SSHKeyName
          SSH_KEY_S3_BUCKET: !Ref SSHKeyS3Bucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${SSHKeyPutRole}

  DeleteSSHKey:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.deleteSSHKey
      Runtime: nodejs4.3
      Environment:
        Variables:
          SSH_KEY_NAME: !Ref SSHKeyName
          SSH_KEY_S3_BUCKET: !Ref SSHKeyS3Bucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DeleteKeyPair
            Resource: '*'
          - Effect: Allow
            Action: s3:DeleteObject
            Resource:
              - !Sub arn:aws:s3:::${SSHKeyS3Bucket}/${SSHKeyS3Path}

  CheckSSHKeyName:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.checkSSHKeyName
      Runtime: nodejs4.3
      Environment:
        Variables:
          SSH_KEY_NAME: !Ref SSHKeyName

  CalculateVolumeSizes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.calculateVolumeSizes
      Runtime: nodejs4.3

  CreateVolumes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.createVolumes
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:CreateVolume
            Resource: '*'

  WaitForVolumesAvailable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.waitForVolumesAvailable
      Runtime: nodejs4.3
      Timeout: 20
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DescribeVolumes
            Resource: '*'

  CalculateVolumeDevices:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.calculateVolumeDevices
      Runtime: nodejs4.3

  AttachVolumes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.attachVolumes
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:AttachVolume
            Resource: '*'

  DetachVolumes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.detachVolumes
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DetachVolume
            Resource: '*'

  DeleteVolumes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.deleteVolumes
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DeleteVolume
            Resource: '*'

  DeleteVolumesOnTermination:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.deleteVolumesOnTermination
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:ModifyInstanceAttribute
            Resource: '*'

  TransferInitScript:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.transferInitScript
      Runtime: nodejs4.3
      Timeout: 10
      Environment:
        Variables:
          SSH_KEY_S3_BUCKET: !Ref SSHKeyS3Bucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${SSHKeyGetRole}

  ExecuteInitScript:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.executeInitScript
      Runtime: nodejs4.3
      Timeout: 15
      Environment:
        Variables:
          SSH_KEY_S3_BUCKET: !Ref SSHKeyS3Bucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${SSHKeyGetRole}