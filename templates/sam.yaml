AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  EncryptionKeyId:
    Type: String
  SSHKeyName:
    Type: String
  SSHKeyS3Bucket:
    Type: String
  SSHKeyS3Path:
    Type: String
  SSHKeyPutRole:
    Type: String
  SSHKeyGetRole:
    Type: String

Resources:
  SendCloudFormationResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: cloudformation.sendResponse
      Runtime: nodejs4.3

  InstancesInit:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.init
      Runtime: nodejs4.3
      Environment:
        Variables:
          STATE_MACHINE: !Ref InstancesInitStateMachine
      Events:
        InstanceRunning:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - EC2 Instance State-change Notification
              detail:
                state:
                  - running
      Policies:
        Statement:
          - Effect: Allow
            Action: states:StartExecution
            Resource:
              - !Ref InstancesInitStateMachine

  DescribeInstance:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.describeInstance
      Runtime: nodejs4.3
      Timeout: 5
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DescribeInstances
            Resource: '*'

  SetupSSHKeyResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - SendCloudFormationResponse
    Properties:
      ServiceToken: !GetAtt SetupSSHKey.Arn

  SetupSSHKey:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.setupSSHKey
      Runtime: nodejs4.3
      Timeout: 5
      Environment:
        Variables:
          STATE_MACHINE: !Ref SetupSSHKeyStateMachine
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Ref SetupSSHKeyStateMachine

  CreateSSHKey:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.createSSHKey
      Runtime: nodejs4.3
      Environment:
        Variables:
          ENCRYPTION_KEY_ID: !Ref EncryptionKeyId
          SSH_KEY_NAME: !Ref SSHKeyName
          SSH_KEY_S3_BUCKET: !Ref SSHKeyS3Bucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${SSHKeyPutRole}

  DeleteSSHKey:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.deleteSSHKey
      Runtime: nodejs4.3
      Environment:
        Variables:
          SSH_KEY_NAME: !Ref SSHKeyName
          SSH_KEY_S3_BUCKET: !Ref SSHKeyS3Bucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DeleteKeyPair
            Resource: '*'
          - Effect: Allow
            Action: s3:DeleteObject
            Resource:
              - !Sub arn:aws:s3:::${SSHKeyS3Bucket}/${SSHKeyS3Path}

  CheckSSHKeyName:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.checkSSHKeyName
      Runtime: nodejs4.3
      Environment:
        Variables:
          SSH_KEY_NAME: !Ref SSHKeyName

  CalculateVolumeSizes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.calculateVolumeSizes
      Runtime: nodejs4.3

  CreateVolumes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.createVolumes
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:CreateVolume
            Resource: '*'

  WaitForVolumesAvailable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.waitForVolumesAvailable
      Runtime: nodejs4.3
      Timeout: 20
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DescribeVolumes
            Resource: '*'

  CalculateVolumeDevices:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.calculateVolumeDevices
      Runtime: nodejs4.3

  AttachVolumes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.attachVolumes
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:AttachVolume
            Resource: '*'

  DetachVolumes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.detachVolumes
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DetachVolume
            Resource: '*'

  DeleteVolumes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.deleteVolumes
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DeleteVolume
            Resource: '*'

  DeleteVolumesOnTermination:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.deleteVolumesOnTermination
      Runtime: nodejs4.3
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:ModifyInstanceAttribute
            Resource: '*'

  TransferInitScript:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.transferInitScript
      Runtime: nodejs4.3
      Timeout: 10
      Environment:
        Variables:
          SSH_KEY_S3_BUCKET: !Ref SSHKeyS3Bucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${SSHKeyGetRole}

  ExecuteInitScript:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../app
      Handler: instances.executeInitScript
      Runtime: nodejs4.3
      Timeout: 15
      Environment:
        Variables:
          SSH_KEY_S3_BUCKET: !Ref SSHKeyS3Bucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${SSHKeyGetRole}

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  InstancesInitStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: |-
        {
          "StartAt": "DescribeInstance",
          "States": {
            "DescribeInstance": {
              "Type": "Task",
              "InputPath": "$.detail.instance-id",
              "Resource": { "Fn::GetAtt" : ["DescribeInstance", "Arn"] },
              "Next": "CheckSSHKeyName"
            },
            "CheckSSHKeyName": {
              "Type": "Task",
              "InputPath": "$.KeyName",
              "ResultPath": null,
              "Resource": { "Fn::GetAtt" : ["CheckSSHKeyName", "Arn"] },
              "Next": "CalculateVolumeSizes"
            },
            "CalculateVolumeSizes": {
              "Type": "Task",
              "InputPath": "$.InstanceType",
              "ResultPath": "$.volumeSizes",
              "Resource": { "Fn::GetAtt" : ["CalculateVolumeSizes", "Arn"] },
              "Next": "CreateVolumes"
            },
            "CreateVolumes": {
              "Type": "Task",
              "ResultPath": "$.volumeIds",
              "Resource": { "Fn::GetAtt" : ["CreateVolumes", "Arn"] },
              "Next": "WaitForVolumesCreated",
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DeleteVolumes"
              }]
            },
            "WaitForVolumesCreated": {
              "Type": "Task",
              "InputPath": "$.volumeIds",
              "ResultPath": null,
              "Resource": { "Fn::GetAtt" : ["WaitForVolumesAvailable", "Arn"] },
              "Next": "CalculateVolumeDevices",
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DeleteVolumes"
              }]
            },
            "CalculateVolumeDevices": {
              "Type": "Task",
              "InputPath": "$.volumeIds",
              "ResultPath": "$.volumeDevices",
              "Resource": { "Fn::GetAtt" : ["CalculateVolumeDevices", "Arn"] },
              "Next": "AttachVolumes",
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DeleteVolumes"
              }]
            },
            "AttachVolumes": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": { "Fn::GetAtt" : ["AttachVolumes", "Arn"] },
              "Next": "DeleteVolumesOnTermination",
              "Retry": [{
                  "ErrorEquals": [ "HandledError" ],
                  "IntervalSeconds": 5
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DetachVolumes"
              }]
            },
            "DetachVolumes": {
              "Type": "Task",
              "InputPath": "$.volumeIds",
              "ResultPath": null,
              "Resource": { "Fn::GetAtt" : ["DetachVolumes", "Arn"] },
              "Next": "WaitForVolumesDetached"
            },
            "WaitForVolumesDetached": {
              "Type": "Task",
              "InputPath": "$.volumeIds",
              "ResultPath": null,
              "Resource": { "Fn::GetAtt" : ["WaitForVolumesAvailable", "Arn"] },
              "Next": "DeleteVolumes",
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DeleteVolumes"
              }]
            },
            "DeleteVolumes": {
              "Type": "Task",
              "InputPath": "$.volumeIds",
              "Resource": { "Fn::GetAtt" : ["DeleteVolumes", "Arn"] },
              "Next": "Fail"
            },
            "DeleteVolumesOnTermination": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": { "Fn::GetAtt" : ["DeleteVolumesOnTermination", "Arn"] },
              "Next": "TransferInitScript",
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DetachVolumes"
              }]
            },
            "TransferInitScript": {
              "Type": "Task",
              "InputPath": "$.PublicDnsName",
              "ResultPath": null,
              "Resource": { "Fn::GetAtt" : ["TransferInitScript", "Arn"] },
              "TimeoutSeconds": 5,
              "Next": "ExecuteInitScript",
              "Retry": [{
                  "ErrorEquals": [ "HandledError", "States.Timeout" ],
                  "IntervalSeconds": 5, "MaxAttempts": 5
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DetachVolumes"
              }]
            },
            "ExecuteInitScript": {
              "Type": "Task",
              "Resource": { "Fn::GetAtt" : ["ExecuteInitScript", "Arn"] },
              "TimeoutSeconds": 10,
              "End": true,
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DetachVolumes"
              }]
            },
            "Fail": {
              "Type": "Fail",
              "Cause": "Failed to initialize instance"
            }
          }
        }

  SetupSSHKeyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: |-
        {
          "StartAt": "ChooseEventType",
          "States": {
            "ChooseEventType": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.RequestType",
                  "StringEquals": "Create",
                  "Next": "DeleteSSHKey"
                },
                {
                  "Variable": "$.RequestType",
                  "StringEquals": "Update",
                  "Next": "CreateSSHKey"
                },
                {
                  "Variable": "$.RequestType",
                  "StringEquals": "Delete",
                  "Next": "DeleteSSHKey"
                }
              ],
              "Default": "Fail"
            },
            "DeleteSSHKey": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": { "Fn::GetAtt" : ["DeleteSSHKey", "Arn"] },
              "Next": "CheckCreateSSHKey",
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": null,
                "Next": "Fail"
              }]
            },
            "CheckCreateSSHKey": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.RequestType",
                  "StringEquals": "Create",
                  "Next": "CreateSSHKey"
                }
              ],
              "Default": "Succeed"
            },
            "CreateSSHKey": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": { "Fn::GetAtt" : ["CreateSSHKey", "Arn"] },
              "Next": "Succeed",
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": null,
                "Next": "Fail"
              }]
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "Succeed": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "SUCCESS",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": { "Fn::GetAtt" : ["SendCloudFormationResponse", "Arn"] },
              "End": true
            }
          }
        }