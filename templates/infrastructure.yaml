Parameters:
  RepoName:
    Description: "This stack's CodeCommit repository name (*)"
    Type: String
    AllowedPattern: ^[\w.-]{1,100}$
    Default: backend
  StackAdmin:
    Description: "IAM user whom to allow to administer this stack, including encryption keys"
    Type: String
    AllowedPattern: ^[\w+=.,@-]{0,64}$
    Default: ''
  NotificationEmail:
    Description: "Email for notifying about pipeline updates"
    Type: String
    AllowedPattern: ^(|[\w\.-]+@[\w\.-]+\.[a-z\.]{2,6})$
    Default: ''
  BetaVPCRange:
    Description: "CIDR block of IP addresses for EC2 instances in 'Beta' environment (*)"
    Type: String
    AllowedPattern: ^(10|172|192)(\.(1?\d{0,2}|2[0-4]\d|25[0-5])){3}/(1[6-9]|2[0-8])$
    Default: 10.0.0.0/16
  ProductionVPCRange:
    Description: "CIDR block of IP addresses for EC2 instances in 'Production' environment (*)"
    Type: String
    AllowedPattern: ^(10|172|192)(\.(1?\d{0,2}|2[0-4]\d|25[0-5])){3}/(1[6-9]|2[0-8])$
    Default: 10.1.0.0/16
  Domain:
    Description: "Registered domain name for the entire infrastructure (*)"
    Type: String
    AllowedPattern: ^[a-z][a-z0-9\.]*\.[a-z]+$
  HostedZone:
    Description: "Route 53 hosted zone ID, if created previously for this domain"
    Type: String
    AllowedPattern: ^[A-Z0-9]{0,32}$
    Default: ''
  Auth0Domain:
    Description: "Your Auth0 domain name (*)"
    Type: String
    AllowedPattern: ^[a-z][a-z0-9\.]*\.[a-z]+$
  Auth0CloudFormationClientID:
    Description: "Your Auth0 CloudFormation cliend ID (*)"
    Type: String
    AllowedPattern: ^\w{32}$
  Auth0CloudFormationClientSecret:
    Description: "Your Auth0 CloudFormation cliend secret (*)"
    Type: String
    NoEcho: true
    AllowedPattern: ^[\w-]{64}$

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Repositories"
        Parameters:
          - RepoName
      -
        Label:
          default: "Administration"
        Parameters:
          - StackAdmin
          - NotificationEmail
      -
        Label:
          default: "Network"
        Parameters:
          - BetaVPCRange
          - ProductionVPCRange
          - Domain
          - HostedZone
      -
        Label:
          default: "Auth0"
        Parameters:
          - Auth0Domain
          - Auth0CloudFormationClientID
          - Auth0CloudFormationClientSecret

Conditions:
  EnableStackAdmin: !Not [!Equals [!Ref StackAdmin, '']]
  CreateNotification: !Not [!Equals [!Ref NotificationEmail, '']]
  CreateHostedZone: !Equals [!Ref HostedZone, '']

Resources:
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  SecretsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  DomainZone:
    Type: AWS::Route53::HostedZone
    Condition: CreateHostedZone
    DeletionPolicy: Retain
    Properties:
      Name: !Ref Domain

  PipelineNotification:
    Type: AWS::SNS::Topic
    Condition: CreateNotification
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationEmail
          Protocol: email

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref RepoName
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        -
          Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !Ref RepoName
                BranchName: master
              OutputArtifacts:
                - Name: Source
        -
          Name: Build
          Actions:
            -
              Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: Deploy
        -
          Name: Beta
          Actions:
            -
              Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: Deploy
                StackName: !Sub ${RepoName}-beta
                Capabilities: CAPABILITY_IAM
                TemplatePath: Deploy::sam.yaml
                RoleArn: !GetAtt DeployRole.Arn
                ParameterOverrides: !Sub
                - |-
                  {
                    "VpcRange": "${BetaVPCRange}",
                    "EncryptionKeyId": "${EncryptionKey}",
                    "SecretsBucket": "${SecretsBucket}",
                    "SSHKeyName": "${RepoName}-beta",
                    "SSHKeyS3Path" : "ssh/${RepoName}-beta.pem",
                    "SSHKeyPutRole": "${SSHKeyPutRole}",
                    "SSHKeyGetRole": "${SSHKeyGetRole}",
                    "DomainZone": "${HostedZoneId}",
                    "APIDomain": "beta.api.${Domain}",
                    "WebDomain": "beta.${Domain}",
                    "Auth0Domain": "${Auth0Domain}",
                    "Auth0CloudFormationClientID": "${Auth0CloudFormationClientID}",
                    "Auth0CloudFormationClientSecret": "${Auth0CloudFormationClientSecret}",
                    "Auth0CloudFormationSecretsRole": "${Auth0CloudFormationSecretsRole}"
                  }
                - HostedZoneId: !If [CreateHostedZone, !Ref DomainZone, !Ref HostedZone]
              InputArtifacts:
                - Name: Deploy
              RunOrder: 1
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              Configuration:
                NotificationArn: !If [CreateNotification, !Ref PipelineNotification, !Ref 'AWS::NoValue']
              RunOrder: 2
            -
              Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: Deploy
                StackName: !Sub ${RepoName}-beta
              RunOrder: 3
        -
          Name: Release
          Actions:
            -
              Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: Deploy
                StackName: !Sub ${RepoName}-release
                Capabilities: CAPABILITY_IAM
                TemplatePath: Deploy::sam.yaml
                RoleArn: !GetAtt DeployRole.Arn
                ParameterOverrides: !Sub
                - |-
                  {
                    "VpcRange": "${ProductionVPCRange}",
                    "EncryptionKeyId": "${EncryptionKey}",
                    "SecretsBucket": "${SecretsBucket}",
                    "SSHKeyName": "${RepoName}-release",
                    "SSHKeyS3Path" : "ssh/${RepoName}-release.pem",
                    "SSHKeyPutRole": "${SSHKeyPutRole}",
                    "SSHKeyGetRole": "${SSHKeyGetRole}",
                    "DomainZone": "${HostedZoneId}",
                    "APIDomain": "api.${Domain}",
                    "WebDomain": "${Domain}",
                    "Auth0Domain": "${Auth0Domain}",
                    "Auth0CloudFormationClientID": "${Auth0CloudFormationClientID}",
                    "Auth0CloudFormationSecretsRole": "${Auth0CloudFormationSecretsRole}"
                  }
                - HostedZoneId: !If [CreateHostedZone, !Ref DomainZone, !Ref HostedZone]
              InputArtifacts:
                - Name: Deploy
              RunOrder: 1
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              Configuration:
                NotificationArn: !If [CreateNotification, !Ref PipelineNotification, !Ref 'AWS::NoValue']
              RunOrder: 2
            -
              Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: Deploy
                StackName: !Sub ${RepoName}-release
              RunOrder: 3

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref RepoName
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/nodejs:4.3.2
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: ARTIFACTS_BUCKET
            Value: !Ref ArtifactsBucket
          - Name: BACKEND_STAGE
            Value: beta
      ServiceRole: !Ref BuildRole

  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${RepoName}
      TargetKeyId: !Ref EncryptionKey

  EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: !GetAtt SSHKeyPutRole.Arn
            Action:
              - kms:GenerateDataKey
            Condition:
              StringEquals:
                'kms:ViaService': !Sub s3.${AWS::Region}.amazonaws.com
              StringLike:
                'kms:EncryptionContext:aws:s3:arn': !Sub arn:aws:s3:::${SecretsBucket}/ssh/*.pem
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: !GetAtt SSHKeyGetRole.Arn
            Action:
              - kms:Decrypt
            Condition:
              StringEquals:
                'kms:ViaService': !Sub s3.${AWS::Region}.amazonaws.com
              StringLike:
                'kms:EncryptionContext:aws:s3:arn': !Sub arn:aws:s3:::${SecretsBucket}/ssh/*.pem
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: !GetAtt Auth0CloudFormationSecretsRole.Arn
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Condition:
              StringEquals:
                'kms:ViaService': !Sub s3.${AWS::Region}.amazonaws.com
              StringLike:
                'kms:EncryptionContext:aws:s3:arn': !Sub arn:aws:s3:::${SecretsBucket}/auth0/*.key
            Resource: '*'
          - Effect: Deny
            NotPrincipal:
              AWS:
              - !Ref AWS::AccountId

              - !GetAtt SSHKeyPutRole.Arn
              - !Sub "arn:aws:sts::${AWS::AccountId}:assumed-role/\
                      ${SSHKeyPutRole}/${RepoName}-beta-CreateSSHKey"
              - !Sub "arn:aws:sts::${AWS::AccountId}:assumed-role/\
                      ${SSHKeyPutRole}/${RepoName}-release-CreateSSHKey"

              - !GetAtt SSHKeyGetRole.Arn
              - !Sub "arn:aws:sts::${AWS::AccountId}:assumed-role/\
                      ${SSHKeyGetRole}/${RepoName}-beta-TransferInitScript"
              - !Sub "arn:aws:sts::${AWS::AccountId}:assumed-role/\
                      ${SSHKeyGetRole}/${RepoName}-release-TransferInitScript"
              - !Sub "arn:aws:sts::${AWS::AccountId}:assumed-role/\
                      ${SSHKeyGetRole}/${RepoName}-beta-ExecuteInitScript"
              - !Sub "arn:aws:sts::${AWS::AccountId}:assumed-role/\
                      ${SSHKeyGetRole}/${RepoName}-release-ExecuteInitScript"

              - !GetAtt Auth0CloudFormationSecretsRole.Arn
              - !Sub "arn:aws:sts::${AWS::AccountId}:assumed-role/\
                      ${Auth0CloudFormationSecretsRole}/${RepoName}-beta-RotateAndStoreAuth0Secret"
              - !Sub "arn:aws:sts::${AWS::AccountId}:assumed-role/\
                      ${Auth0CloudFormationSecretsRole}/${RepoName}-release-RotateAndStoreAuth0Secret"

              - !If
                - EnableStackAdmin
                - !Sub 'arn:aws:iam::${AWS::AccountId}:user/${StackAdmin}'
                - !Ref 'AWS::NoValue'
            Action:
              - kms:*
            Resource: '*'

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelineRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
                Resource:
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepoName}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/${RepoName}/*
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt BuildProject.Arn
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeChangeSet
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${RepoName}-beta/*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${RepoName}-release/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt DeployRole.Arn
              - !If
                - CreateNotification
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource:
                    - !Ref PipelineNotification
                - !Ref AWS::NoValue

  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BuildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/lambda/*
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/${RepoName}/*
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/api/beta/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactsBucket}

  DeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DeployPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                Resource:
                  - arn:aws:cloudformation:us-east-1:aws:transform/Serverless-2016-10-31
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:PassRole
                  - iam:DeleteRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${RepoName}-*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt SSHKeyPutRole.Arn
                  - !GetAtt SSHKeyGetRole.Arn
              - Effect: Allow
                Action:
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                Condition:
                  ArnLike:
                    'iam:PolicyArn':
                      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
                      - !Sub arn:aws:iam::${AWS::AccountId}:policy/${RepoName}-*
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${RepoName}-*
              - Effect: Allow
                Action:
                  - states:CreateStateMachine
                  - states:DeleteStateMachine
                Resource:
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/lambda/*
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/${RepoName}/Deploy/*
              - Effect: Allow
                Action:
                  - lambda:CreateFunction
                  - lambda:UpdateFunctionCode
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:UpdateFunctionConfiguration
                  - lambda:InvokeFunction
                  - lambda:DeleteFunction
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${RepoName}-*
              - Effect: Allow
                Action:
                  - events:DescribeRule
                  - events:PutRule
                  - events:DeleteRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${RepoName}-*
              - Effect: Allow
                Action:
                  - ec2:CreateVpc
                  - ec2:CreateVpcEndpoint
                  - ec2:CreateRouteTable
                  - ec2:CreateRoute
                  - ec2:CreateInternetGateway
                  - ec2:CreateTags
                  - ec2:DescribeVpcs
                  - ec2:DescribeVpcEndpoints
                  - ec2:DescribeRouteTables
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeAccountAttributes
                  - ec2:AttachInternetGateway
                  - ec2:ModifyVpcAttribute
                  - ec2:DeleteVpc
                  - ec2:DeleteVpcEndpoints
                  - ec2:DetachInternetGateway
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DeleteRouteTable
                  - ec2:DeleteRoute
                  - ec2:DeleteInternetGateway
                Condition:
                  StringLike:
                    'ec2:ResourceTag/Name': !Sub ${RepoName}-*
                Resource:
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:route-table/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:internet-gateway/*
              - Effect: Allow
                Action:
                  - ec2:DescribeKeyPairs
                Resource: '*'
              - Effect: Allow
                Action:
                  - apigateway:GET
                  - apigateway:POST
                  - apigateway:PUT
                  - apigateway:PATCH
                  - apigateway:DELETE
                Resource:
                  - !Sub arn:aws:apigateway:${AWS::Region}::/restapis*
                  - !Sub arn:aws:apigateway:${AWS::Region}::/usageplans*
                  - !Sub arn:aws:apigateway:${AWS::Region}::/domainnames/*api.${Domain}/basepathmappings
              - Effect: Allow
                Action:
                  - acm:RequestCertificate
                  - acm:DescribeCertificate
                  - acm:DeleteCertificate
                Resource: '*'

  SSHKeyPutRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SSHKeyPutPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ec2:CreateKeyPair
                Resource: '*'
              - Effect: Allow
                Action: s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${SecretsBucket}/ssh/*.pem

  SSHKeyGetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SSHKeyGetPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${SecretsBucket}/ssh/*.pem

  Auth0CloudFormationSecretsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Auth0CloudFormationSecretsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${SecretsBucket}/auth0/*

Outputs:
  PipelineUrl:
    Value: !Sub 'https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}'