Parameters:
  BackendStack:
    Type: String
  ArtifactsBucket:
    Type: String
  LambdaPackage:
    Type: String
  WebDomain:
    Type: String
  ApiDomain:
    Type: String
  ApiId:
    Type: String
  ApiStage:
    Type: String
  AuthProviders:
    Type: CommaDelimitedList
  MinimumPasswordLength:
    Type: Number

Conditions:
  AuthProvidersEmpty: !Equals [!Join [ '', !Ref AuthProviders ], '']

Resources:
  UserPool:
    Type: Custom::UserPool
    DeletionPolicy: Retain
    Properties:
      ServiceToken: !GetAtt SetupUserPool.Arn
      StateMachine: !Ref UserPoolStateMachine
      Config: !Sub
        - |
          {
            "PoolName": "${BackendStack}-user-pool",
            "Schema": [{
              "Name": "email",
              "AttributeDataType": "String",
              "Mutable": true,
              "Required": true
            }],
            "UsernameAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [
              "email"
            ],
            "Policies": {
              "PasswordPolicy": {
                "MinimumLength": ${MinimumPasswordLength},
                "RequireLowercase": true,
                "RequireNumbers": true,
                "RequireSymbols": true,
                "RequireUppercase": true
              }
            },
            "LambdaConfig": {
              "PreSignUp": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${BackendStack}-Cognito-PreSignUp"
            },
            "VerificationMessageTemplate": {
              "DefaultEmailOption": "CONFIRM_WITH_LINK",
              "EmailMessageByLink": "Please verify your email address for ${WebDomain} by following this link: {##Verify Email##}"
            },
            "AdminCreateUserConfig": {
              "AllowAdminCreateUserOnly": true,
              "InviteMessageTemplate": {
                "EmailSubject": "Welcome to ${WebDomain}!",
                "EmailMessage": "<body style=\"font-family: Helvetica, Arial, sans-serif; font-size: 10pt;\">
                  Hi there,
                  <p>
                    Someone invited you to <a href=https://${WebDomain}>${WebDomain}</a>
                    &mdash; a portal for storing, organizing and analyzing your data in the cloud.
                  </p>
                  <p>
                    To set a password, please open the portal, click <em>Forgot your password?</em>,
                    enter your <em>email</em>, click <em>Reset my password</em>,
                    and follow the instructions.
                  </p>
                  <p>
                    ${ProvidersMessage}
                  </p>
                  <p style=\"font-size: 0pt; display: none;\" hidden>
                    <small>
                      <em>
                        Please disregard weird characters below.
                        They are only used for debugging and should normally be hidden.
                      </em>
                      <br/>
                      {####}
                    </small>
                  </p>
                </body>"
              }
            }
          }
        - ProvidersMessage: !If
          - AuthProvidersEmpty
          - ''
          - !Join
            - ''
            - - 'You can also log in with an external identity provider ('
              - !Join [ '/', !Ref AuthProviders ]
              - '), as long as its <em>email</em> is the same.'

  SetupUserPool:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.setupCustomResource
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetupUserPoolRole.Arn

  SetupUserPoolRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SetupUserPoolRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref UserPoolStateMachine

  CreateUserPool:
    Type: AWS::Lambda::Function
    Properties:
      Handler: cognito.createUserPool
      Timeout: 30
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt CreateUserPoolRole.Arn

  CreateUserPoolRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateUserPoolRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: cognito-idp:CreateUserPool
                Resource: '*'

  UpdateUserPool:
    Type: AWS::Lambda::Function
    Properties:
      Handler: cognito.updateUserPool
      Timeout: 30
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt UpdateUserPoolRole.Arn

  UpdateUserPoolRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UpdateUserPoolRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: cognito-idp:UpdateUserPool
                Resource: '*'

  SendCloudFormationResponse:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.sendCloudFormationResponse
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt LambdaBasicExecutionRole.Arn

  LambdaBasicExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  UserPoolStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StatesExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt CreateUserPool.Arn
                  - !GetAtt UpdateUserPool.Arn
                  - !GetAtt SendCloudFormationResponse.Arn

  UserPoolStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt UserPoolStateMachineRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupUserPool",
          "States": {
            "SetupUserPool": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckRequestType",
                "States": {
                  "CheckRequestType": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Create",
                      "Next": "CreateUserPool"
                    },{
                      "Variable": "$.RequestType",
                      "StringEquals": "Update",
                      "Next": "UpdateUserPool"
                    }],
                    "Default": "Success"
                  },
                  "CreateUserPool": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Config",
                    "ResultPath": "$.Data",
                    "Resource": "${CreateUserPool.Arn}",
                    "Next": "PassResourceId"
                  },
                  "PassResourceId": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.PhysicalResourceId",
                    "Next": "Success"
                  },
                  "UpdateUserPool": {
                    "Type": "Task",
                    "ResultPath": "$.Data",
                    "Resource": "${UpdateUserPool.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  UserPoolDomain:
    Type: Custom::UserPoolDomain
    Properties:
      ServiceToken: !GetAtt SetupUserPoolDomain.Arn
      StateMachine: !Ref UserPoolDomainStateMachine
      Config:
        Domain: !Ref WebDomain
        UserPoolId: !Ref UserPool

  SetupUserPoolDomain:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.setupCustomResource
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetupUserPoolDomainRole.Arn

  SetupUserPoolDomainRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SetupUserPoolDomainRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref UserPoolDomainStateMachine

  CreateUserPoolDomain:
    Type: AWS::Lambda::Function
    Properties:
      Handler: cognito.createUserPoolDomain
      Timeout: 30
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt CreateUserPoolDomainRole.Arn

  CreateUserPoolDomainRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateUserPoolDomainRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: cognito-idp:CreateUserPoolDomain
                Resource:
                  - !GetAtt UserPool.Arn

  DeleteUserPoolDomain:
    Type: AWS::Lambda::Function
    Properties:
      Handler: cognito.deleteUserPoolDomain
      Timeout: 30
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DeleteUserPoolDomainRole.Arn

  DeleteUserPoolDomainRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeleteUserPoolDomainRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: cognito-idp:DeleteUserPoolDomain
                Resource: '*'

  UserPoolDomainStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StatesExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt CreateUserPoolDomain.Arn
                  - !GetAtt DeleteUserPoolDomain.Arn
                  - !GetAtt SendCloudFormationResponse.Arn

  UserPoolDomainStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt UserPoolDomainStateMachineRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupDomain",
          "States": {
            "SetupDomain": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckRequestType",
                "States": {
                  "CheckRequestType": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Create",
                      "Next": "CreateDomain"
                    },{
                      "Variable": "$.RequestType",
                      "StringEquals": "Update",
                      "Next": "DeleteBeforeCreate"
                    },{
                      "Variable": "$.RequestType",
                      "StringEquals": "Delete",
                      "Next": "DeleteDomain"
                    }]
                  },
                  "CreateDomain": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Config",
                    "ResultPath": "$.Data",
                    "Resource": "${CreateUserPoolDomain.Arn}",
                    "Next": "Success"
                  },
                  "DeleteBeforeCreate": {
                    "Type": "Task",
                    "InputPath": "$.OldResourceProperties.Config",
                    "ResultPath": null,
                    "Resource": "${DeleteUserPoolDomain.Arn}",
                    "Next": "CreateDomain"
                  },
                  "DeleteDomain": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Config",
                    "ResultPath": null,
                    "Resource": "${DeleteUserPoolDomain.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  BackendClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub backend
      UserPoolId: !Ref UserPool
      GenerateSecret: False
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      ReadAttributes:
        - email

  TestClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: True

  TestClientIntegration:
    Type: Custom::UserPoolClientIntegration
    Properties:
      ServiceToken: !GetAtt SetupUserPoolClientIntegration.Arn
      StateMachine: !Ref UserPoolClientIntegrationStateMachine
      Config: !Sub |-
        {
          "UserPoolId": "${UserPool}",
          "ClientId": "${TestClient}",
          "ClientName": "test",
          "AllowedOAuthFlowsUserPoolClient": true,
          "AllowedOAuthFlows": [ "client_credentials" ],
          "AllowedOAuthScopes": [ "${ResourceServer.Scope}" ],
          "ReadAttributes": [ "email" ]
        }

  WebClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: False

  WebClientIntegration:
    Type: Custom::UserPoolClientIntegration
    Properties:
      ServiceToken: !GetAtt SetupUserPoolClientIntegration.Arn
      StateMachine: !Ref UserPoolClientIntegrationStateMachine
      Config: !Sub
        - |
          {
            "UserPoolId": "${UserPool}",
            "ClientId": "${WebClient}",
            "ClientName": "web",
            "AllowedOAuthFlowsUserPoolClient": true,
            "AllowedOAuthFlows": [ "implicit" ],
            "AllowedOAuthScopes": [ "${ResourceServer.Scope}" ],
            "CallbackURLs": [ "https://${WebDomain}/login" ],
            "LogoutURLs": [ "https://${WebDomain}/login" ],
            "SupportedIdentityProviders": [ ${Providers} ],
            "ReadAttributes": [ "email", "name" ]
          }
        - Providers: !If
          - AuthProvidersEmpty
          - '"COGNITO"'
          - !Join [ '', ['"COGNITO", "', !Join [ '", "', !Ref AuthProviders ], '"' ] ]

  SetupUserPoolClientIntegration:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.setupCustomResource
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetupUserPoolClientIntegrationRole.Arn

  SetupUserPoolClientIntegrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SetupUserPoolClientIntegrationRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref UserPoolClientIntegrationStateMachine

  UpdateUserPoolClient:
    Type: AWS::Lambda::Function
    Properties:
      Handler: cognito.updateUserPoolClient
      Timeout: 30
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt UpdateUserPoolClientRole.Arn

  UpdateUserPoolClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UpdateUserPoolClientRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: cognito-idp:UpdateUserPoolClient
                Resource:
                  - !GetAtt UserPool.Arn

  UserPoolClientIntegrationStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StatesExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt UpdateUserPoolClient.Arn
                  - !GetAtt SendCloudFormationResponse.Arn

  UserPoolClientIntegrationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt UserPoolClientIntegrationStateMachineRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupIntegration",
          "States": {
            "SetupIntegration": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckDelete",
                "States": {
                  "CheckDelete": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Delete",
                      "Next": "Success"
                    }],
                    "Default": "UpdateClient"
                  },
                  "UpdateClient": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Config",
                    "ResultPath": null,
                    "Resource": "${UpdateUserPoolClient.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  ResourceServer:
    Type: Custom::UserPoolResourceServer
    Properties:
      ServiceToken: !GetAtt SetupResourceServer.Arn
      StateMachine: !Ref ResourceServerStateMachine
      Config:
        Identifier: !Ref ApiDomain
        UserPoolId: !Ref UserPool

  SetupResourceServer:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.setupCustomResource
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetupResourceServerRole.Arn

  SetupResourceServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SetupResourceServerRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref ResourceServerStateMachine

  CreateResourceServer:
    Type: AWS::Lambda::Function
    Properties:
      Handler: cognito.createResourceServer
      Timeout: 30
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt CreateResourceServerRole.Arn

  CreateResourceServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateResourceServerRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: cognito-idp:CreateResourceServer
                Resource:
                  - !GetAtt UserPool.Arn

  DeleteResourceServer:
    Type: AWS::Lambda::Function
    Properties:
      Handler: cognito.deleteResourceServer
      Timeout: 30
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DeleteResourceServerRole.Arn

  DeleteResourceServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeleteResourceServerRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: cognito-idp:DeleteResourceServer
                Resource: '*'

  ResourceServerStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StatesExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt CreateResourceServer.Arn
                  - !GetAtt DeleteResourceServer.Arn
                  - !GetAtt SendCloudFormationResponse.Arn

  ResourceServerStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt ResourceServerStateMachineRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupIntegration",
          "States": {
            "SetupIntegration": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckRequestType",
                "States": {
                  "CheckRequestType": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Create",
                      "Next": "CreateResourceServer"
                    },{
                      "Variable": "$.RequestType",
                      "StringEquals": "Update",
                      "Next": "DeleteBeforeCreate"
                    },{
                      "Variable": "$.RequestType",
                      "StringEquals": "Delete",
                      "Next": "DeleteResourceServer"
                    }]
                  },
                  "CreateResourceServer": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Config",
                    "ResultPath": "$.Data",
                    "Resource": "${CreateResourceServer.Arn}",
                    "Next": "Success"
                  },
                  "DeleteBeforeCreate": {
                    "Type": "Task",
                    "InputPath": "$.OldResourceProperties.Config",
                    "ResultPath": null,
                    "Resource": "${DeleteResourceServer.Arn}",
                    "Next": "CreateResourceServer"
                  },
                  "DeleteResourceServer": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Config",
                    "ResultPath": null,
                    "Resource": "${DeleteResourceServer.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  CreateUser:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${BackendStack}-CreateUser
      Handler: cognito.createUser
      Timeout: 30
      Environment:
        Variables:
          AUTH_CLIENT_ID: !Ref BackendClient
          USER_POOL_ID: !Ref UserPool
          WEB_DOMAIN: !Ref WebDomain
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt CreateUserRole.Arn

  CreateUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateUserRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminRespondToAuthChallenge
                Resource:
                  - !GetAtt UserPool.Arn

  CreateUserPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateUser
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/${ApiStage}/POST/users

  ListUser:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${BackendStack}-ListUser
      Handler: cognito.listUser
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          WEB_DOMAIN: !Ref WebDomain
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt ListUserRole.Arn

  ListUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ListUserRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:ListUsers
                Resource:
                  - !GetAtt UserPool.Arn

  ListUserPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ListUser
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/${ApiStage}/GET/users

  GetUser:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${BackendStack}-GetUser
      Handler: cognito.getUser
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          WEB_DOMAIN: !Ref WebDomain
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt GetUserRole.Arn

  GetUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: GetUserRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser
                Resource:
                  - !GetAtt UserPool.Arn

  GetUserPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetUser
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/${ApiStage}/GET/users/{user_id}

  CreateClient:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${BackendStack}-CreateClient
      Handler: cognito.createClient
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          API_DOMAIN: !Ref ApiDomain
          WEB_DOMAIN: !Ref WebDomain
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt CreateClientRole.Arn

  CreateClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateClientRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:CreateUserPoolClient
                Resource:
                  - !GetAtt UserPool.Arn

  CreateClientPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateClient
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/${ApiStage}/POST/clients

  GetClient:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${BackendStack}-GetClient
      Handler: cognito.getClient
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          WEB_DOMAIN: !Ref WebDomain
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt GetClientRole.Arn

  GetClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: GetClientRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeUserPoolClient
                Resource:
                  - !GetAtt UserPool.Arn

  GetClientPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetClient
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/${ApiStage}/GET/clients/{client_id}

  PreSignUp:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${BackendStack}-Cognito-PreSignUp
      Handler: cognito.preSignUp
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt PreSignUpRole.Arn

  PreSignUpRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PreSignUpRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:ListUsers
                Resource:
                  - !GetAtt UserPool.Arn
              - Effect: Allow
                Action:
                  - cognito-idp:AdminLinkProviderForUser
                Resource: '*'

  PreSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PreSignUp
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

Outputs:
  UserPool:
    Value: !Ref UserPool
    Export:
      Name: !Sub ${BackendStack}-UserPool
  AuthDomain:
    Value: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
  TokenDomain:
    Value: !Sub ${UserPoolDomain.Domain}.auth.${AWS::Region}.amazoncognito.com
    Export:
      Name: !Sub ${BackendStack}-TokenDomain
  WebClient:
    Value: !Ref WebClient
    Export:
      Name: !Sub ${BackendStack}-WebClient
  TestClient:
    Value: !Ref TestClient
    Export:
      Name: !Sub ${BackendStack}-TestClient
