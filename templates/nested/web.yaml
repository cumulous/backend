Parameters:
  BackendStack:
    Type: String
  ArtifactsBucket:
    Type: String
  SecretsBucket:
    Type: String
  WebBucket:
    Type: String
  LambdaPackage:
    Type: String
  EncryptionKeyId:
    Type: String
  DomainZone:
    Type: String
  WebDomain:
    Type: String
  WebTTL:
    Type: Number
  WebPriceClass:
    Type: String
  WebLocations:
    Type: CommaDelimitedList
  WebACL:
    Type: String
  WebSigningKeyPutRoleArn:
    Type: String
  WebSigningKeyGetRoleArn:
    Type: String
  ApiId:
    Type: String
  ApiStage:
    Type: String

Conditions:
  SetupWebSigningKeyPair: !Not [!Equals [!Ref WebSigningKeyPutRoleArn, '']]

Resources:
  WebCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref WebDomain

  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Principal:
              CanonicalUser: !GetAtt WebOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub arn:aws:s3:::${WebBucket}/*
          - Effect: Allow
            Action: s3:ListBucket
            Principal:
              CanonicalUser: !GetAtt WebOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub arn:aws:s3:::${WebBucket}

  WebDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref WebDomain
        Enabled: true
        Origins:
        - Id: web
          DomainName: !Sub ${WebBucket}.s3.amazonaws.com
          S3OriginConfig:
            OriginAccessIdentity:
              !Sub origin-access-identity/cloudfront/${WebOriginAccessIdentity.Id}
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCachingMinTTL: !Ref WebTTL
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          TargetOriginId: web
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
          MinTTL: !Ref WebTTL
          DefaultTTL: !Ref WebTTL
          Compress: true
        PriceClass: !Sub PriceClass_${WebPriceClass}
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations: !Ref WebLocations
        ViewerCertificate:
          AcmCertificateArn: !Ref WebCertificate
          SslSupportMethod: sni-only
        WebACLId: !Ref WebACL

  WebDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref WebDomain
      Type: A
      HostedZoneId: !Ref DomainZone
      AliasTarget:
        DNSName: !GetAtt WebDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # fixed value, per docs

  WebOriginAccessIdentity:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupOriginAccess.Arn
      StateMachine: !Ref SetupOriginAccessStateMachine
      Comment: !Ref WebDomain
      Bucket: !Ref ArtifactsBucket
      Path: !Sub web/${BackendStack}-origin.json

  SetupOriginAccess:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.setupCustomResource
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetupOriginAccessRole.Arn

  SetupOriginAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SetupOriginAccessRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref SetupOriginAccessStateMachine

  StoreOriginAccessIdentity:
    Type: AWS::Lambda::Function
    Properties:
      Handler: web.storeOriginAccessIdentity
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt StoreOriginAccessIdentityRole.Arn

  StoreOriginAccessIdentityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StoreOriginAccessIdentityRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/web/${BackendStack}-origin.json

  RetrieveOriginAccessIdentity:
    Type: AWS::Lambda::Function
    Properties:
      Handler: web.retrieveOriginAccessIdentity
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt RetrieveOriginAccessIdentityRole.Arn

  RetrieveOriginAccessIdentityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RetrieveOriginAccessIdentityRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/web/${BackendStack}-origin.json

  CreateOriginAccessIdentity:
    Type: AWS::Lambda::Function
    Properties:
      Handler: web.createOriginAccessIdentity
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt CreateOriginAccessIdentityRole.Arn

  CreateOriginAccessIdentityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateOriginAccessIdentityRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: cloudfront:CreateCloudFrontOriginAccessIdentity
                Resource: '*'

  UpdateOriginAccessIdentity:
    Type: AWS::Lambda::Function
    Properties:
      Handler: web.updateOriginAccessIdentity
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt UpdateOriginAccessIdentityRole.Arn

  UpdateOriginAccessIdentityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UpdateOriginAccessIdentityRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: cloudfront:UpdateCloudFrontOriginAccessIdentity
                Resource: '*'

  DeleteOriginAccessIdentity:
    Type: AWS::Lambda::Function
    Properties:
      Handler: web.deleteOriginAccessIdentity
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DeleteOriginAccessIdentityRole.Arn

  DeleteOriginAccessIdentityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeleteOriginAccessIdentityRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: cloudfront:DeleteCloudFrontOriginAccessIdentity
                Resource: '*'

  SendCloudFormationResponse:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.sendCloudFormationResponse
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt LambdaBasicExecutionRole.Arn

  LambdaBasicExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SetupOriginAccessExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SetupOriginAccessExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt CreateOriginAccessIdentity.Arn
                  - !GetAtt StoreOriginAccessIdentity.Arn
                  - !GetAtt RetrieveOriginAccessIdentity.Arn
                  - !GetAtt UpdateOriginAccessIdentity.Arn
                  - !GetAtt DeleteOriginAccessIdentity.Arn
                  - !GetAtt SendCloudFormationResponse.Arn

  SetupOriginAccessStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt SetupOriginAccessExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupOriginAccess",
          "States": {
            "SetupOriginAccess": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckCreate",
                "States": {
                  "CheckCreate": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "CreateOriginAccessIdentity"
                      }
                    ],
                    "Default": "RetrieveOriginAccessIdentity"
                  },
                  "CreateOriginAccessIdentity": {
                    "Type": "Task",
                    "ResultPath": "$.Data",
                    "Resource": "${CreateOriginAccessIdentity.Arn}",
                    "Next": "StoreOriginAccessIdentity"
                  },
                  "StoreOriginAccessIdentity": {
                    "Type": "Task",
                    "ResultPath": null,
                    "Resource": "${StoreOriginAccessIdentity.Arn}",
                    "Next": "Success"
                  },
                  "RetrieveOriginAccessIdentity": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.Data",
                    "Resource": "${RetrieveOriginAccessIdentity.Arn}",
                    "Next": "CheckUpdateOrDelete"
                  },
                  "CheckUpdateOrDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "UpdateOriginAccessIdentity"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "DeleteOriginAccessIdentity"
                      }
                    ]
                  },
                  "UpdateOriginAccessIdentity": {
                    "Type": "Task",
                    "ResultPath": "$.Data",
                    "Resource": "${UpdateOriginAccessIdentity.Arn}",
                    "Next": "StoreOriginAccessIdentity"
                  },
                  "DeleteOriginAccessIdentity": {
                    "Type": "Task",
                    "InputPath": "$.Data",
                    "ResultPath": null,
                    "Resource": "${DeleteOriginAccessIdentity.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  WebSigningKey:
    Type: AWS::CloudFormation::CustomResource
    Condition: SetupWebSigningKeyPair
    Properties:
      ServiceToken: !GetAtt SetupWebSigningKeyPair.Arn
      StateMachine: !Ref SetupWebSigningKeyPairStateMachine
      KeySize: 4096
      PrivateKey:
        Bucket: !Ref SecretsBucket
        Path: !Sub web/signing.pem
        EncryptionKeyId: !Ref EncryptionKeyId
      PublicKey:
        Bucket: !Ref ArtifactsBucket
        Path: !Sub web/signing.pub

  SetupWebSigningKeyPair:
    Type: AWS::Lambda::Function
    Condition: SetupWebSigningKeyPair
    Properties:
      Handler: aws.setupCustomResource
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetupWebSigningKeyPairRole.Arn

  SetupWebSigningKeyPairRole:
    Type: AWS::IAM::Role
    Condition: SetupWebSigningKeyPair
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SetupWebSigningKeyPairRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref SetupWebSigningKeyPairStateMachine

  CreateAndExportWebSigningKeyPair:
    Type: AWS::Lambda::Function
    Condition: SetupWebSigningKeyPair
    Properties:
      Handler: web.createAndExportSigningKey
      Timeout: 30
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !Ref WebSigningKeyPutRoleArn

  DeleteWebSigningKey:
    Type: AWS::Lambda::Function
    Condition: SetupWebSigningKeyPair
    Properties:
      Handler: s3.deleteObject
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DeleteWebSigningKeyRole.Arn

  DeleteWebSigningKeyRole:
    Type: AWS::IAM::Role
    Condition: SetupWebSigningKeyPair
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeleteWebSigningKeyRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:DeleteObject
                Resource: !Sub arn:aws:s3:::${SecretsBucket}/auth0/*

  SetupWebSigningKeyPairExecutionRole:
    Type: AWS::IAM::Role
    Condition: SetupWebSigningKeyPair
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SetupWebSigningKeyPairExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt CreateAndExportWebSigningKeyPair.Arn
                  - !GetAtt DeleteWebSigningKey.Arn
                  - !GetAtt SendCloudFormationResponse.Arn

  SetupWebSigningKeyPairStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Condition: SetupWebSigningKeyPair
    Properties:
      RoleArn: !GetAtt SetupWebSigningKeyPairExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupWebSigningKeyPair",
          "States": {
            "SetupWebSigningKeyPair": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "ChooseEventType",
                "States": {
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "DeleteWebSigningKey"
                      }
                    ],
                    "Default": "CreateAndExportWebSigningKeyPair"
                  },
                  "CreateAndExportWebSigningKeyPair": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.Data",
                    "Resource": "${CreateAndExportWebSigningKeyPair.Arn}",
                    "Next": "Success"
                  },
                  "DeleteWebSigningKey": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": null,
                    "Resource": "${DeleteWebSigningKey.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  GenerateSignedCookies:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${BackendStack}-GenerateSignedCookies
      Handler: web.generateSignedCookies
      Timeout: 10
      Environment:
        Variables:
          WEB_DOMAIN: !Ref WebDomain
          WEB_DISTRIBUTION_ID: !Ref WebDistribution
          WEB_SIGNING_KEY_BUCKET: !Ref SecretsBucket
          WEB_SIGNING_KEY_PATH: !Sub web/signing.pem
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !Ref WebSigningKeyGetRoleArn

  GenerateSignedCookiesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GenerateSignedCookies
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/${ApiStage}/GET/weblogin

Outputs:
  WebSigningPubKey:
    Condition: SetupWebSigningKeyPair
    Value:
      !Sub https://console.aws.amazon.com/s3/object/${WebSigningKey.Bucket}/${WebSigningKey.Path}?region=${AWS::Region}
