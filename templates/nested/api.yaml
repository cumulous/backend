Parameters:
  BackendStack:
    Type: String
  ArtifactsBucket:
    Type: String
  LambdaPackage:
    Type: String
  TemplatePath:
    Type: String
  DomainZone:
    Type: String
  ApiDomain:
    Type: String
  ApiVersion:
    Type: String
  WebDomain:
    Type: String

Resources:
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      BodyS3Location:
        Bucket: !Ref ArtifactsBucket
        Key: !Ref TemplatePath

  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref ApiDomain

  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref ApiCertificate
      DomainName: !Ref ApiDomain

  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref ApiDomainName
      Type: A
      HostedZoneId: !Ref DomainZone
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.DistributionDomainName
        HostedZoneId: Z2FDTNDATAQYW2 # fixed value, per docs

  ApiDeployment:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupApiDeployment.Arn
      StateMachine: !Ref SetupApiDeploymentStateMachine
      ApiId: !Ref Api
      Version: !Ref ApiVersion

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref Api
      DeploymentId: !GetAtt ApiDeployment.Id
      StageName: current
      Variables:
        CorsOrigin: !Sub https://${WebDomain}

  ApiPathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref Api
      Stage: !Ref ApiStage

  DeployApi:
    Type: AWS::Lambda::Function
    Properties:
      Handler: apig.deploy
      Timeout: 30
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DeployApiRole.Arn

  DeployApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeployApiRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource:
                  - !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${Api}/deployments

  SetupApiDeployment:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.setupCustomResource
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetupApiDeploymentRole.Arn

  SetupApiDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SetupApiDeploymentRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref SetupApiDeploymentStateMachine

  SendCloudFormationResponse:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.sendCloudFormationResponse
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt LambdaBasicExecutionRole.Arn

  LambdaBasicExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SetupApiDeploymentExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SetupApiDeploymentExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt DeployApi.Arn
                  - !GetAtt SendCloudFormationResponse.Arn

  SetupApiDeploymentStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt SetupApiDeploymentExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupApiDeployment",
          "States": {
            "SetupApiDeployment": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "ChooseEventType",
                "States": {
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Delete",
                      "Next": "Success"
                    }],
                    "Default": "Deploy"
                  },
                  "Deploy": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.ApiId",
                    "ResultPath": "$.Data.Id",
                    "Resource": "${DeployApi.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  GetApi:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${BackendStack}-GetApi
      Handler: apig.getSpec
      Timeout: 10
      Environment:
        Variables:
          WEB_DOMAIN: !Ref WebDomain
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt LambdaBasicExecutionRole.Arn

  GetApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetApi
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/${ApiStage}/GET/

Outputs:
  ApiId:
    Value: !Ref Api
  ApiStage:
    Value: !Ref ApiStage
