Parameters:
  BackendStack:
    Type: String
  SetupCustomResourceArn:
    Type: String
  SendCloudFormationResponseArn:
    Type: String
  ArtifactsBucket:
    Type: String
  LambdaPackage:
    Type: String
  TemplatePath:
    Type: String
  DomainZone:
    Type: String
  ApiDomain:
    Type: String
  ApiVersion:
    Type: String

Resources:
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      BodyS3Location:
        Bucket: !Ref ArtifactsBucket
        Key: !Ref TemplatePath

  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref ApiDomain

  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref ApiCertificate
      DomainName: !Ref ApiDomain

  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref ApiDomainName
      Type: A
      HostedZoneId: !Ref DomainZone
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.DistributionDomainName
        HostedZoneId: Z2FDTNDATAQYW2 # fixed value, per docs

  # ApiDeployment:
  #   Type: AWS::CloudFormation::CustomResource
  #   Properties:
  #     ServiceToken: !Ref SetupCustomResourceArn
  #     StateMachine: !Ref SetupApiDeploymentStateMachine
  #     ApiId: !Ref Api
  #     IdPath: !Sub api/${BackendStack}/deployment-id
  #     Version: !Ref ApiVersion

  # ApiStage:
  #   Type: AWS::ApiGateway::Stage
  #   Properties:
  #     RestApiId: !Ref Api
  #     DeploymentId: !GetAtt ApiDeployment.Id
  #     StageName: latest

  # ApiPathMapping:
  #   Type: AWS::ApiGateway::BasePathMapping
  #   Properties:
  #     DomainName: !Ref ApiDomainName
  #     RestApiId: !Ref Api
  #     Stage: !Ref ApiStage

  CreateApiDeployment:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${BackendStack}-CreateApiDeployment
      Role: !GetAtt CreateApiDeploymentRole.Arn
      Handler: apig.createDeployment
      Runtime: nodejs6.10
      Timeout: 30
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage

  CreateApiDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateApiDeploymentRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource:
                  - !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${Api}/deployments
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/api/${BackendStack}/*

  DeleteApiDeployment:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${BackendStack}-DeleteApiDeployment
      Role: !GetAtt DeleteApiDeploymentRole.Arn
      Handler: apig.deleteDeployment
      Runtime: nodejs6.10
      Timeout: 30
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage

  DeleteApiDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeleteApiDeploymentRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:DELETE
                Resource:
                  - !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${Api}/deployments/*
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:DeleteParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/api/${BackendStack}/*

  SetupApiDeploymentExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StatesExecutionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt CreateApiDeployment.Arn
                  - !GetAtt DeleteApiDeployment.Arn
                  - !Ref SendCloudFormationResponseArn

  SetupApiDeploymentStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt SetupApiDeploymentExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupApiDeployment",
          "States": {
            "SetupApiDeployment": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "ChooseEventType",
                "States": {
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Create",
                      "Next": "CreateApiDeployment"
                    }, {
                      "Variable": "$.RequestType",
                      "StringEquals": "Update",
                      "Next": "PassReplacedProperties"
                    }, {
                      "Variable": "$.RequestType",
                      "StringEquals": "Delete",
                      "Next": "PassDeletedProperties"
                    }]
                  },
                  "CreateApiDeployment": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.Data.Id",
                    "Resource": "${CreateApiDeployment.Arn}",
                    "Next": "Success"
                  },
                  "PassReplacedProperties": {
                    "Type": "Pass",
                    "InputPath": "$.OldResourceProperties",
                    "ResultPath": "$.DeletedProperties",
                    "Next": "DeleteApiDeployment"
                  },
                  "PassDeletedProperties": {
                    "Type": "Pass",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.DeletedProperties",
                    "Next": "DeleteApiDeployment"
                  },
                  "DeleteApiDeployment": {
                    "Type": "Task",
                    "InputPath": "$.DeletedProperties",
                    "ResultPath": null,
                    "Resource": "${DeleteApiDeployment.Arn}",
                    "Next": "CheckCreateAfterDelete"
                  },
                  "CheckCreateAfterDelete": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Update",
                      "Next": "CreateApiDeployment"
                    }],
                    "Default": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponseArn}",
              "End": true
            }
          }
        }

  # LambdaBasicExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # ApiGetSpec:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-ApiGetSpec
  #     Role: !GetAtt LambdaBasicExecutionRole.Arn
  #     Handler: apig.getSpec
  #     Runtime: nodejs6.10
  #     Timeout: 10
  #     Environment:
  #       Variables:
  #         WEB_DOMAIN: !Ref WebDomain
  #     Code:
  #       S3Bucket: !Ref ArtifactsBucket
  #       S3Key: !Ref LambdaPackage

  # ApiGetSpecPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt ApiGetSpec.Arn
  #     Action: lambda:InvokeFunction
  #     Principal: apigateway.amazonaws.com
  #     SourceArn:
  #       !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/Latest/GET/
