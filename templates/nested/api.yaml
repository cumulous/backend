Parameters:
  BackendStack:
    Type: String
  SetupCustomResourceArn:
    Type: String
  SendCloudFormationResponseArn:
    Type: String
  ArtifactsBucket:
    Type: String
  LambdaPackage:
    Type: String
  # DomainZone:
  #   Type: String
  # ApiDomain:
  #   Type: String

Resources:
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      BodyS3Location:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub templates/${BackendStack}/swagger.yaml

  # ApiCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Ref ApiDomain

  # ApiDomainName:
  #   Type: AWS::ApiGateway::DomainName
  #   Properties:
  #     CertificateArn: !Ref ApiCertificate
  #     DomainName: !Ref ApiDomain

  # ApiDomainName:
  #   Type: AWS::CloudFormation::CustomResource
  #   Properties:
  #     ServiceToken: !Ref SetupCustomResourceArn
  #     StateMachine: !Ref SetupApiDomainNameStateMachine
  #     Domain:
  #       Name: !Ref ApiDomain
  #       Certificate: !Ref ApiCertificate

  # ApiDnsRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     Name: !Ref ApiDomain
  #     Type: A
  #     HostedZoneId: !Ref DomainZone
  #     AliasTarget:
  #       DNSName: !GetAtt ApiDomainName.DistributionDomainName
  #       HostedZoneId: Z2FDTNDATAQYW2 # fixed value, per docs

  # CreateApiDomainName:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub ${BackendStack}-CreateApiDomainName
  #     Role: !GetAtt CreateApiDomainNameRole.Arn
  #     Handler: apig.createDomainName
  #     Runtime: nodejs6.10
  #     Timeout: 10
  #     Code:
  #       S3Bucket: !Ref ArtifactsBucket
  #       S3Key: !Ref LambdaPackage

  # CreateApiDomainNameRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #     Policies:
  #       - PolicyName: CreateApiDomainNameRolePolicy
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action: apigateway:POST
  #               Resource:
  #                 - !Sub arn:aws:apigateway:${AWS::Region}::/domainnames
  #             - Effect: Allow
  #               Action: cloudfront:UpdateDistribution
  #               Resource: '*'

  # UpdateApiDomainName:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub ${BackendStack}-UpdateApiDomainName
  #     Role: !GetAtt UpdateApiDomainNameRole.Arn
  #     Handler: apig.updateDomainName
  #     Runtime: nodejs6.10
  #     Timeout: 10
  #     Code:
  #       S3Bucket: !Ref ArtifactsBucket
  #       S3Key: !Ref LambdaPackage

  # UpdateApiDomainNameRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #     Policies:
  #       - PolicyName: UpdateApiDomainNameRolePolicy
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action: apigateway:PATCH
  #               Resource:
  #                 - !Sub arn:aws:apigateway:${AWS::Region}::/domainnames/${ApiDomain}
  #             - Effect: Allow
  #               Action: cloudfront:UpdateDistribution
  #               Resource: '*'

  # DeleteApiDomainName:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub ${BackendStack}-DeleteApiDomainName
  #     Role: !GetAtt DeleteApiDomainNameRole.Arn
  #     Handler: apig.deleteDomainName
  #     Runtime: nodejs6.10
  #     Timeout: 10
  #     Code:
  #       S3Bucket: !Ref ArtifactsBucket
  #       S3Key: !Ref LambdaPackage

  # DeleteApiDomainNameRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #     Policies:
  #       - PolicyName: DeleteApiDomainNameRolePolicy
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action: apigateway:DELETE
  #               Resource:
  #                 - !Sub arn:aws:apigateway:${AWS::Region}::/domainnames/${ApiDomain}
  #             - Effect: Allow
  #               Action: cloudfront:DeleteDistribution
  #               Resource: '*'

  # SetupApiDomainNameStateMachine:
  #   Type: AWS::StepFunctions::StateMachine
  #   Properties:
  #     RoleArn: !GetAtt StatesExecutionRole.Arn
  #     DefinitionString: !Sub |-
  #       {
  #         "StartAt": "SetupApiCertificate",
  #         "States": {
  #           "SetupApiCertificate": {
  #             "Type": "Parallel",
  #             "Next": "Succeed",
  #             "Branches": [{
  #               "StartAt": "ChooseEventType",
  #               "States": {
  #                 "ChooseEventType": {
  #                   "Type": "Choice",
  #                   "Choices": [
  #                     {
  #                       "Variable": "$.RequestType",
  #                       "StringEquals": "Create",
  #                       "Next": "CreateApiDomainName"
  #                     },
  #                     {
  #                       "Variable": "$.RequestType",
  #                       "StringEquals": "Update",
  #                       "Next": "CheckReplaceDomainName"
  #                     },
  #                     {
  #                       "Variable": "$.RequestType",
  #                       "StringEquals": "Delete",
  #                       "Next": "DeleteApiDomainName"
  #                     }
  #                   ]
  #                 },
  #                 "CreateApiDomainName": {
  #                   "Type": "Task",
  #                   "InputPath": "$.ResourceProperties.Domain",
  #                   "ResultPath": "$.Data.DistributionDomainName",
  #                   "Resource": "${CreateApiDomainName.Arn}",
  #                   "Next": "Success"
  #                 },
  #                 "CheckReplaceDomainName": {
  #                   "Type": "Choice",
  #                   "Choices": [
  #                     {
  #                       "Variable": "$.OldResourceProperties.Domain.Name",
  #                       "StringEquals": "${ApiDomain}",
  #                       "Next": "DeleteOldApiDomainName"
  #                     }
  #                   ],
  #                   "Default": "UpdateApiDomainName"
  #                 },
  #                 "DeleteOldApiDomainName": {
  #                   "Type": "Task",
  #                   "InputPath": "$.OldResourceProperties.Domain.Name",
  #                   "ResultPath": null,
  #                   "Resource": "${DeleteApiDomainName.Arn}",
  #                   "Next": "CreateApiDomainName"
  #                 },
  #                 "UpdateApiDomainName": {
  #                   "Type": "Task",
  #                   "InputPath": "$.ResourceProperties.Domain",
  #                   "ResultPath": "$.Data.DistributionDomainName",
  #                   "Resource": "${UpdateApiDomainName.Arn}",
  #                   "Next": "Success"
  #                 },
  #                 "DeleteApiDomainName": {
  #                   "Type": "Task",
  #                   "InputPath": "$.ResourceProperties.Domain.Name",
  #                   "ResultPath": null,
  #                   "Resource": "${DeleteApiDomainName.Arn}",
  #                   "Next": "Success"
  #                 },
  #                 "Success": {
  #                   "Type": "Pass",
  #                   "ResultPath": "$.Status",
  #                   "Result": "SUCCESS",
  #                   "End": true
  #                 }
  #               }
  #             }],
  #             "Catch": [{
  #               "ErrorEquals": [ "States.ALL" ],
  #               "ResultPath": "$.Error",
  #               "Next": "PassReason"
  #             }]
  #           },
  #           "Succeed": {
  #             "InputPath": "$.[0]",
  #             "Type": "Pass",
  #             "Next": "End"
  #           },
  #           "PassReason": {
  #             "Type": "Pass",
  #             "InputPath": "$.Error.Cause",
  #             "ResultPath": "$.Reason",
  #             "Next": "Fail"
  #           },
  #           "Fail": {
  #             "Type": "Pass",
  #             "ResultPath": "$.Status",
  #             "Result": "FAILED",
  #             "Next": "End"
  #           },
  #           "End": {
  #             "Type": "Task",
  #             "ResultPath": null,
  #             "Resource": "${SendCloudFormationResponse.Arn}",
  #             "End": true
  #           }
  #         }
  #       }

  # ApiGetSpec:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-ApiGetSpec
  #     Role: !GetAtt LambdaBasicExecutionRole.Arn
  #     Handler: apig.getSpec
  #     Runtime: nodejs6.10
  #     Timeout: 10
  #     Environment:
  #       Variables:
  #         WEB_DOMAIN: !Ref WebDomain
  #     Code:
  #       S3Bucket: !Ref ArtifactsBucket
  #       S3Key: !Ref LambdaPackage

  # ApiGetSpecPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt ApiGetSpec.Arn
  #     Action: lambda:InvokeFunction
  #     Principal: apigateway.amazonaws.com
  #     SourceArn:
  #       !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/Latest/GET/
