Parameters:
  BackendStack:
    Type: String
  ArtifactsBucket:
    Type: String
  SecretsBucket:
    Type: String
  LambdaPackage:
    Type: String
  EncryptionKeyId:
    Type: String
  Auth0Domain:
    Type: String
  Auth0ManagementClientID:
    Type: String
  Auth0ManagementClientSecret:
    Type: String
  Auth0GetManagementSecretRoleArn:
    Type: String
  Auth0PutSecretRoleArn:
    Type: String
  Auth0CreateClientRoleArn:
    Type: String
  Auth0UserTokenLifetime:
    Type: String
  WebDomain:
    Type: String
  ApiDomain:
    Type: String

Resources:
  Auth0ManagementClient:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupAuth0ManagementClient.Arn
      StateMachine: !Ref SetupAuth0ManagementClientStateMachine
      Secret: !Ref Auth0ManagementClientSecret
      Bucket: !Ref SecretsBucket
      Path: !Sub auth0/manage.key

  SetupAuth0ManagementClient:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.setupCustomResource
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetupAuth0ManagementClientRole.Arn

  SetupAuth0ManagementClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SetupAuth0ManagementClientRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref SetupAuth0ManagementClientStateMachine

  RotateAndStoreAuth0ManagementSecret:
    Type: AWS::Lambda::Function
    Properties:
      Handler: auth0.rotateAndStoreClientSecret
      Environment:
        Variables:
          ENCRYPTION_KEY_ID: !Ref EncryptionKeyId
          AUTH0_DOMAIN: !Ref Auth0Domain
          AUTH0_CLIENT_ID: !Ref Auth0ManagementClientID
          AUTH0_SECRET_BUCKET: !Ref SecretsBucket
          AUTH0_SECRET_PATH: !Sub auth0/manage.key
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !Ref Auth0PutSecretRoleArn

  DeleteAuth0ManagementSecret:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.deleteS3Object
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DeleteAuth0ManagementSecretRole.Arn

  DeleteAuth0ManagementSecretRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeleteAuth0ManagementSecretRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:DeleteObject
                Resource: !Sub arn:aws:s3:::${SecretsBucket}/auth0/*

  SendCloudFormationResponse:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.sendCloudFormationResponse
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt LambdaBasicExecutionRole.Arn

  LambdaBasicExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SetupAuth0ManagementClientExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StatesExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt RotateAndStoreAuth0ManagementSecret.Arn
                  - !GetAtt DeleteAuth0ManagementSecret.Arn
                  - !GetAtt SendCloudFormationResponse.Arn

  SetupAuth0ManagementClientStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt SetupAuth0ManagementClientExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupAuth0",
          "States": {
            "SetupAuth0": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckToSkipSetup",
                "States": {
                  "CheckToSkipSetup": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.ResourceProperties.Secret",
                        "StringEquals": "",
                        "Next": "Success"
                      }
                    ],
                    "Default": "ChooseEventType"
                  },
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "RotateAndStoreSecret"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "CheckIfSecretUpdated"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "DeleteSecret"
                      }
                    ]
                  },
                  "CheckIfSecretUpdated": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.OldResourceProperties.Secret",
                        "StringEquals": "${Auth0ManagementClientSecret}",
                        "Next": "Success"
                      }
                    ],
                    "Default": "RotateAndStoreSecret"
                  },
                  "RotateAndStoreSecret": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Secret",
                    "ResultPath": null,
                    "Resource": "${RotateAndStoreAuth0ManagementSecret.Arn}",
                    "Next": "Success"
                  },
                  "DeleteSecret": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": null,
                    "Resource": "${DeleteAuth0ManagementSecret.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  Auth0Api:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: Auth0ManagementClient
    Properties:
      ServiceToken: !GetAtt SetupAuth0ApiClient.Arn
      StateMachine: !Ref SetupAuth0ApiStateMachine
      Audience: !Sub https://${ApiDomain}

  SetupAuth0ApiClient:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.setupCustomResource
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetupAuth0ApiClientRole.Arn

  SetupAuth0ApiClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SetupAuth0ApiClientRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref SetupAuth0ApiStateMachine

  ManageAuth0Resource:
    Type: AWS::Lambda::Function
    Properties:
      Handler: auth0.manage
      Environment:
        Variables:
          AUTH0_DOMAIN: !Ref Auth0Domain
          AUTH0_CLIENT_ID: !Ref Auth0ManagementClientID
          AUTH0_SECRET_BUCKET: !Ref SecretsBucket
          AUTH0_SECRET_PATH: !Sub auth0/manage.key
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !Ref Auth0GetManagementSecretRoleArn

  StoreAuth0Config:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.putS3Object
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt StoreAuth0ConfigRole.Arn

  StoreAuth0ConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StoreAuth0ConfigRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/auth0/${BackendStack}-*

  RetrieveAuth0Config:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.getS3Object
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt RetrieveAuth0ConfigRole.Arn

  RetrieveAuth0ConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RetrieveAuth0ConfigRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/auth0/${BackendStack}-*

  SetupAuth0ApiExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StatesExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt ManageAuth0Resource.Arn
                  - !GetAtt StoreAuth0Config.Arn
                  - !GetAtt RetrieveAuth0Config.Arn
                  - !GetAtt SendCloudFormationResponse.Arn

  SetupAuth0ApiStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt SetupAuth0ApiExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupAuth0Api",
          "States": {
            "SetupAuth0Api": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckCreate",
                "States": {
                  "CheckCreate": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "PassCreateApi"
                      }
                    ],
                    "Default": "PassRetrieveApiId"
                  },
                  "PassCreateApi": {
                    "Type": "Pass",
                    "Result": {
                      "method": "POST",
                      "endpoint": ["/resource-servers"],
                      "payload": {
                        "name": "${ApiDomain}",
                        "token_lifetime_for_web": ${Auth0UserTokenLifetime}
                      },
                      "datapath": "id"
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassAudienceCreateApi"
                  },
                  "PassAudienceCreateApi": {
                    "Type": "Pass",
                    "InputPath": "$.ResourceProperties.Audience",
                    "ResultPath": "$.ResourceProperties.Request.payload.identifier",
                    "Next": "CreateApi"
                  },
                  "CreateApi": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Request",
                    "ResultPath": "$.Data.Id",
                    "Resource": "${ManageAuth0Resource.Arn}",
                    "Next": "PassStoreApiId"
                  },
                  "PassStoreApiId": {
                    "Type": "Pass",
                    "Result": {
                      "Bucket": "${ArtifactsBucket}",
                      "Path": "auth0/${BackendStack}-api.id"
                    },
                    "ResultPath": "$.ResourceProperties.Store",
                    "Next": "PassBodyStoreApiId"
                  },
                  "PassBodyStoreApiId": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Store.Body",
                    "Next": "StoreApiId"
                  },
                  "StoreApiId": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Store",
                    "ResultPath": null,
                    "Resource": "${StoreAuth0Config.Arn}",
                    "Next": "Success"
                  },
                  "PassRetrieveApiId": {
                    "Type": "Pass",
                    "Result": {
                      "Bucket": "${ArtifactsBucket}",
                      "Path": "auth0/${BackendStack}-api.id"
                    },
                    "ResultPath": "$.ResourceProperties.Retrieve",
                    "Next": "RetrieveApiId"
                  },
                  "RetrieveApiId": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Retrieve",
                    "ResultPath": "$.Data.Id",
                    "Resource": "${RetrieveAuth0Config.Arn}",
                    "Next": "ChooseUpdateOrDelete"
                  },
                  "ChooseUpdateOrDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "And": [
                          {
                            "Variable": "$.RequestType",
                            "StringEquals": "Update"
                          },
                          {
                            "Variable": "$.OldResourceProperties.Audience",
                            "StringEquals": "https://${ApiDomain}"
                          }
                        ],
                        "Next": "PassUpdateApi"
                      }
                    ],
                    "Default": "PassDeleteApi"
                  },
                  "PassUpdateApi": {
                    "Type": "Pass",
                    "Result": {
                      "method": "PATCH",
                      "endpoint": ["/resource-servers", "/{id}"],
                      "payload": {
                        "name": "${ApiDomain}",
                        "token_lifetime_for_web": ${Auth0UserTokenLifetime}
                      },
                      "datapath": "null"
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassEndpointUpdateApi"
                  },
                  "PassEndpointUpdateApi": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Request.endpoint[1]",
                    "Next": "UpdateApi"
                  },
                  "UpdateApi": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Request",
                    "ResultPath": null,
                    "Resource": "${ManageAuth0Resource.Arn}",
                    "Next": "Success"
                  },
                  "PassDeleteApi": {
                    "Type": "Pass",
                    "Result": {
                      "method": "DELETE",
                      "endpoint": ["/resource-servers", "/{id}"]
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassEndpointDeleteApi"
                  },
                  "PassEndpointDeleteApi": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Request.endpoint[1]",
                    "Next": "DeleteApi"
                  },
                  "DeleteApi": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Request",
                    "ResultPath": null,
                    "Resource": "${ManageAuth0Resource.Arn}",
                    "Next": "CheckCreateAfterDelete"
                  },
                  "CheckCreateAfterDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "PassCreateApi"
                      }
                    ],
                    "Default": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  Auth0SPA:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: Auth0ManagementClient
    Properties:
      ServiceToken: !GetAtt SetupAuth0Client.Arn
      StateMachine: !Ref SetupAuth0ClientStateMachine
      Payload: !Sub |-
        {
          "name": "${WebDomain}",
          "app_type": "spa",
          "callbacks": [
            "https://${WebDomain}/login.html"
          ],
          "resource_servers": [{
            "identifier": "https://${ApiDomain}"
          }]
        }
      Id:
        Bucket: !Ref ArtifactsBucket
        Path: !Sub auth0/${BackendStack}-spa.id

  Auth0ApiTestClient:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: Auth0ManagementClient
    Properties:
      ServiceToken: !GetAtt SetupAuth0Client.Arn
      StateMachine: !Ref SetupAuth0ClientStateMachine
      Payload: !Sub |-
        {
          "name": "${ApiDomain} - Test",
          "app_type": "non_interactive",
          "resource_servers": [{
            "identifier": "https://${ApiDomain}"
          }]
        }
      Id:
        Bucket: !Ref ArtifactsBucket
        Path: !Sub auth0/${BackendStack}-api-test-client.id
      Secret:
        Bucket: !Ref SecretsBucket
        Path: !Sub auth0/${BackendStack}-api-test-client.key
        EncryptionKeyId: !Ref EncryptionKeyId

  SetupAuth0Client:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.setupCustomResource
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetupAuth0ClientRole.Arn

  SetupAuth0ClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SetupAuth0ClientRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref SetupAuth0ClientStateMachine

  CreateAuth0Client:
    Type: AWS::Lambda::Function
    Properties:
      Handler: auth0.createClient
      Environment:
        Variables:
          AUTH0_DOMAIN: !Ref Auth0Domain
          AUTH0_CLIENT_ID: !Ref Auth0ManagementClientID
          AUTH0_SECRET_BUCKET: !Ref SecretsBucket
          AUTH0_SECRET_PATH: !Sub auth0/manage.key
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !Ref Auth0CreateClientRoleArn

  SetupAuth0ClientExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StatesExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt CreateAuth0Client.Arn
                  - !GetAtt StoreAuth0Config.Arn
                  - !GetAtt RetrieveAuth0Config.Arn
                  - !GetAtt ManageAuth0Resource.Arn
                  - !GetAtt SendCloudFormationResponse.Arn

  SetupAuth0ClientStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt SetupAuth0ClientExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupAuth0ClientWithSecret",
          "States": {
            "SetupAuth0ClientWithSecret": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckCreate",
                "States": {
                  "CheckCreate": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "CreateClient"
                      }
                    ],
                    "Default": "RetrieveClientId"
                  },
                  "CreateClient": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "Resource": "${CreateAuth0Client.Arn}",
                    "ResultPath": "$.Data.Id",
                    "Next": "PassBodyStoreId"
                  },
                  "PassBodyStoreId": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Id.Body",
                    "Next": "StoreId"
                  },
                  "StoreId": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Id",
                    "ResultPath": null,
                    "Resource": "${StoreAuth0Config.Arn}",
                    "Next": "Success"
                  },
                  "RetrieveClientId": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Id",
                    "ResultPath": "$.Data.Id",
                    "Resource": "${RetrieveAuth0Config.Arn}",
                    "Next": "CheckUpdateOrDelete"
                  },
                  "CheckUpdateOrDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "PassUpdateClient"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "PassDeleteClient"
                      }
                    ]
                  },
                  "PassUpdateClient": {
                    "Type": "Pass",
                    "Result": {
                      "method": "PATCH",
                      "endpoint": ["/clients", "{id}"],
                      "datapath": "client_id"
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassUpdatePayload"
                  },
                  "PassUpdatePayload": {
                    "Type": "Pass",
                    "InputPath": "$.ResourceProperties.Payload",
                    "ResultPath": "$.ResourceProperties.Request.payload",
                    "Next": "PassEndpointUpdateOrDeleteClient"
                  },
                  "PassDeleteClient": {
                    "Type": "Pass",
                    "Result": {
                      "method": "DELETE",
                      "endpoint": ["/clients", "{id}"]
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassEndpointUpdateOrDeleteClient"
                  },
                  "PassEndpointUpdateOrDeleteClient": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Request.endpoint[1]",
                    "Next": "UpdateOrDeleteClient"
                  },
                  "UpdateOrDeleteClient": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Request",
                    "Resource": "${ManageAuth0Resource.Arn}",
                    "ResultPath": null,
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }
