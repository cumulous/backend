Parameters:
  BackendStack:
    Type: String
  ArtifactsBucket:
    Type: String
  LambdaPackage:
    Type: String
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  ClusterCores:
    Type: Number
  SpotBidPercent:
    Type: Number
  SSHKeyName:
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  SpotComputeEnvironment:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupComputeEnvironment.Arn
      StateMachine: !Ref SetupComputeEnvironmentStateMachine
      type: MANAGED
      state: ENABLED
      serviceRole: !GetAtt BatchServiceRole.Arn
      computeEnvironmentName: !Sub ${BackendStack}-spot-environment
      computeResources:
        type: SPOT
        bidPercentage: !Ref SpotBidPercent
        minvCpus: 0
        maxvCpus: !Ref ClusterCores
        instanceTypes: [ optimal ]
        instanceRole: !GetAtt InstanceProfile.Arn
        spotIamFleetRole: !GetAtt SpotFleetRole.Arn
        subnets: !Ref SubnetIds
        securityGroupIds:
          - !Ref SecurityGroup
        ec2KeyPair: !Ref SSHKeyName

  OnDemandComputeEnvironment:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: SpotComputeEnvironment
    Properties:
      ServiceToken: !GetAtt SetupComputeEnvironment.Arn
      StateMachine: !Ref SetupComputeEnvironmentStateMachine
      type: MANAGED
      state: ENABLED
      serviceRole: !GetAtt BatchServiceRole.Arn
      computeEnvironmentName: !Sub ${BackendStack}-ondemand-environment
      computeResources:
        type: EC2
        minvCpus: 0
        maxvCpus: !Ref ClusterCores
        instanceTypes: [ optimal ]
        instanceRole: !GetAtt InstanceProfile.Arn
        subnets: !Ref SubnetIds
        securityGroupIds:
          - !Ref SecurityGroup
        ec2KeyPair: !Ref SSHKeyName

  SetupComputeEnvironment:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.setupCustomResource
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetupComputeEnvironmentRole.Arn

  SetupComputeEnvironmentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SetupComputeEnvironmentRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref SetupComputeEnvironmentStateMachine

  CreateComputeEnvironment:
    Type: AWS::Lambda::Function
    Properties:
      Handler: batch.createComputeEnvironment
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt CreateComputeEnvironmentRole.Arn

  CreateComputeEnvironmentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateComputeEnvironmentRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: batch:CreateComputeEnvironment
                Resource:
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:/createcomputeenvironment
              - Effect: Allow
                Action: iam:PassRole
                Resource:
                  - !GetAtt BatchServiceRole.Arn
                  - !GetAtt SpotFleetRole.Arn
                  - !GetAtt InstanceProfile.Arn

  UpdateComputeEnvironment:
    Type: AWS::Lambda::Function
    Properties:
      Handler: batch.updateComputeEnvironment
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt UpdateComputeEnvironmentRole.Arn

  UpdateComputeEnvironmentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UpdateComputeEnvironmentRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: batch:UpdateComputeEnvironment
                Resource:
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:/updatecomputeenvironment
              - Effect: Allow
                Action: iam:PassRole
                Resource:
                  - !GetAtt BatchServiceRole.Arn

  CheckUpdateComputeEnvironment:
    Type: AWS::Lambda::Function
    Properties:
      Handler: batch.checkUpdateEnvironment
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt LambdaBasicExecutionRole.Arn

  LambdaBasicExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DeleteComputeEnvironment:
    Type: AWS::Lambda::Function
    Properties:
      Handler: batch.deleteComputeEnvironment
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DeleteComputeEnvironmentRole.Arn

  DeleteComputeEnvironmentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeleteComputeEnvironmentRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: batch:DeleteComputeEnvironment
                Resource:
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:/v1/deletecomputeenvironment

  DescribeComputeEnvironment:
    Type: AWS::Lambda::Function
    Properties:
      Handler: batch.describeComputeEnvironment
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DescribeComputeEnvironmentRole.Arn

  DescribeComputeEnvironmentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeComputeEnvironmentRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: batch:DescribeComputeEnvironments
                Resource:
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:/v1/describecomputeenvironments

  SendCloudFormationResponse:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.sendCloudFormationResponse
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt LambdaBasicExecutionRole.Arn

  SetupComputeEnvironmentExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SetupComputeEnvironmentExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt CreateComputeEnvironment.Arn
                  - !GetAtt DescribeComputeEnvironment.Arn
                  - !GetAtt CheckUpdateComputeEnvironment.Arn
                  - !GetAtt UpdateComputeEnvironment.Arn
                  - !GetAtt DescribeJobQueueMinusEnvironment.Arn
                  - !GetAtt UpdateJobQueue.Arn
                  - !GetAtt DescribeJobQueue.Arn
                  - !GetAtt DeleteComputeEnvironment.Arn
                  - !GetAtt SendCloudFormationResponse.Arn

  SetupComputeEnvironmentStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt SetupComputeEnvironmentExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupComputeEnvironment",
          "States": {
            "SetupComputeEnvironment": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckEventType",
                "States": {
                  "CheckEventType": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Create",
                      "Next": "CreateComputeEnvironment"
                    }, {
                      "Variable": "$.RequestType",
                      "StringEquals": "Update",
                      "Next": "CheckReplace"
                    }, {
                      "Variable": "$.RequestType",
                      "StringEquals": "Delete",
                      "Next": "PassDeletedResourceProperties"
                    }]
                  },
                  "CreateComputeEnvironment": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.Data.Arn",
                    "Resource": "${CreateComputeEnvironment.Arn}",
                    "Next": "GetStatusWhenCreating"
                  },
                  "GetStatusWhenCreating": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.computeEnvironmentName",
                    "ResultPath": "$.ResourceProperties",
                    "Resource": "${DescribeComputeEnvironment.Arn}",
                    "Next": "CheckIfCreated"
                  },
                  "CheckIfCreated": {
                    "Type": "Choice",
                    "Choices": [{
                      "And": [{
                        "Variable": "$.ResourceProperties.state",
                        "StringEquals": "ENABLED"
                      }, {
                        "Variable": "$.ResourceProperties.status",
                        "StringEquals": "VALID"
                      }],
                      "Next": "PassVersion"
                    }],
                    "Default": "WaitWhileCreating"
                  },
                  "WaitWhileCreating" : {
                    "Type": "Wait",
                    "Seconds": 15,
                    "Next": "GetStatusWhenCreating"
                  },
                  "CheckReplace": {
                    "Type": "Task",
                    "ResultPath": null,
                    "Resource": "${CheckUpdateComputeEnvironment.Arn}",
                    "Catch": [{
                      "ErrorEquals": [ "RequiresReplacement" ],
                      "ResultPath": null,
                      "Next": "PassReplacedResourceProperties"
                    }],
                    "Next": "UpdateComputeEnvironment"
                  },
                  "UpdateComputeEnvironment": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.Data.Arn",
                    "Resource": "${UpdateComputeEnvironment.Arn}",
                    "Next": "GetStatusWhenUpdating"
                  },
                  "GetStatusWhenUpdating": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.computeEnvironmentName",
                    "ResultPath": "$.ResourceProperties",
                    "Resource": "${DescribeComputeEnvironment.Arn}",
                    "Next": "CheckIfUpdated"
                  },
                  "CheckIfUpdated": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.ResourceProperties.status",
                      "StringEquals": "VALID",
                      "Next": "PassVersion"
                    }],
                    "Default": "WaitWhileUpdating"
                  },
                  "WaitWhileUpdating" : {
                    "Type": "Wait",
                    "Seconds": 15,
                    "Next": "GetStatusWhenUpdating"
                  },
                  "PassReplacedResourceProperties": {
                    "Type": "Pass",
                    "InputPath": "$.OldResourceProperties",
                    "ResultPath": "$.DeletedResourceProperties",
                    "Next": "PassDisableBeforeDelete"
                  },
                  "PassDeletedResourceProperties": {
                    "Type": "Pass",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.DeletedResourceProperties",
                    "Next": "PassDisableBeforeDelete"
                  },
                  "PassDisableBeforeDelete": {
                    "Type": "Pass",
                    "ResultPath": "$.DeletedResourceProperties.state",
                    "Result": "DISABLED",
                    "Next": "DisableBeforeDelete"
                  },
                  "DisableBeforeDelete": {
                    "Type": "Task",
                    "InputPath": "$.DeletedResourceProperties",
                    "ResultPath": null,
                    "Resource": "${UpdateComputeEnvironment.Arn}",
                    "Next": "GetStatusWhenDisabling"
                  },
                  "GetStatusWhenDisabling": {
                    "Type": "Task",
                    "InputPath": "$.DeletedResourceProperties.computeEnvironmentName",
                    "ResultPath": "$.DeletedResourceProperties",
                    "Resource": "${DescribeComputeEnvironment.Arn}",
                    "Next": "CheckIfDisabled"
                  },
                  "CheckIfDisabled": {
                    "Type": "Choice",
                    "Choices": [{
                      "And": [{
                        "Variable": "$.DeletedResourceProperties.state",
                        "StringEquals": "DISABLED"
                      }, {
                        "Variable": "$.DeletedResourceProperties.status",
                        "StringEquals": "VALID"
                      }],
                      "Next": "DescribeJobQueueMinusEnvironment"
                    }],
                    "Default": "WaitWhileDisabling"
                  },
                  "WaitWhileDisabling" : {
                    "Type": "Wait",
                    "Seconds": 15,
                    "Next": "GetStatusWhenDisabling"
                  },
                  "DescribeJobQueueMinusEnvironment": {
                    "Type": "Task",
                    "InputPath": "$.DeletedResourceProperties.computeEnvironmentName",
                    "ResultPath": "$.JobQueueProperties",
                    "Resource": "${DescribeJobQueueMinusEnvironment.Arn}",
                    "Next": "CheckJobQueueIsDeleted"
                  },
                  "CheckJobQueueIsDeleted": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.JobQueueProperties.status",
                      "StringEquals": "DELETED",
                      "Next": "DeleteComputeEnvironment"
                    }],
                    "Default": "DeleteEnvironmentFromJobQueue"
                  },
                  "DeleteEnvironmentFromJobQueue": {
                    "Type": "Task",
                    "InputPath": "$.JobQueueProperties",
                    "ResultPath": null,
                    "Resource": "${UpdateJobQueue.Arn}",
                    "Next": "GetJobQueueStatusWhenDeleting"
                  },
                  "GetJobQueueStatusWhenDeleting": {
                    "Type": "Task",
                    "InputPath": "$.JobQueueProperties.jobQueueName",
                    "ResultPath": "$.JobQueueProperties",
                    "Resource": "${DescribeJobQueue.Arn}",
                    "Next": "CheckIfJobQueueUpdated"
                  },
                  "CheckIfJobQueueUpdated": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.JobQueueProperties.status",
                      "StringEquals": "VALID",
                      "Next": "DeleteComputeEnvironment"
                    }],
                    "Default": "WaitWhileUpdatingJobQueue"
                  },
                  "WaitWhileUpdatingJobQueue" : {
                    "Type": "Wait",
                    "Seconds": 15,
                    "Next": "GetJobQueueStatusWhenDeleting"
                  },
                  "DeleteComputeEnvironment": {
                    "Type": "Task",
                    "InputPath": "$.DeletedResourceProperties.computeEnvironmentName",
                    "ResultPath": null,
                    "Resource": "${DeleteComputeEnvironment.Arn}",
                    "Next": "GetStatusWhenDeleting"
                  },
                  "GetStatusWhenDeleting": {
                    "Type": "Task",
                    "InputPath": "$.DeletedResourceProperties.computeEnvironmentName",
                    "ResultPath": "$.DeletedResourceProperties",
                    "Resource": "${DescribeComputeEnvironment.Arn}",
                    "Next": "CheckIfDeleted"
                  },
                  "CheckIfDeleted": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.DeletedResourceProperties.status",
                      "StringEquals": "DELETED",
                      "Next": "CheckCreateAfterDelete"
                    }],
                    "Default": "WaitWhileDeleting"
                  },
                  "WaitWhileDeleting" : {
                    "Type": "Wait",
                    "Seconds": 15,
                    "Next": "GetStatusWhenDeleting"
                  },
                  "CheckCreateAfterDelete": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Update",
                      "Next": "CreateComputeEnvironment"
                    }],
                    "Default": "Success"
                  },
                  "PassVersion": {
                    "Type": "Pass",
                    "InputPath": "$.RequestId",
                    "ResultPath": "$.Data.Version",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  JobQueue:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupJobQueue.Arn
      StateMachine: !Ref SetupJobQueueStateMachine
      jobQueueName: !Sub ${BackendStack}-job-queue
      priority: 1
      computeEnvironmentOrder:
        - order: 1
          computeEnvironment: !GetAtt SpotComputeEnvironment.Arn
          version: !GetAtt SpotComputeEnvironment.Version
        - order: 2
          computeEnvironment: !GetAtt OnDemandComputeEnvironment.Arn
          version: !GetAtt OnDemandComputeEnvironment.Version

  SetupJobQueue:
    Type: AWS::Lambda::Function
    Properties:
      Handler: aws.setupCustomResource
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetupJobQueueRole.Arn

  SetupJobQueueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SetupJobQueueRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref SetupJobQueueStateMachine

  CreateJobQueue:
    Type: AWS::Lambda::Function
    Properties:
      Handler: batch.createJobQueue
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt CreateJobQueueRole.Arn

  CreateJobQueueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateJobQueueRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: batch:CreateJobQueue
                Resource:
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:/v1/createjobqueue

  DescribeJobQueue:
    Type: AWS::Lambda::Function
    Properties:
      Handler: batch.describeJobQueue
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DescribeJobQueueRole.Arn

  DescribeJobQueueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeJobQueueRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: batch:DescribeJobQueues
                Resource:
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:/v1/describejobqueues

  DescribeJobQueueMinusEnvironment:
    Type: AWS::Lambda::Function
    Properties:
      Handler: batch.describeJobQueueMinusEnvironment
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DescribeJobQueueMinusEnvironmentRole.Arn

  DescribeJobQueueMinusEnvironmentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeJobQueueMinusEnvironmentRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: batch:DescribeJobQueues
                Resource:
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:/v1/describejobqueues

  CheckUpdateJobQueue:
    Type: AWS::Lambda::Function
    Properties:
      Handler: batch.checkUpdateJobQueue
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt LambdaBasicExecutionRole.Arn

  UpdateJobQueue:
    Type: AWS::Lambda::Function
    Properties:
      Handler: batch.updateJobQueue
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt UpdateJobQueueRole.Arn

  UpdateJobQueueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UpdateJobQueueRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: batch:UpdateJobQueue
                Resource:
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:/v1/updatejobqueue

  DeleteJobQueue:
    Type: AWS::Lambda::Function
    Properties:
      Handler: batch.deleteJobQueue
      Timeout: 10
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DeleteJobQueueRole.Arn

  DeleteJobQueueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeleteJobQueueRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: batch:DeleteJobQueue
                Resource:
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:/v1/deletejobqueue

  SetupJobQueueExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SetupJobQueueExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt CreateJobQueue.Arn
                  - !GetAtt DescribeJobQueue.Arn
                  - !GetAtt CheckUpdateJobQueue.Arn
                  - !GetAtt UpdateJobQueue.Arn
                  - !GetAtt DeleteJobQueue.Arn
                  - !GetAtt SendCloudFormationResponse.Arn

  SetupJobQueueStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt SetupJobQueueExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupJobQueue",
          "States": {
            "SetupJobQueue": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckEventType",
                "States": {
                  "CheckEventType": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Create",
                      "Next": "CreateJobQueue"
                    }, {
                      "Variable": "$.RequestType",
                      "StringEquals": "Update",
                      "Next": "CheckReplace"
                    }, {
                      "Variable": "$.RequestType",
                      "StringEquals": "Delete",
                      "Next": "PassDeletedResourceProperties"
                    }]
                  },
                  "CreateJobQueue": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": null,
                    "Resource": "${CreateJobQueue.Arn}",
                    "Next": "GetStatusWhenCreating"
                  },
                  "GetStatusWhenCreating": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.jobQueueName",
                    "ResultPath": "$.ResourceProperties",
                    "Resource": "${DescribeJobQueue.Arn}",
                    "Next": "CheckIfCreated"
                  },
                  "CheckIfCreated": {
                    "Type": "Choice",
                    "Choices": [{
                      "And": [{
                        "Variable": "$.ResourceProperties.state",
                        "StringEquals": "ENABLED"
                      }, {
                        "Variable": "$.ResourceProperties.status",
                        "StringEquals": "VALID"
                      }],
                      "Next": "Success"
                    }],
                    "Default": "WaitWhileCreating"
                  },
                  "WaitWhileCreating" : {
                    "Type": "Wait",
                    "Seconds": 15,
                    "Next": "GetStatusWhenCreating"
                  },
                  "CheckReplace": {
                    "Type": "Task",
                    "ResultPath": null,
                    "Resource": "${CheckUpdateJobQueue.Arn}",
                    "Catch": [{
                      "ErrorEquals": [ "RequiresReplacement" ],
                      "ResultPath": null,
                      "Next": "PassReplacedResourceProperties"
                    }],
                    "Next": "UpdateJobQueue"
                  },
                  "UpdateJobQueue": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": null,
                    "Resource": "${UpdateJobQueue.Arn}",
                    "Next": "GetStatusWhenUpdating"
                  },
                  "GetStatusWhenUpdating": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.jobQueueName",
                    "ResultPath": "$.ResourceProperties",
                    "Resource": "${DescribeJobQueue.Arn}",
                    "Next": "CheckIfUpdated"
                  },
                  "CheckIfUpdated": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.ResourceProperties.status",
                      "StringEquals": "VALID",
                      "Next": "PassJobQueueName"
                    }],
                    "Default": "WaitWhileUpdating"
                  },
                  "WaitWhileUpdating" : {
                    "Type": "Wait",
                    "Seconds": 15,
                    "Next": "GetStatusWhenUpdating"
                  },
                  "PassReplacedResourceProperties": {
                    "Type": "Pass",
                    "InputPath": "$.OldResourceProperties",
                    "ResultPath": "$.DeletedResourceProperties",
                    "Next": "PassDisableBeforeDelete"
                  },
                  "PassDeletedResourceProperties": {
                    "Type": "Pass",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.DeletedResourceProperties",
                    "Next": "PassDisableBeforeDelete"
                  },
                  "PassDisableBeforeDelete": {
                    "Type": "Pass",
                    "ResultPath": "$.DeletedResourceProperties.state",
                    "Result": "DISABLED",
                    "Next": "DisableBeforeDelete"
                  },
                  "DisableBeforeDelete": {
                    "Type": "Task",
                    "InputPath": "$.DeletedResourceProperties",
                    "ResultPath": null,
                    "Resource": "${UpdateJobQueue.Arn}",
                    "Next": "GetStatusWhenDisabling"
                  },
                  "GetStatusWhenDisabling": {
                    "Type": "Task",
                    "InputPath": "$.DeletedResourceProperties.jobQueueName",
                    "ResultPath": "$.DeletedResourceProperties",
                    "Resource": "${DescribeJobQueue.Arn}",
                    "Next": "CheckIfDisabled"
                  },
                  "CheckIfDisabled": {
                    "Type": "Choice",
                    "Choices": [{
                      "And": [{
                        "Variable": "$.DeletedResourceProperties.state",
                        "StringEquals": "DISABLED"
                      }, {
                        "Variable": "$.DeletedResourceProperties.status",
                        "StringEquals": "VALID"
                      }],
                      "Next": "DeleteJobQueue"
                    }],
                    "Default": "WaitWhileDisabling"
                  },
                  "WaitWhileDisabling" : {
                    "Type": "Wait",
                    "Seconds": 15,
                    "Next": "GetStatusWhenDisabling"
                  },
                  "DeleteJobQueue": {
                    "Type": "Task",
                    "InputPath": "$.DeletedResourceProperties.jobQueueName",
                    "ResultPath": null,
                    "Resource": "${DeleteJobQueue.Arn}",
                    "Next": "GetStatusWhenDeleting"
                  },
                  "GetStatusWhenDeleting": {
                    "Type": "Task",
                    "InputPath": "$.DeletedResourceProperties.jobQueueName",
                    "ResultPath": "$.DeletedResourceProperties",
                    "Resource": "${DescribeJobQueue.Arn}",
                    "Next": "CheckIfDeleted"
                  },
                  "CheckIfDeleted": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.DeletedResourceProperties.status",
                      "StringEquals": "DELETED",
                      "Next": "CheckCreateAfterDelete"
                    }],
                    "Default": "WaitWhileDeleting"
                  },
                  "WaitWhileDeleting" : {
                    "Type": "Wait",
                    "Seconds": 15,
                    "Next": "GetStatusWhenDeleting"
                  },
                  "CheckCreateAfterDelete": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Update",
                      "Next": "CreateJobQueue"
                    }],
                    "Default": "PassJobQueueName"
                  },
                  "PassJobQueueName": {
                    "Type": "Pass",
                    "InputPath": "$.ResourceProperties.jobQueueName",
                    "ResultPath": "$.Data.Name",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

Outputs:
  JobQueue:
    Value: !GetAtt JobQueue.Name
