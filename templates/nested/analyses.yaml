Parameters:
  BackendStack:
    Type: String
  ArtifactsBucket:
    Type: String
  DataBucket:
    Type: String
  LambdaPackage:
    Type: String
  WebDomain:
    Type: String
  ApiId:
    Type: String
  ApiStage:
    Type: String
  SearchUploadDocumentsFunction:
    Type: String
  PipelinesTable:
    Type: String
  JobQueue:
    Type: String

Mappings:
  StackMap:
    backend-beta:
      AnalysesReadCapacity: 1
      AnalysesWriteCapacity: 1
    backend-release:
      AnalysesReadCapacity: 5
      AnalysesWriteCapacity: 5

Resources:
  AnalysesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !FindInMap
          - StackMap
          - !Ref BackendStack
          - AnalysesReadCapacity
        WriteCapacityUnits: !FindInMap
          - StackMap
          - !Ref BackendStack
          - AnalysesWriteCapacity
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  AnalysesTableStreamMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt AnalysesTable.StreamArn
      FunctionName: !Ref SearchUploadDocumentsFunction
      StartingPosition: TRIM_HORIZON
      BatchSize: 100

  CreateAnalysis:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${BackendStack}-CreateAnalysis
      Handler: analyses.create
      Timeout: 20
      Environment:
        Variables:
          ANALYSES_TABLE: !Ref AnalysesTable
          WEB_DOMAIN: !Ref WebDomain
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt CreateAnalysisRole.Arn

  CreateAnalysisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateAnalysisRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: dynamodb:PutItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AnalysesTable}

  CreateAnalysisPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateAnalysis
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/${ApiStage}/POST/analyses

  ExecuteAnalysis:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${BackendStack}-ExecuteAnalysis
      Handler: analyses.submitExecution
      Timeout: 20
      Environment:
        Variables:
          ANALYSES_TABLE: !Ref AnalysesTable
          PIPELINES_TABLE: !Ref PipelinesTable
          STATE_MACHINE: !Ref StartAnalysisStateMachine
          WEB_DOMAIN: !Ref WebDomain
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt ExecuteAnalysisRole.Arn

  ExecuteAnalysisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ExecuteAnalysisRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: dynamodb:GetItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PipelinesTable}
              - Effect: Allow
                Action: dynamodb:UpdateItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AnalysesTable}
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref StartAnalysisStateMachine

  ExecuteAnalysisPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ExecuteAnalysis
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/${ApiStage}/POST/analyses/{analysis_id}/execution

  CreateRoleForAnalysis:
    Type: AWS::Lambda::Function
    Properties:
      Handler: analyses.createRole
      Timeout: 20
      Environment:
        Variables:
          STACK_NAME: !Ref BackendStack
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt CreateRoleForAnalysisRole.Arn

  CreateRoleForAnalysisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateRoleForAnalysisRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:CreateRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/analysis-${BackendStack}-*

  SetRolePolicy:
    Type: AWS::Lambda::Function
    Properties:
      Handler: analyses.setRolePolicy
      Timeout: 20
      Environment:
        Variables:
          STACK_NAME: !Ref BackendStack
          DATA_BUCKET: !Ref DataBucket
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SetRolePolicyRole.Arn

  SetRolePolicyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SetRolePolicyRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:PutRolePolicy
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/analysis-${BackendStack}-*

  DeleteRolePolicy:
    Type: AWS::Lambda::Function
    Properties:
      Handler: analyses.deleteRolePolicy
      Timeout: 20
      Environment:
        Variables:
          STACK_NAME: !Ref BackendStack
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DeleteRolePolicyRole.Arn

  DeleteRolePolicyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeleteRolePolicyRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:DeleteRolePolicy
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/analysis-${BackendStack}-*

  DeleteRoleForAnalysis:
    Type: AWS::Lambda::Function
    Properties:
      Handler: analyses.deleteRole
      Timeout: 20
      Environment:
        Variables:
          STACK_NAME: !Ref BackendStack
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DeleteRoleForAnalysisRole.Arn

  DeleteRoleForAnalysisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeleteRoleForAnalysisRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:DeleteRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/analysis-${BackendStack}-*

  DefineJobs:
    Type: AWS::Lambda::Function
    Properties:
      Handler: analyses.defineJobs
      Timeout: 60
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
          STACK_NAME: !Ref BackendStack
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt DefineJobsRole.Arn

  DefineJobsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DefineJobsRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: batch:RegisterJobDefinition
                Resource:
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:/registerjobdefinition
              - Effect: Allow
                Action: iam:PassRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/analysis-${BackendStack}-*

  SubmitJobs:
    Type: AWS::Lambda::Function
    Properties:
      Handler: analyses.submitJobs
      Timeout: 60
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Ref LambdaPackage
      Role: !GetAtt SubmitJobsRole.Arn

  SubmitJobsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SubmitJobsRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: batch:SubmitJob
                Resource:
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:/v1/submitjob

  StartAnalysisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartAnalysisRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt CreateRoleForAnalysis.Arn
                  - !GetAtt SetRolePolicy.Arn
                  - !GetAtt DeleteRolePolicy.Arn
                  - !GetAtt DeleteRoleForAnalysis.Arn
                  - !GetAtt DefineJobs.Arn
                  - !GetAtt SubmitJobs.Arn

  StartAnalysisStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StartAnalysisRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "CreateRoleForAnalysis",
          "States": {
            "CreateRoleForAnalysis": {
              "Type": "Task",
              "InputPath": "$.analysis_id",
              "ResultPath": null,
              "Resource": "${CreateRoleForAnalysis.Arn}",
              "Next": "SetRolePolicy"
            },
            "SetRolePolicy": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SetRolePolicy.Arn}",
              "Next": "ScheduleJobs",
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "DeleteRole"
              }]
            },
            "ScheduleJobs": {
              "Type": "Parallel",
              "End": true,
              "Branches": [{
                "StartAt": "DefineJobs",
                "States": {
                  "DefineJobs": {
                    "Type": "Task",
                    "ResultPath": "$.jobDefinitions",
                    "Resource": "${DefineJobs.Arn}",
                    "Next": "PassJobQueue"
                  },
                  "PassJobQueue": {
                    "Type": "Pass",
                    "Result": "${JobQueue}",
                    "ResultPath": "$.jobQueue",
                    "Next": "SubmitJobs"
                  },
                  "SubmitJobs": {
                    "Type": "Task",
                    "ResultPath": "$.jobIds",
                    "Resource": "${SubmitJobs.Arn}",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "DeleteRolePolicy"
              }]
            },
            "DeleteRolePolicy": {
              "Type": "Task",
              "InputPath": "$.analysis_id",
              "ResultPath": null,
              "Resource": "${DeleteRolePolicy.Arn}",
              "Next": "DeleteRole"
            },
            "DeleteRole": {
              "Type": "Task",
              "InputPath": "$.analysis_id",
              "ResultPath": null,
              "Resource": "${DeleteRoleForAnalysis.Arn}",
              "Next": "PassError"
            },
            "PassError": {
              "Type": "Pass",
              "InputPath": "$.Error",
              "End": true
            }
          }
        }

Outputs:
  Table:
    Value: !Ref AnalysesTable
