AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  ArtifactsBucket:
    Type: String
  VpcRange:
    Type: String
  EncryptionKeyId:
    Type: String
  SecretsBucket:
    Type: String
  SSHKeyName:
    Type: String
  SSHKeyS3Path:
    Type: String
  SSHKeyPutRole:
    Type: String
  SSHKeyGetRole:
    Type: String
  DomainZone:
    Type: String
  APIDomain:
    Type: String
  WebDomain:
    Type: String
  WebBucket:
    Type: String
  WebTTL:
    Type: Number
  WebPriceClass:
    Type: String
  WebLocations:
    Type: CommaDelimitedList
  WebACL:
    Type: String
  WebSigningKeyPutRoleArn:
    Type: String
  WebSigningKeyGetRoleArn:
    Type: String
  DatasetsTableName:
    Type: String
  SearchDomain:
    Type: String
  DatasetsBucket:
    Type: String
  ClusterCores:
    Type: Number
  SpotBidPercent:
    Type: Number
  Auth0Domain:
    Type: String
  Auth0ManagementClientID:
    Type: String
  Auth0ManagementClientSecret:
    Type: String
    NoEcho: true
    Default: ''
  Auth0UserTokenLifetime:
    Type: Number
  Auth0PutSecretRoleArn:
    Type: String
  Auth0GetManagementSecretRoleArn:
    Type: String
  Auth0CreateClientRoleArn:
    Type: String

Conditions:
  SetupWebSigningKeyPair: !Not [!Equals [!Ref WebSigningKeyPutRoleArn, '']]

Mappings:
  StackMap:
    backend-beta:
      DatasetsReadCapacity: 1
      DatasetsWriteCapacity: 1
      ProjectsReadCapacity: 1
      ProjectsWriteCapacity: 1
      SearchStackSuffix: 'b'
    backend-release:
      DatasetsReadCapacity: 5
      DatasetsWriteCapacity: 5
      ProjectsReadCapacity: 5
      ProjectsWriteCapacity: 5
      SearchStackSuffix: 'r'

Resources:
  DatasetsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !FindInMap
          - StackMap
          - !Ref AWS::StackName
          - DatasetsReadCapacity
        WriteCapacityUnits: !FindInMap
          - StackMap
          - !Ref AWS::StackName
          - DatasetsWriteCapacity
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ProjectsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !FindInMap
          - StackMap
          - !Ref AWS::StackName
          - ProjectsReadCapacity
        WriteCapacityUnits: !FindInMap
          - StackMap
          - !Ref AWS::StackName
          - ProjectsWriteCapacity
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  LogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Principal:
              Service: s3.amazonaws.com
            Resource:
              - !Sub arn:aws:s3:::${LogsBucket}/*
            Condition:
              ArnLike:
                'aws:SourceArn': !Sub arn:aws:s3:::${DatasetsBucket}
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
                's3:x-amz-acl': bucket-owner-full-control

  BackendVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcRange
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  BackendRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BackendVPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  BackendVPCInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: BackendVPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref BackendRouteTable
      GatewayId: !Ref BackendInternetGateway

  BackendVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref BackendVPC
      InternetGatewayId: !Ref BackendInternetGateway

  BackendInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  BackendS3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref BackendVPC
      RouteTableIds:
        - !Ref BackendRouteTable

  SendCloudFormationResponse:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SendCloudFormationResponse
      CodeUri: ../app
      Handler: aws.sendCloudFormationResponse
      Runtime: nodejs6.10

  SetupCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SetupCustomResource
      CodeUri: ../app
      Handler: aws.setupCustomResource
      Runtime: nodejs6.10
      Timeout: 10
      Policies:
        Statement:
          - Effect: Allow
            Action: states:StartExecution
            Resource:
              - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:Setup*

  BasicLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  Subnets:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupSubnetsStateMachine
      VpcId: !Ref BackendVPC
      VpcRange: !Ref VpcRange
      AvailabilityZones: !GetAZs
        Ref: AWS::Region

  CalculateSubnets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CalculateSubnets
      CodeUri: ../app
      Handler: vpc.calculateSubnets
      Runtime: nodejs6.10

  CreateSubnets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateSubnets
      CodeUri: ../app
      Handler: vpc.createSubnets
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateSubnet
            Resource: '*'

  ModifySubnets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ModifySubnets
      CodeUri: ../app
      Handler: vpc.modifySubnets
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:ModifySubnetAttribute
            Resource: '*'

  RouteSubnets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RouteSubnets
      CodeUri: ../app
      Handler: vpc.routeSubnets
      Runtime: nodejs6.10
      Environment:
        Variables:
          ROUTE_TABLE: !Ref BackendRouteTable
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:AssociateRouteTable
            Resource: '*'

  DescribeSubnets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DescribeSubnets
      CodeUri: ../app
      Handler: vpc.describeSubnets
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeSubnets
            Resource: '*'

  DeleteSubnets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteSubnets
      CodeUri: ../app
      Handler: vpc.deleteSubnets
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:DeleteSubnet
            Resource: '*'

  InstancesInit:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-InstancesInit
      CodeUri: ../app
      Handler: aws.executeStateMachine
      Runtime: nodejs6.10
      Environment:
        Variables:
          STATE_MACHINE: !Ref InstancesInitStateMachine
      Events:
        InstanceRunning:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - EC2 Instance State-change Notification
              detail:
                state:
                  - running
      Policies:
        Statement:
          - Effect: Allow
            Action: states:StartExecution
            Resource:
              - !Ref InstancesInitStateMachine

  DescribeInstance:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DescribeInstance
      CodeUri: ../app
      Handler: instances.describeInstance
      Runtime: nodejs6.10
      Timeout: 5
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DescribeInstances
            Resource: '*'

  SetupSSHKey:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupSSHKeyStateMachine

  CreateSSHKey:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateSSHKey
      CodeUri: ../app
      Handler: instances.createSSHKey
      Runtime: nodejs6.10
      Environment:
        Variables:
          ENCRYPTION_KEY_ID: !Ref EncryptionKeyId
          SSH_KEY_NAME: !Ref SSHKeyName
          SSH_KEY_S3_BUCKET: !Ref SecretsBucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${SSHKeyPutRole}

  DeleteSSHKey:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteSSHKey
      CodeUri: ../app
      Handler: instances.deleteSSHKey
      Runtime: nodejs6.10
      Environment:
        Variables:
          SSH_KEY_NAME: !Ref SSHKeyName
          SSH_KEY_S3_BUCKET: !Ref SecretsBucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DeleteKeyPair
            Resource: '*'
          - Effect: Allow
            Action: s3:DeleteObject
            Resource:
              - !Sub arn:aws:s3:::${SecretsBucket}/${SSHKeyS3Path}

  CheckSSHKeyName:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CheckSSHKeyName
      CodeUri: ../app
      Handler: instances.checkSSHKeyName
      Runtime: nodejs6.10
      Environment:
        Variables:
          SSH_KEY_NAME: !Ref SSHKeyName

  CalculateVolumeSizes:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CalculateVolumeSizes
      CodeUri: ../app
      Handler: instances.calculateVolumeSizes
      Runtime: nodejs6.10

  CreateVolumes:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateVolumes
      CodeUri: ../app
      Handler: instances.createVolumes
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:CreateVolume
            Resource: '*'

  WaitForVolumesAvailable:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-WaitForVolumesAvailable
      CodeUri: ../app
      Handler: instances.waitForVolumesAvailable
      Runtime: nodejs6.10
      Timeout: 20
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DescribeVolumes
            Resource: '*'

  CalculateVolumeDevices:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CalculateVolumeDevices
      CodeUri: ../app
      Handler: instances.calculateVolumeDevices
      Runtime: nodejs6.10

  AttachVolumes:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-AttachVolumes
      CodeUri: ../app
      Handler: instances.attachVolumes
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:AttachVolume
            Resource: '*'

  DetachVolumes:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DetachVolumes
      CodeUri: ../app
      Handler: instances.detachVolumes
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DetachVolume
            Resource: '*'

  DeleteVolumes:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteVolumes
      CodeUri: ../app
      Handler: instances.deleteVolumes
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:DeleteVolume
            Resource: '*'

  DeleteVolumesOnTermination:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteVolumesOnTermination
      CodeUri: ../app
      Handler: instances.deleteVolumesOnTermination
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: ec2:ModifyInstanceAttribute
            Resource: '*'

  TransferInitScript:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-TransferInitScript
      CodeUri: ../app
      Handler: instances.transferInitScript
      Runtime: nodejs6.10
      Timeout: 10
      Environment:
        Variables:
          SSH_KEY_S3_BUCKET: !Ref SecretsBucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${SSHKeyGetRole}
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt BackendVPC.DefaultSecurityGroup
        SubnetIds: !GetAtt Subnets.SubnetIds

  ExecuteInitScript:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ExecuteInitScript
      CodeUri: ../app
      Handler: instances.executeInitScript
      Runtime: nodejs6.10
      Timeout: 15
      Environment:
        Variables:
          SSH_KEY_S3_BUCKET: !Ref SecretsBucket
          SSH_KEY_S3_PATH: !Ref SSHKeyS3Path
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${SSHKeyGetRole}
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt BackendVPC.DefaultSecurityGroup
        SubnetIds: !GetAtt Subnets.SubnetIds

  DeleteS3Secret:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteS3Secret
      CodeUri: ../app
      Handler: aws.deleteS3Object
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: s3:DeleteObject
            Resource: !Sub arn:aws:s3:::${SecretsBucket}/*

  GetProjects:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetProjects
      CodeUri: ../app
      Handler: projects.get
      Runtime: nodejs6.10
      Events:
        Api:
          Type: Api
          Properties:
            Path: /projects
            Method: GET
            RestApiId: !Ref Api

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Authorizer
      CodeUri: ../app
      Handler: members.authorize
      Runtime: nodejs6.10
      Timeout: 10
      Environment:
        Variables:
          API_DOMAIN: !Ref APIDomain
          AUTH0_DOMAIN: !Ref Auth0Domain

  AuthorizerInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AuthorizerInvocationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt Authorizer.Arn

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  InstancesInitStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "DescribeInstance",
          "States": {
            "DescribeInstance": {
              "Type": "Task",
              "InputPath": "$.detail.instance-id",
              "Resource": "${DescribeInstance.Arn}",
              "Next": "CheckSSHKeyName"
            },
            "CheckSSHKeyName": {
              "Type": "Task",
              "InputPath": "$.KeyName",
              "ResultPath": null,
              "Resource": "${CheckSSHKeyName.Arn}",
              "Next": "CalculateVolumeSizes"
            },
            "CalculateVolumeSizes": {
              "Type": "Task",
              "InputPath": "$.InstanceType",
              "ResultPath": "$.volumeSizes",
              "Resource": "${CalculateVolumeSizes.Arn}",
              "Next": "PrepareVolumes"
            },
            "PrepareVolumes": {
              "Type": "Parallel",
              "Next": "MountVolumes",
              "Branches": [{
                "StartAt": "CreateVolumes",
                "States": {
                  "CreateVolumes": {
                    "Type": "Task",
                    "ResultPath": "$.volumeIds",
                    "Resource": "${CreateVolumes.Arn}",
                    "Next": "WaitForVolumesCreated"
                  },
                  "WaitForVolumesCreated": {
                    "Type": "Task",
                    "InputPath": "$.volumeIds",
                    "ResultPath": null,
                    "Resource": "${WaitForVolumesAvailable.Arn}",
                    "Next": "CalculateVolumeDevices"
                  },
                  "CalculateVolumeDevices": {
                    "Type": "Task",
                    "InputPath": "$.volumeIds",
                    "ResultPath": "$.volumeDevices",
                    "Resource": "${CalculateVolumeDevices.Arn}",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DeleteVolumes"
              }]
            },
            "MountVolumes": {
              "Type": "Parallel",
              "InputPath": "$.[0]",
              "End": true,
              "Branches": [{
                "StartAt": "AttachVolumes",
                "States": {
                  "AttachVolumes": {
                    "Type": "Task",
                    "ResultPath": null,
                    "Resource": "${AttachVolumes.Arn}",
                    "Next": "DeleteVolumesOnTermination",
                    "Retry": [{
                        "ErrorEquals": [ "HandledError" ],
                        "IntervalSeconds": 5
                    }]
                  },
                  "DeleteVolumesOnTermination": {
                    "Type": "Task",
                    "ResultPath": null,
                    "Resource": "${DeleteVolumesOnTermination.Arn}",
                    "Next": "TransferInitScript"
                  },
                  "TransferInitScript": {
                    "Type": "Task",
                    "InputPath": "$.PrivateIpAddress",
                    "ResultPath": null,
                    "Resource": "${TransferInitScript.Arn}",
                    "TimeoutSeconds": 5,
                    "Next": "ExecuteInitScript",
                    "Retry": [{
                        "ErrorEquals": [ "HandledError", "States.Timeout" ],
                        "IntervalSeconds": 5, "MaxAttempts": 5
                    }]
                  },
                  "ExecuteInitScript": {
                    "Type": "Task",
                    "Resource": "${ExecuteInitScript.Arn}",
                    "TimeoutSeconds": 10,
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DetachVolumes"
              }]
            },
            "DetachVolumes": {
              "Type": "Task",
              "InputPath": "$.volumeIds",
              "ResultPath": null,
              "Resource": "${DetachVolumes.Arn}",
              "Next": "WaitForVolumesDetached"
            },
            "WaitForVolumesDetached": {
              "Type": "Task",
              "InputPath": "$.volumeIds",
              "ResultPath": null,
              "Resource": "${WaitForVolumesAvailable.Arn}",
              "Next": "DeleteVolumes",
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "DeleteVolumes"
              }]
            },
            "DeleteVolumes": {
              "Type": "Task",
              "InputPath": "$.volumeIds",
              "Resource": "${DeleteVolumes.Arn}",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Fail",
              "Cause": "Failed to initialize instance"
            }
          }
        }

  SetupSubnetsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupSubnets",
          "States": {
            "SetupSubnets": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckCreate",
                "States": {
                  "CheckCreate": {
                    "Type": "Choice",
                    "Choices": [{
                      "Variable": "$.RequestType",
                      "StringEquals": "Create",
                      "Next": "CalculateSubnets"
                    }],
                    "Default": "DescribeSubnets"
                  },
                  "CalculateSubnets": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.ResourceProperties.SubnetRanges",
                    "Resource": "${CalculateSubnets.Arn}",
                    "Next": "CreateSubnets"
                  },
                  "CreateSubnets": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.Data.SubnetIds",
                    "Resource": "${CreateSubnets.Arn}",
                    "Next": "ModifySubnets"
                  },
                  "ModifySubnets": {
                    "Type": "Task",
                    "InputPath": "$.Data.SubnetIds",
                    "ResultPath": null,
                    "Resource": "${ModifySubnets.Arn}",
                    "Next": "RouteSubnets"
                  },
                  "RouteSubnets": {
                    "Type": "Task",
                    "InputPath": "$.Data.SubnetIds",
                    "ResultPath": null,
                    "Resource": "${RouteSubnets.Arn}",
                    "Next": "Success"
                  },
                  "DescribeSubnets": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.VpcId",
                    "ResultPath": "$.Data.SubnetIds",
                    "Resource": "${DescribeSubnets.Arn}",
                    "Next": "ChooseUpdateOrDelete"
                  },
                  "ChooseUpdateOrDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "ModifySubnets"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "DeleteSubnets"
                      }
                    ]
                  },
                  "DeleteSubnets": {
                    "Type": "Task",
                    "InputPath": "$.Data.SubnetIds",
                    "ResultPath": null,
                    "Resource": "${DeleteSubnets.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  SetupSSHKeyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupSSHKey",
          "States": {
            "SetupSSHKey": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "ChooseEventType",
                "States": {
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Or": [
                          {
                            "Variable": "$.RequestType",
                            "StringEquals": "Update"
                          },
                          {
                            "Variable": "$.RequestType",
                            "StringEquals": "Delete"
                          }
                        ],
                        "Next": "DeleteSSHKey"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "CreateSSHKey"
                      }
                    ]
                  },
                  "DeleteSSHKey": {
                    "Type": "Task",
                    "ResultPath": null,
                    "Resource": "${DeleteSSHKey.Arn}",
                    "Next": "CheckCreateSSHKey"
                  },
                  "CheckCreateSSHKey": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "Success"
                      }
                    ],
                    "Default": "CreateSSHKey"
                  },
                  "CreateSSHKey": {
                    "Type": "Task",
                    "ResultPath": null,
                    "Resource": "${CreateSSHKey.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  Auth0ManagementClient:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupAuth0ManagementClientStateMachine
      Secret: !Ref Auth0ManagementClientSecret
      Bucket: !Ref SecretsBucket
      Path: !Sub auth0/manage.key

  RotateAndStoreAuth0ManagementSecret:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RotateAndStoreAuth0ManagementSecret
      CodeUri: ../app
      Handler: auth0.rotateAndStoreClientSecret
      Runtime: nodejs6.10
      Role: !Ref Auth0PutSecretRoleArn
      Environment:
        Variables:
          ENCRYPTION_KEY_ID: !Ref EncryptionKeyId
          AUTH0_DOMAIN: !Ref Auth0Domain
          AUTH0_CLIENT_ID: !Ref Auth0ManagementClientID
          AUTH0_SECRET_BUCKET: !Ref SecretsBucket
          AUTH0_SECRET_PATH: !Sub auth0/manage.key

  SetupAuth0ManagementClientStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupAuth0",
          "States": {
            "SetupAuth0": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckToSkipSetup",
                "States": {
                  "CheckToSkipSetup": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.ResourceProperties.Secret",
                        "StringEquals": "",
                        "Next": "Success"
                      }
                    ],
                    "Default": "ChooseEventType"
                  },
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "RotateAndStoreSecret"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "CheckIfSecretUpdated"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "DeleteSecret"
                      }
                    ]
                  },
                  "CheckIfSecretUpdated": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.OldResourceProperties.Secret",
                        "StringEquals": "${Auth0ManagementClientSecret}",
                        "Next": "Success"
                      }
                    ],
                    "Default": "RotateAndStoreSecret"
                  },
                  "RotateAndStoreSecret": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Secret",
                    "ResultPath": null,
                    "Resource": "${RotateAndStoreAuth0ManagementSecret.Arn}",
                    "Next": "Success"
                  },
                  "DeleteSecret": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": null,
                    "Resource": "${DeleteS3Secret.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  Auth0Api:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: Auth0ManagementClient
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupAuth0ApiStateMachine
      Audience: !Sub https://${APIDomain}

  ManageAuth0Resource:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ManageAuth0Resource
      CodeUri: ../app
      Handler: auth0.manage
      Runtime: nodejs6.10
      Role: !Ref Auth0GetManagementSecretRoleArn
      Environment:
        Variables:
          AUTH0_DOMAIN: !Ref Auth0Domain
          AUTH0_CLIENT_ID: !Ref Auth0ManagementClientID
          AUTH0_SECRET_BUCKET: !Ref SecretsBucket
          AUTH0_SECRET_PATH: !Sub auth0/manage.key

  StoreAuth0Config:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-StoreAuth0Config
      CodeUri: ../app
      Handler: aws.putS3Object
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}/auth0/${AWS::StackName}-*

  RetrieveAuth0Config:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RetrieveAuth0Config
      CodeUri: ../app
      Handler: aws.getS3Object
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}/auth0/${AWS::StackName}-*

  SetupAuth0ApiStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupAuth0Api",
          "States": {
            "SetupAuth0Api": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckCreate",
                "States": {
                  "CheckCreate": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "PassCreateApi"
                      }
                    ],
                    "Default": "PassRetrieveApiId"
                  },
                  "PassCreateApi": {
                    "Type": "Pass",
                    "Result": {
                      "method": "POST",
                      "endpoint": ["/resource-servers"],
                      "payload": {
                        "name": "${APIDomain}",
                        "token_lifetime_for_web": ${Auth0UserTokenLifetime}
                      },
                      "datapath": "id"
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassAudienceCreateApi"
                  },
                  "PassAudienceCreateApi": {
                    "Type": "Pass",
                    "InputPath": "$.ResourceProperties.Audience",
                    "ResultPath": "$.ResourceProperties.Request.payload.identifier",
                    "Next": "CreateApi"
                  },
                  "CreateApi": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Request",
                    "ResultPath": "$.Data.Id",
                    "Resource": "${ManageAuth0Resource.Arn}",
                    "Next": "PassStoreApiId"
                  },
                  "PassStoreApiId": {
                    "Type": "Pass",
                    "Result": {
                      "Bucket": "${ArtifactsBucket}",
                      "Path": "auth0/${AWS::StackName}-api.id"
                    },
                    "ResultPath": "$.ResourceProperties.Store",
                    "Next": "PassBodyStoreApiId"
                  },
                  "PassBodyStoreApiId": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Store.Body",
                    "Next": "StoreApiId"
                  },
                  "StoreApiId": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Store",
                    "ResultPath": null,
                    "Resource": "${StoreAuth0Config.Arn}",
                    "Next": "Success"
                  },
                  "PassRetrieveApiId": {
                    "Type": "Pass",
                    "Result": {
                      "Bucket": "${ArtifactsBucket}",
                      "Path": "auth0/${AWS::StackName}-api.id"
                    },
                    "ResultPath": "$.ResourceProperties.Retrieve",
                    "Next": "RetrieveApiId"
                  },
                  "RetrieveApiId": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Retrieve",
                    "ResultPath": "$.Data.Id",
                    "Resource": "${RetrieveAuth0Config.Arn}",
                    "Next": "ChooseUpdateOrDelete"
                  },
                  "ChooseUpdateOrDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "And": [
                          {
                            "Variable": "$.RequestType",
                            "StringEquals": "Update"
                          },
                          {
                            "Variable": "$.OldResourceProperties.Audience",
                            "StringEquals": "https://${APIDomain}"
                          }
                        ],
                        "Next": "PassUpdateApi"
                      }
                    ],
                    "Default": "PassDeleteApi"
                  },
                  "PassUpdateApi": {
                    "Type": "Pass",
                    "Result": {
                      "method": "PATCH",
                      "endpoint": ["/resource-servers", "/{id}"],
                      "payload": {
                        "name": "${APIDomain}",
                        "token_lifetime_for_web": ${Auth0UserTokenLifetime}
                      },
                      "datapath": "null"
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassEndpointUpdateApi"
                  },
                  "PassEndpointUpdateApi": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Request.endpoint[1]",
                    "Next": "UpdateApi"
                  },
                  "UpdateApi": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Request",
                    "ResultPath": null,
                    "Resource": "${ManageAuth0Resource.Arn}",
                    "Next": "Success"
                  },
                  "PassDeleteApi": {
                    "Type": "Pass",
                    "Result": {
                      "method": "DELETE",
                      "endpoint": ["/resource-servers", "/{id}"]
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassEndpointDeleteApi"
                  },
                  "PassEndpointDeleteApi": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Request.endpoint[1]",
                    "Next": "DeleteApi"
                  },
                  "DeleteApi": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Request",
                    "ResultPath": null,
                    "Resource": "${ManageAuth0Resource.Arn}",
                    "Next": "CheckCreateAfterDelete"
                  },
                  "CheckCreateAfterDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "PassCreateApi"
                      }
                    ],
                    "Default": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  Auth0SPA:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: Auth0ManagementClient
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupAuth0ClientStateMachine
      Payload: !Sub |-
        {
          "name": "${WebDomain}",
          "app_type": "spa",
          "callbacks": [
            "https://${WebDomain}/login.html"
          ],
          "resource_servers": [{
            "identifier": "https://${APIDomain}"
          }]
        }
      Id:
        Bucket: !Ref ArtifactsBucket
        Path: !Sub auth0/${AWS::StackName}-spa.id

  Auth0ApiTestClient:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: Auth0ManagementClient
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupAuth0ClientStateMachine
      Payload: !Sub |-
        {
          "name": "${APIDomain} - Test",
          "app_type": "non_interactive",
          "resource_servers": [{
            "identifier": "https://${APIDomain}"
          }]
        }
      Id:
        Bucket: !Ref ArtifactsBucket
        Path: !Sub auth0/${AWS::StackName}-api-test-client.id
      Secret:
        Bucket: !Ref SecretsBucket
        Path: !Sub auth0/${AWS::StackName}-api-test-client.key
        EncryptionKeyId: !Ref EncryptionKeyId

  CreateAuth0Client:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateAuth0Client
      CodeUri: ../app
      Handler: auth0.createClient
      Runtime: nodejs6.10
      Role: !Ref Auth0CreateClientRoleArn
      Environment:
        Variables:
          AUTH0_DOMAIN: !Ref Auth0Domain
          AUTH0_CLIENT_ID: !Ref Auth0ManagementClientID
          AUTH0_SECRET_BUCKET: !Ref SecretsBucket
          AUTH0_SECRET_PATH: !Sub auth0/manage.key

  SetupAuth0ClientStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupAuth0ClientWithSecret",
          "States": {
            "SetupAuth0ClientWithSecret": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckCreate",
                "States": {
                  "CheckCreate": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "CreateClient"
                      }
                    ],
                    "Default": "RetrieveClientId"
                  },
                  "CreateClient": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "Resource": "${CreateAuth0Client.Arn}",
                    "ResultPath": "$.Data.Id",
                    "Next": "PassBodyStoreId"
                  },
                  "PassBodyStoreId": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Id.Body",
                    "Next": "StoreId"
                  },
                  "StoreId": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Id",
                    "ResultPath": null,
                    "Resource": "${StoreAuth0Config.Arn}",
                    "Next": "Success"
                  },
                  "RetrieveClientId": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Id",
                    "ResultPath": "$.Data.Id",
                    "Resource": "${RetrieveAuth0Config.Arn}",
                    "Next": "CheckUpdateOrDelete"
                  },
                  "CheckUpdateOrDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "PassUpdateClient"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "PassDeleteClient"
                      }
                    ]
                  },
                  "PassUpdateClient": {
                    "Type": "Pass",
                    "Result": {
                      "method": "PATCH",
                      "endpoint": ["/clients", "{id}"],
                      "datapath": "client_id"
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassUpdatePayload"
                  },
                  "PassUpdatePayload": {
                    "Type": "Pass",
                    "InputPath": "$.ResourceProperties.Payload",
                    "ResultPath": "$.ResourceProperties.Request.payload",
                    "Next": "PassEndpointUpdateOrDeleteClient"
                  },
                  "PassDeleteClient": {
                    "Type": "Pass",
                    "Result": {
                      "method": "DELETE",
                      "endpoint": ["/clients", "{id}"]
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassEndpointUpdateOrDeleteClient"
                  },
                  "PassEndpointUpdateOrDeleteClient": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Request.endpoint[1]",
                    "Next": "UpdateOrDeleteClient"
                  },
                  "UpdateOrDeleteClient": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Request",
                    "Resource": "${ManageAuth0Resource.Arn}",
                    "ResultPath": null,
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  WebCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref WebDomain

  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Principal:
              CanonicalUser: !GetAtt WebOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub arn:aws:s3:::${WebBucket}/*
          - Effect: Allow
            Action: s3:ListBucket
            Principal:
              CanonicalUser: !GetAtt WebOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub arn:aws:s3:::${WebBucket}

  WebDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref WebDomain
        Enabled: true
        Origins:
        - Id: web
          DomainName: !Sub ${WebBucket}.s3.amazonaws.com
          S3OriginConfig:
            OriginAccessIdentity:
              !Sub origin-access-identity/cloudfront/${WebOriginAccessIdentity.Id}
        DefaultRootObject: login.html
        CustomErrorResponses:
          - ErrorCachingMinTTL: !Ref WebTTL
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /login.html
          - ErrorCachingMinTTL: !Ref WebTTL
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /app/index.html
        DefaultCacheBehavior:
          TargetOriginId: web
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
          MinTTL: !Ref WebTTL
          DefaultTTL: !Ref WebTTL
          Compress: true
          TrustedSigners:
            - !Ref AWS::AccountId
        CacheBehaviors:
        - TargetOriginId: web
          PathPattern: login.*
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
          MinTTL: !Ref WebTTL
          DefaultTTL: !Ref WebTTL
          Compress: true
        PriceClass: !Sub PriceClass_${WebPriceClass}
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations: !Ref WebLocations
        ViewerCertificate:
          AcmCertificateArn: !Ref WebCertificate
          SslSupportMethod: sni-only
        WebACLId: !Ref WebACL

  WebDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref WebDomain
      Type: A
      HostedZoneId: !Ref DomainZone
      AliasTarget:
        DNSName: !GetAtt WebDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # fixed value, per docs

  WebOriginAccessIdentity:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupOriginAccessStateMachine
      Comment: !Ref WebDomain
      Bucket: !Ref ArtifactsBucket
      Path: !Sub web/${AWS::StackName}-origin.json

  StoreOriginAccessIdentity:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-StoreOriginAccessIdentity
      CodeUri: ../app
      Handler: web.storeOriginAccessIdentity
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}/web/${AWS::StackName}-origin.json

  RetrieveOriginAccessIdentity:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RetrieveOriginAccessIdentity
      CodeUri: ../app
      Handler: web.retrieveOriginAccessIdentity
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}/web/${AWS::StackName}-origin.json

  CreateOriginAccessIdentity:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateOriginAccessIdentity
      CodeUri: ../app
      Handler: web.createOriginAccessIdentity
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: cloudfront:CreateCloudFrontOriginAccessIdentity
            Resource: '*'

  UpdateOriginAccessIdentity:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UpdateOriginAccessIdentity
      CodeUri: ../app
      Handler: web.updateOriginAccessIdentity
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: cloudfront:UpdateCloudFrontOriginAccessIdentity
            Resource: '*'

  DeleteOriginAccessIdentity:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteOriginAccessIdentity
      CodeUri: ../app
      Handler: web.deleteOriginAccessIdentity
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: cloudfront:DeleteCloudFrontOriginAccessIdentity
            Resource: '*'

  SetupOriginAccessStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupOriginAccess",
          "States": {
            "SetupOriginAccess": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckCreate",
                "States": {
                  "CheckCreate": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "CreateOriginAccessIdentity"
                      }
                    ],
                    "Default": "RetrieveOriginAccessIdentity"
                  },
                  "CreateOriginAccessIdentity": {
                    "Type": "Task",
                    "ResultPath": "$.Data",
                    "Resource": "${CreateOriginAccessIdentity.Arn}",
                    "Next": "StoreOriginAccessIdentity"
                  },
                  "StoreOriginAccessIdentity": {
                    "Type": "Task",
                    "ResultPath": null,
                    "Resource": "${StoreOriginAccessIdentity.Arn}",
                    "Next": "Success"
                  },
                  "RetrieveOriginAccessIdentity": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.Data",
                    "Resource": "${RetrieveOriginAccessIdentity.Arn}",
                    "Next": "CheckUpdateOrDelete"
                  },
                  "CheckUpdateOrDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "UpdateOriginAccessIdentity"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "DeleteOriginAccessIdentity"
                      }
                    ]
                  },
                  "UpdateOriginAccessIdentity": {
                    "Type": "Task",
                    "ResultPath": "$.Data",
                    "Resource": "${UpdateOriginAccessIdentity.Arn}",
                    "Next": "StoreOriginAccessIdentity"
                  },
                  "DeleteOriginAccessIdentity": {
                    "Type": "Task",
                    "InputPath": "$.Data",
                    "ResultPath": null,
                    "Resource": "${DeleteOriginAccessIdentity.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  WebSigningKey:
    Type: AWS::CloudFormation::CustomResource
    Condition: SetupWebSigningKeyPair
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupWebSigningKeyPairStateMachine
      Bucket: !Ref SecretsBucket
      Path: !Sub web/signing.pem
      EncryptionKeyId: !Ref EncryptionKeyId
      Size: 4096

  CreateAndExportWebSigningKeyPair:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateAndExportWebSigningKeyPair
      CodeUri: ../app
      Handler: web.createAndExportSigningKey
      Runtime: nodejs6.10
      Timeout: 30
      Role: !If
        - SetupWebSigningKeyPair
        - !Ref WebSigningKeyPutRoleArn
        - !GetAtt BasicLambdaRole.Arn

  GenerateSignedCookies:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GenerateSignedCookies
      CodeUri: ../app
      Handler: web.generateSignedCookies
      Runtime: nodejs6.10
      Timeout: 10
      Role: !Ref WebSigningKeyGetRoleArn
      Environment:
        Variables:
          WEB_DOMAIN: !Ref WebDomain
          WEB_DISTRIBUTION_ID: !Ref WebDistribution
          WEB_SIGNING_KEY_BUCKET: !Ref SecretsBucket
          WEB_SIGNING_KEY_PATH: !Sub web/signing.pem
      Events:
        Api:
          Type: Api
          Properties:
            Path: /weblogin
            Method: GET
            RestApiId: !Ref Api

  SetupWebSigningKeyPairStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Condition: SetupWebSigningKeyPair
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupWebSigningKeyPair",
          "States": {
            "SetupWebSigningKeyPair": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "ChooseEventType",
                "States": {
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "DeleteWebSigningKey"
                      }
                    ],
                    "Default": "CreateAndExportWebSigningKeyPair"
                  },
                  "CreateAndExportWebSigningKeyPair": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.Data.PublicKey",
                    "Resource": "${CreateAndExportWebSigningKeyPair.Arn}",
                    "Next": "Success"
                  },
                  "DeleteWebSigningKey": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": null,
                    "Resource": "${DeleteS3Secret.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  SetupSearchDomain:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupSearchDomainStateMachine
      SearchDomain: !Ref SearchDomain
      Fields: !Sub |-
        [
          {
            "IndexFieldName": "table",
            "IndexFieldType": "literal",
            "LiteralOptions": {
              "FacetEnabled": false,
              "SortEnabled": false,
              "ReturnEnabled": false
            }
          },
          {
            "IndexFieldName": "project_id",
            "IndexFieldType": "literal",
            "LiteralOptions": {
              "FacetEnabled": false,
              "SortEnabled": false
            }
          },
          {
            "IndexFieldName": "created_at",
            "IndexFieldType": "date",
            "DateOptions": {
              "FacetEnabled": false
            }
          },
          {
            "IndexFieldName": "creator_id",
            "IndexFieldType": "literal",
            "LiteralOptions": {
              "FacetEnabled": false,
              "SortEnabled": false
            }
          },
          {
            "IndexFieldName": "name",
            "IndexFieldType": "text",
            "TextOptions": {
              "SortEnabled": false,
              "HighlightEnabled": false
            }
          },
          {
            "IndexFieldName": "description",
            "IndexFieldType": "text",
            "TextOptions": {
              "SortEnabled": false,
              "HighlightEnabled": false
            }
          },
          {
            "IndexFieldName": "status",
            "IndexFieldType": "literal",
            "LiteralOptions": {
              "FacetEnabled": false,
              "SortEnabled": false
            }
          },
          {
            "IndexFieldName": "bucket",
            "IndexFieldType": "literal",
            "LiteralOptions": {
              "FacetEnabled": false,
              "SortEnabled": false
            }
          },
          {
            "IndexFieldName": "irb_id",
            "IndexFieldType": "literal",
            "LiteralOptions": {
              "FacetEnabled": false,
              "SortEnabled": false
            }
          }
        ]

  CloudSearchDefineIndexFields:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CloudSearchDefineIndexFields
      CodeUri: ../app
      Handler: search.defineIndexFields
      Runtime: nodejs6.10
      Timeout: 20
      Environment:
        Variables:
          SEARCH_STACK_SUFFIX: !FindInMap
            - StackMap
            - !Ref AWS::StackName
            - SearchStackSuffix
      Policies:
        Statement:
          - Effect: Allow
            Action: cloudsearch:DefineIndexField
            Resource:
              - !Sub arn:aws:cloudsearch:${AWS::Region}:${AWS::AccountId}:domain/${SearchDomain}

  CloudSearchIndexDocuments:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CloudSearchIndexDocuments
      CodeUri: ../app
      Handler: search.indexDocuments
      Runtime: nodejs6.10
      Timeout: 20
      Policies:
        Statement:
          - Effect: Allow
            Action: cloudsearch:IndexDocuments
            Resource:
              - !Sub arn:aws:cloudsearch:${AWS::Region}:${AWS::AccountId}:domain/${SearchDomain}

  CloudSearchDescribeDomain:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CloudSearchDescribeDomain
      CodeUri: ../app
      Handler: search.describeDomain
      Runtime: nodejs6.10
      Timeout: 20
      Policies:
        Statement:
          - Effect: Allow
            Action: cloudsearch:DescribeDomains
            Resource:
              - !Sub arn:aws:cloudsearch:${AWS::Region}:${AWS::AccountId}:domain/${SearchDomain}

  SetupSearchDomainStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupSearchDomain",
          "States": {
            "SetupSearchDomain": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "ChooseEventType",
                "States": {
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "Success"
                      }
                    ],
                    "Default": "DefineIndexFields"
                  },
                  "DefineIndexFields": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.Data.State",
                    "Resource": "${CloudSearchDefineIndexFields.Arn}",
                    "Next": "CheckReindexDocuments"
                  },
                  "CheckReindexDocuments": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.Data.State",
                        "StringEquals": "RequiresIndexDocuments",
                        "Next": "IndexDocuments"
                      }
                    ],
                    "Default": "CheckActiveState"
                  },
                  "IndexDocuments": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.SearchDomain",
                    "ResultPath": null,
                    "Resource": "${CloudSearchIndexDocuments.Arn}",
                    "Next": "CheckActiveState"
                  },
                  "CheckActiveState": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.Data.State",
                        "StringEquals": "Active",
                        "Next": "Success"
                      }
                    ],
                    "Default": "Wait"
                  },
                  "Wait" : {
                    "Type": "Wait",
                    "Seconds": 15,
                    "Next": "DescribeDomain"
                  },
                  "DescribeDomain": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.SearchDomain",
                    "ResultPath": "$.Data",
                    "Resource": "${CloudSearchDescribeDomain.Arn}",
                    "Next": "CheckActiveState"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  ApiDomainName:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupApiDomainNameStateMachine
      Domain:
        Name: !Ref APIDomain
        Certificate: !Ref ApiCertificate

  CreateApiDomainName:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateApiDomainName
      CodeUri: ../app
      Handler: apig.createDomainName
      Runtime: nodejs6.10
      Timeout: 10
      Policies:
        Statement:
          - Effect: Allow
            Action: apigateway:POST
            Resource:
              - !Sub arn:aws:apigateway:${AWS::Region}::/domainnames
          - Effect: Allow
            Action: cloudfront:UpdateDistribution
            Resource: '*'

  UpdateApiDomainName:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UpdateApiDomainName
      CodeUri: ../app
      Handler: apig.updateDomainName
      Runtime: nodejs6.10
      Timeout: 10
      Policies:
        Statement:
          - Effect: Allow
            Action: apigateway:PATCH
            Resource:
              - !Sub arn:aws:apigateway:${AWS::Region}::/domainnames/${APIDomain}
          - Effect: Allow
            Action: cloudfront:UpdateDistribution
            Resource: '*'

  DeleteApiDomainName:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteApiDomainName
      CodeUri: ../app
      Handler: apig.deleteDomainName
      Runtime: nodejs6.10
      Timeout: 10
      Policies:
        Statement:
          - Effect: Allow
            Action: apigateway:DELETE
            Resource:
              - !Sub arn:aws:apigateway:${AWS::Region}::/domainnames/${APIDomain}
          - Effect: Allow
            Action: cloudfront:DeleteDistribution
            Resource: '*'

  SetupApiDomainNameStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupApiCertificate",
          "States": {
            "SetupApiCertificate": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "ChooseEventType",
                "States": {
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "CreateApiDomainName"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "CheckReplaceDomainName"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "DeleteApiDomainName"
                      }
                    ]
                  },
                  "CreateApiDomainName": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Domain",
                    "ResultPath": "$.Data.DistributionDomainName",
                    "Resource": "${CreateApiDomainName.Arn}",
                    "Next": "Success"
                  },
                  "CheckReplaceDomainName": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.OldResourceProperties.Domain.Name",
                        "StringEquals": "${APIDomain}",
                        "Next": "DeleteOldApiDomainName"
                      }
                    ],
                    "Default": "UpdateApiDomainName"
                  },
                  "DeleteOldApiDomainName": {
                    "Type": "Task",
                    "InputPath": "$.OldResourceProperties.Domain.Name",
                    "ResultPath": null,
                    "Resource": "${DeleteApiDomainName.Arn}",
                    "Next": "CreateApiDomainName"
                  },
                  "UpdateApiDomainName": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Domain",
                    "ResultPath": "$.Data.DistributionDomainName",
                    "Resource": "${UpdateApiDomainName.Arn}",
                    "Next": "Success"
                  },
                  "DeleteApiDomainName": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Domain.Name",
                    "ResultPath": null,
                    "Resource": "${DeleteApiDomainName.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref APIDomain

  ApiPathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiDomainName
      - ApiLatestStage
    Properties:
      DomainName: !Ref APIDomain
      RestApiId: !Ref Api
      Stage: Latest

  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref APIDomain
      Type: A
      HostedZoneId: !Ref DomainZone
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.DistributionDomainName
        HostedZoneId: Z2FDTNDATAQYW2 # fixed value, per docs

  GetApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetApi
      CodeUri: ../app
      Handler: apig.getSpec
      Runtime: nodejs6.10
      Timeout: 10
      Environment:
        Variables:
          WEB_DOMAIN: !Ref WebDomain
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref Api

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Latest
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: !Sub s3://${ArtifactsBucket}/swagger.yaml

  CreateDataset:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateDataset
      CodeUri: ../app
      Handler: datasets.create
      Runtime: nodejs6.10
      Environment:
        Variables:
          DATASETS_TABLE: !Ref DatasetsTable
          WEB_DOMAIN: !Ref WebDomain
      Events:
        Api:
          Type: Api
          Properties:
            Path: /datasets
            Method: POST
            RestApiId: !Ref Api
      Policies:
        Statement:
          - Effect: Allow
            Action: dynamodb:PutItem
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DatasetsTable}

  CloudSearchUploadDocuments:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CloudSearchUploadDocuments
      CodeUri: ../app
      Handler: search.uploadDocuments
      Runtime: nodejs6.10
      Timeout: 30
      Environment:
        Variables:
          SEARCH_DOC_ENDPOINT: !GetAtt SetupSearchDomain.DocEndpoint
          SEARCH_STACK_SUFFIX: !FindInMap
            - StackMap
            - !Ref AWS::StackName
            - SearchStackSuffix
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:ListStreams
              - dynamodb:DescribeStream
              - dynamodb:GetShardIterator
              - dynamodb:GetRecords
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}-*/stream/*
          - Effect: Allow
            Action:
              - cloudsearch:document
            Resource:
              - !Sub arn:aws:cloudsearch:${AWS::Region}:${AWS::AccountId}:domain/${SearchDomain}

  DatasetsTableStreamMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt DatasetsTable.StreamArn
      FunctionName: !Ref CloudSearchUploadDocuments
      StartingPosition: TRIM_HORIZON
      BatchSize: 100

  ProjectsTableStreamMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt ProjectsTable.StreamArn
      FunctionName: !Ref CloudSearchUploadDocuments
      StartingPosition: TRIM_HORIZON
      BatchSize: 100

  ListDatasets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ListDatasets
      CodeUri: ../app
      Handler: datasets.list
      Runtime: nodejs6.10
      Environment:
        Variables:
          SEARCH_QUERY_ENDPOINT: !GetAtt SetupSearchDomain.QueryEndpoint
          SEARCH_STACK_SUFFIX: !FindInMap
            - StackMap
            - !Ref AWS::StackName
            - SearchStackSuffix
          WEB_DOMAIN: !Ref WebDomain
      Events:
        Api:
          Type: Api
          Properties:
            Path: /datasets
            Method: GET
            RestApiId: !Ref Api
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - cloudsearch:search
            Resource:
              - !Sub arn:aws:cloudsearch:${AWS::Region}:${AWS::AccountId}:domain/${SearchDomain}

  GetDataset:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetDataset
      CodeUri: ../app
      Handler: apig.proxy
      Runtime: nodejs6.10
      Events:
        Api:
          Type: Api
          Properties:
            Path: /datasets/{dataset_id}
            Method: GET
            RestApiId: !Ref Api

  PatchDataset:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PatchDataset
      CodeUri: ../app
      Handler: apig.proxy
      Runtime: nodejs6.10
      Events:
        Api:
          Type: Api
          Properties:
            Path: /datasets/{dataset_id}
            Method: PATCH
            RestApiId: !Ref Api

  DeleteDataset:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteDataset
      CodeUri: ../app
      Handler: apig.proxy
      Runtime: nodejs6.10
      Events:
        Api:
          Type: Api
          Properties:
            Path: /datasets/{dataset_id}
            Method: DELETE
            RestApiId: !Ref Api

  DatasetsAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt RequestDatasetCredentialsRole.Arn
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DatasetsAccessRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${DatasetsBucket}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${DatasetsBucket}/*

  RequestDatasetCredentialsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RequestDatasetCredentialsRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DatasetsTable}

  RequestDatasetCredentials:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RequestDatasetCredentials
      CodeUri: ../app
      Handler: datasets.requestCredentials
      Runtime: nodejs6.10
      Environment:
        Variables:
          DATASETS_TABLE: !Ref DatasetsTable
          DATASETS_BUCKET: !Ref DatasetsBucket
          DATASETS_ROLE: !GetAtt DatasetsAccessRole.Arn
          WEB_DOMAIN: !Ref WebDomain
      Events:
        Api:
          Type: Api
          Properties:
            Path: /datasets/{dataset_id}/credentials
            Method: POST
            RestApiId: !Ref Api
      Role: !GetAtt RequestDatasetCredentialsRole.Arn

  SetDatasetStorage:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SetDatasetStorage
      CodeUri: ../app
      Handler: datasets.setStorage
      Runtime: nodejs6.10
      Timeout: 30
      MemorySize: 1024
      Environment:
        Variables:
          DATASETS_TABLE: !Ref DatasetsTable
          DATASETS_BUCKET: !Ref DatasetsBucket
          WEB_DOMAIN: !Ref WebDomain
      Events:
        Api:
          Type: Api
          Properties:
            Path: /datasets/{dataset_id}/storage
            Method: PUT
            RestApiId: !Ref Api
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${DatasetsBucket}
          - Effect: Allow
            Action:
              - s3:PutObjectTagging
            Resource:
              - !Sub arn:aws:s3:::${DatasetsBucket}/*
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DatasetsTable}

  CreateProject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateProject
      CodeUri: ../app
      Handler: projects.create
      Runtime: nodejs6.10
      Environment:
        Variables:
          PROJECTS_TABLE: !Ref ProjectsTable
          DATASETS_BUCKET: !Ref DatasetsBucket
          LOGS_BUCKET: !Sub arn:aws:s3:::${LogsBucket}
          WEB_DOMAIN: !Ref WebDomain
      Events:
        Api:
          Type: Api
          Properties:
            Path: /projects
            Method: POST
            RestApiId: !Ref Api
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - s3:PutAnalyticsConfiguration
            Resource:
              - !Sub arn:aws:s3:::${DatasetsBucket}
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProjectsTable}

  Batch:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${ArtifactsBucket}/batch.yaml
      Parameters:
        SubnetIds: !Join [ ':', !GetAtt Subnets.SubnetIds ]
        SecurityGroup: !GetAtt BackendVPC.DefaultSecurityGroup
        ClusterCores: !Ref ClusterCores
        SpotBidPercent: !Ref SpotBidPercent
        SSHKeyName: !Ref SSHKeyName
        SetupCustomResourceArn: !GetAtt SetupCustomResource.Arn
        StatesExecutionRoleArn: !GetAtt StatesExecutionRole.Arn

Outputs:
  WebSigningKey:
    Condition: SetupWebSigningKeyPair
    Value: !GetAtt WebSigningKey.PublicKey
  DatasetsTable:
    Value: !Ref DatasetsTable
