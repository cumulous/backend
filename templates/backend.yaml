AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  ArtifactsBucket:
    Type: String
  TemplateURLBase:
    Type: String
  LambdaPackage:
    Type: String
  VpcRange:
    Type: String
  EncryptionKeyId:
    Type: String
  SecretsBucket:
    Type: String
  SSHKeyPutRoleArn:
    Type: String
  SSHKeyGetRoleArn:
    Type: String
  DomainZone:
    Type: String
  ApiDomain:
    Type: String
  WebDomain:
    Type: String
  WebBucket:
    Type: String
  WebTTL:
    Type: Number
  WebPriceClass:
    Type: String
  WebLocations:
    Type: String
  WebACL:
    Type: String
  WebSigningKeyPutRoleArn:
    Type: String
  WebSigningKeyGetRoleArn:
    Type: String
  SearchDomain:
    Type: String
  DatasetsBucket:
    Type: String
  ClusterCores:
    Type: Number
  SpotBidPercent:
    Type: Number
  Auth0Domain:
    Type: String
  Auth0ManagementClientID:
    Type: String
  Auth0ManagementClientSecret:
    Type: String
    NoEcho: true
    Default: ''
  Auth0UserTokenLifetime:
    Type: Number
  Auth0PutSecretRoleArn:
    Type: String
  Auth0GetManagementSecretRoleArn:
    Type: String
  Auth0CreateClientRoleArn:
    Type: String

Mappings:
  StackMap:
    backend-beta:
      DatasetsReadCapacity: 1
      DatasetsWriteCapacity: 1
      ProjectsReadCapacity: 1
      ProjectsWriteCapacity: 1
      SearchStackSuffix: 'b'
    backend-release:
      DatasetsReadCapacity: 5
      DatasetsWriteCapacity: 5
      ProjectsReadCapacity: 5
      ProjectsWriteCapacity: 5
      SearchStackSuffix: 'r'

Resources:
  DatasetsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !FindInMap
          - StackMap
          - !Ref AWS::StackName
          - DatasetsReadCapacity
        WriteCapacityUnits: !FindInMap
          - StackMap
          - !Ref AWS::StackName
          - DatasetsWriteCapacity
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ProjectsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !FindInMap
          - StackMap
          - !Ref AWS::StackName
          - ProjectsReadCapacity
        WriteCapacityUnits: !FindInMap
          - StackMap
          - !Ref AWS::StackName
          - ProjectsWriteCapacity
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  LogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Principal:
              Service: s3.amazonaws.com
            Resource:
              - !Sub arn:aws:s3:::${LogsBucket}/*
            Condition:
              ArnLike:
                'aws:SourceArn': !Sub arn:aws:s3:::${DatasetsBucket}
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
                's3:x-amz-acl': bucket-owner-full-control

  SendCloudFormationResponse:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SendCloudFormationResponse
      CodeUri: ../app
      Handler: aws.sendCloudFormationResponse
      Runtime: nodejs6.10

  SetupCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SetupCustomResource
      CodeUri: ../app
      Handler: aws.setupCustomResource
      Runtime: nodejs6.10
      Timeout: 10
      Policies:
        Statement:
          - Effect: Allow
            Action: states:StartExecution
            Resource:
              - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:Setup*

  LambdaBasicExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DeleteS3Secret:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteS3Secret
      CodeUri: ../app
      Handler: aws.deleteS3Object
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: s3:DeleteObject
            Resource: !Sub arn:aws:s3:::${SecretsBucket}/*

  # GetProjects:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-GetProjects
  #     CodeUri: ../app
  #     Handler: projects.get
  #     Runtime: nodejs6.10
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /projects
  #           Method: GET
  #           RestApiId: !Ref Api

  # Authorizer:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-Authorizer
  #     CodeUri: ../app
  #     Handler: members.authorize
  #     Runtime: nodejs6.10
  #     Timeout: 10
  #     Environment:
  #       Variables:
  #         API_DOMAIN: !Ref ApiDomain
  #         AUTH0_DOMAIN: !Ref Auth0Domain

  # AuthorizerInvocationRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: apigateway.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: AuthorizerInvocationPolicy
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action: lambda:InvokeFunction
  #               Resource:
  #                 - !GetAtt Authorizer.Arn

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StatesExecutionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-*

  Auth0ManagementClient:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupAuth0ManagementClientStateMachine
      Secret: !Ref Auth0ManagementClientSecret
      Bucket: !Ref SecretsBucket
      Path: !Sub auth0/manage.key

  RotateAndStoreAuth0ManagementSecret:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RotateAndStoreAuth0ManagementSecret
      CodeUri: ../app
      Handler: auth0.rotateAndStoreClientSecret
      Runtime: nodejs6.10
      Role: !Ref Auth0PutSecretRoleArn
      Environment:
        Variables:
          ENCRYPTION_KEY_ID: !Ref EncryptionKeyId
          AUTH0_DOMAIN: !Ref Auth0Domain
          AUTH0_CLIENT_ID: !Ref Auth0ManagementClientID
          AUTH0_SECRET_BUCKET: !Ref SecretsBucket
          AUTH0_SECRET_PATH: !Sub auth0/manage.key

  SetupAuth0ManagementClientStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupAuth0",
          "States": {
            "SetupAuth0": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckToSkipSetup",
                "States": {
                  "CheckToSkipSetup": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.ResourceProperties.Secret",
                        "StringEquals": "",
                        "Next": "Success"
                      }
                    ],
                    "Default": "ChooseEventType"
                  },
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "RotateAndStoreSecret"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "CheckIfSecretUpdated"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "DeleteSecret"
                      }
                    ]
                  },
                  "CheckIfSecretUpdated": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.OldResourceProperties.Secret",
                        "StringEquals": "${Auth0ManagementClientSecret}",
                        "Next": "Success"
                      }
                    ],
                    "Default": "RotateAndStoreSecret"
                  },
                  "RotateAndStoreSecret": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Secret",
                    "ResultPath": null,
                    "Resource": "${RotateAndStoreAuth0ManagementSecret.Arn}",
                    "Next": "Success"
                  },
                  "DeleteSecret": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": null,
                    "Resource": "${DeleteS3Secret.Arn}",
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  Auth0Api:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: Auth0ManagementClient
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupAuth0ApiStateMachine
      Audience: !Sub https://${ApiDomain}

  ManageAuth0Resource:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ManageAuth0Resource
      CodeUri: ../app
      Handler: auth0.manage
      Runtime: nodejs6.10
      Role: !Ref Auth0GetManagementSecretRoleArn
      Environment:
        Variables:
          AUTH0_DOMAIN: !Ref Auth0Domain
          AUTH0_CLIENT_ID: !Ref Auth0ManagementClientID
          AUTH0_SECRET_BUCKET: !Ref SecretsBucket
          AUTH0_SECRET_PATH: !Sub auth0/manage.key

  StoreAuth0Config:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-StoreAuth0Config
      CodeUri: ../app
      Handler: aws.putS3Object
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}/auth0/${AWS::StackName}-*

  RetrieveAuth0Config:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RetrieveAuth0Config
      CodeUri: ../app
      Handler: aws.getS3Object
      Runtime: nodejs6.10
      Policies:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}/auth0/${AWS::StackName}-*

  SetupAuth0ApiStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupAuth0Api",
          "States": {
            "SetupAuth0Api": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckCreate",
                "States": {
                  "CheckCreate": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "PassCreateApi"
                      }
                    ],
                    "Default": "PassRetrieveApiId"
                  },
                  "PassCreateApi": {
                    "Type": "Pass",
                    "Result": {
                      "method": "POST",
                      "endpoint": ["/resource-servers"],
                      "payload": {
                        "name": "${ApiDomain}",
                        "token_lifetime_for_web": ${Auth0UserTokenLifetime}
                      },
                      "datapath": "id"
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassAudienceCreateApi"
                  },
                  "PassAudienceCreateApi": {
                    "Type": "Pass",
                    "InputPath": "$.ResourceProperties.Audience",
                    "ResultPath": "$.ResourceProperties.Request.payload.identifier",
                    "Next": "CreateApi"
                  },
                  "CreateApi": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Request",
                    "ResultPath": "$.Data.Id",
                    "Resource": "${ManageAuth0Resource.Arn}",
                    "Next": "PassStoreApiId"
                  },
                  "PassStoreApiId": {
                    "Type": "Pass",
                    "Result": {
                      "Bucket": "${ArtifactsBucket}",
                      "Path": "auth0/${AWS::StackName}-api.id"
                    },
                    "ResultPath": "$.ResourceProperties.Store",
                    "Next": "PassBodyStoreApiId"
                  },
                  "PassBodyStoreApiId": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Store.Body",
                    "Next": "StoreApiId"
                  },
                  "StoreApiId": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Store",
                    "ResultPath": null,
                    "Resource": "${StoreAuth0Config.Arn}",
                    "Next": "Success"
                  },
                  "PassRetrieveApiId": {
                    "Type": "Pass",
                    "Result": {
                      "Bucket": "${ArtifactsBucket}",
                      "Path": "auth0/${AWS::StackName}-api.id"
                    },
                    "ResultPath": "$.ResourceProperties.Retrieve",
                    "Next": "RetrieveApiId"
                  },
                  "RetrieveApiId": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Retrieve",
                    "ResultPath": "$.Data.Id",
                    "Resource": "${RetrieveAuth0Config.Arn}",
                    "Next": "ChooseUpdateOrDelete"
                  },
                  "ChooseUpdateOrDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "And": [
                          {
                            "Variable": "$.RequestType",
                            "StringEquals": "Update"
                          },
                          {
                            "Variable": "$.OldResourceProperties.Audience",
                            "StringEquals": "https://${ApiDomain}"
                          }
                        ],
                        "Next": "PassUpdateApi"
                      }
                    ],
                    "Default": "PassDeleteApi"
                  },
                  "PassUpdateApi": {
                    "Type": "Pass",
                    "Result": {
                      "method": "PATCH",
                      "endpoint": ["/resource-servers", "/{id}"],
                      "payload": {
                        "name": "${ApiDomain}",
                        "token_lifetime_for_web": ${Auth0UserTokenLifetime}
                      },
                      "datapath": "null"
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassEndpointUpdateApi"
                  },
                  "PassEndpointUpdateApi": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Request.endpoint[1]",
                    "Next": "UpdateApi"
                  },
                  "UpdateApi": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Request",
                    "ResultPath": null,
                    "Resource": "${ManageAuth0Resource.Arn}",
                    "Next": "Success"
                  },
                  "PassDeleteApi": {
                    "Type": "Pass",
                    "Result": {
                      "method": "DELETE",
                      "endpoint": ["/resource-servers", "/{id}"]
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassEndpointDeleteApi"
                  },
                  "PassEndpointDeleteApi": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Request.endpoint[1]",
                    "Next": "DeleteApi"
                  },
                  "DeleteApi": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Request",
                    "ResultPath": null,
                    "Resource": "${ManageAuth0Resource.Arn}",
                    "Next": "CheckCreateAfterDelete"
                  },
                  "CheckCreateAfterDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "PassCreateApi"
                      }
                    ],
                    "Default": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  Auth0SPA:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: Auth0ManagementClient
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupAuth0ClientStateMachine
      Payload: !Sub |-
        {
          "name": "${WebDomain}",
          "app_type": "spa",
          "callbacks": [
            "https://${WebDomain}/login.html"
          ],
          "resource_servers": [{
            "identifier": "https://${ApiDomain}"
          }]
        }
      Id:
        Bucket: !Ref ArtifactsBucket
        Path: !Sub auth0/${AWS::StackName}-spa.id

  Auth0ApiTestClient:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: Auth0ManagementClient
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupAuth0ClientStateMachine
      Payload: !Sub |-
        {
          "name": "${ApiDomain} - Test",
          "app_type": "non_interactive",
          "resource_servers": [{
            "identifier": "https://${ApiDomain}"
          }]
        }
      Id:
        Bucket: !Ref ArtifactsBucket
        Path: !Sub auth0/${AWS::StackName}-api-test-client.id
      Secret:
        Bucket: !Ref SecretsBucket
        Path: !Sub auth0/${AWS::StackName}-api-test-client.key
        EncryptionKeyId: !Ref EncryptionKeyId

  CreateAuth0Client:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateAuth0Client
      CodeUri: ../app
      Handler: auth0.createClient
      Runtime: nodejs6.10
      Role: !Ref Auth0CreateClientRoleArn
      Environment:
        Variables:
          AUTH0_DOMAIN: !Ref Auth0Domain
          AUTH0_CLIENT_ID: !Ref Auth0ManagementClientID
          AUTH0_SECRET_BUCKET: !Ref SecretsBucket
          AUTH0_SECRET_PATH: !Sub auth0/manage.key

  SetupAuth0ClientStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupAuth0ClientWithSecret",
          "States": {
            "SetupAuth0ClientWithSecret": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "CheckCreate",
                "States": {
                  "CheckCreate": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Create",
                        "Next": "CreateClient"
                      }
                    ],
                    "Default": "RetrieveClientId"
                  },
                  "CreateClient": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "Resource": "${CreateAuth0Client.Arn}",
                    "ResultPath": "$.Data.Id",
                    "Next": "PassBodyStoreId"
                  },
                  "PassBodyStoreId": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Id.Body",
                    "Next": "StoreId"
                  },
                  "StoreId": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Id",
                    "ResultPath": null,
                    "Resource": "${StoreAuth0Config.Arn}",
                    "Next": "Success"
                  },
                  "RetrieveClientId": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Id",
                    "ResultPath": "$.Data.Id",
                    "Resource": "${RetrieveAuth0Config.Arn}",
                    "Next": "CheckUpdateOrDelete"
                  },
                  "CheckUpdateOrDelete": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Update",
                        "Next": "PassUpdateClient"
                      },
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "PassDeleteClient"
                      }
                    ]
                  },
                  "PassUpdateClient": {
                    "Type": "Pass",
                    "Result": {
                      "method": "PATCH",
                      "endpoint": ["/clients", "{id}"],
                      "datapath": "client_id"
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassUpdatePayload"
                  },
                  "PassUpdatePayload": {
                    "Type": "Pass",
                    "InputPath": "$.ResourceProperties.Payload",
                    "ResultPath": "$.ResourceProperties.Request.payload",
                    "Next": "PassEndpointUpdateOrDeleteClient"
                  },
                  "PassDeleteClient": {
                    "Type": "Pass",
                    "Result": {
                      "method": "DELETE",
                      "endpoint": ["/clients", "{id}"]
                    },
                    "ResultPath": "$.ResourceProperties.Request",
                    "Next": "PassEndpointUpdateOrDeleteClient"
                  },
                  "PassEndpointUpdateOrDeleteClient": {
                    "Type": "Pass",
                    "InputPath": "$.Data.Id",
                    "ResultPath": "$.ResourceProperties.Request.endpoint[1]",
                    "Next": "UpdateOrDeleteClient"
                  },
                  "UpdateOrDeleteClient": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.Request",
                    "Resource": "${ManageAuth0Resource.Arn}",
                    "ResultPath": null,
                    "Next": "Success"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  SetupSearchDomain:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupCustomResource.Arn
      StateMachine: !Ref SetupSearchDomainStateMachine
      SearchDomain: !Ref SearchDomain
      Fields: !Sub |-
        [
          {
            "IndexFieldName": "table",
            "IndexFieldType": "literal",
            "LiteralOptions": {
              "FacetEnabled": false,
              "SortEnabled": false,
              "ReturnEnabled": false
            }
          },
          {
            "IndexFieldName": "project_id",
            "IndexFieldType": "literal",
            "LiteralOptions": {
              "FacetEnabled": false,
              "SortEnabled": false
            }
          },
          {
            "IndexFieldName": "created_at",
            "IndexFieldType": "date",
            "DateOptions": {
              "FacetEnabled": false
            }
          },
          {
            "IndexFieldName": "creator_id",
            "IndexFieldType": "literal",
            "LiteralOptions": {
              "FacetEnabled": false,
              "SortEnabled": false
            }
          },
          {
            "IndexFieldName": "name",
            "IndexFieldType": "text",
            "TextOptions": {
              "SortEnabled": false,
              "HighlightEnabled": false
            }
          },
          {
            "IndexFieldName": "description",
            "IndexFieldType": "text",
            "TextOptions": {
              "SortEnabled": false,
              "HighlightEnabled": false
            }
          },
          {
            "IndexFieldName": "status",
            "IndexFieldType": "literal",
            "LiteralOptions": {
              "FacetEnabled": false,
              "SortEnabled": false
            }
          },
          {
            "IndexFieldName": "bucket",
            "IndexFieldType": "literal",
            "LiteralOptions": {
              "FacetEnabled": false,
              "SortEnabled": false
            }
          },
          {
            "IndexFieldName": "irb_id",
            "IndexFieldType": "literal",
            "LiteralOptions": {
              "FacetEnabled": false,
              "SortEnabled": false
            }
          }
        ]

  CloudSearchDefineIndexFields:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CloudSearchDefineIndexFields
      CodeUri: ../app
      Handler: search.defineIndexFields
      Runtime: nodejs6.10
      Timeout: 20
      Environment:
        Variables:
          SEARCH_STACK_SUFFIX: !FindInMap
            - StackMap
            - !Ref AWS::StackName
            - SearchStackSuffix
      Policies:
        Statement:
          - Effect: Allow
            Action: cloudsearch:DefineIndexField
            Resource:
              - !Sub arn:aws:cloudsearch:${AWS::Region}:${AWS::AccountId}:domain/${SearchDomain}

  CloudSearchIndexDocuments:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CloudSearchIndexDocuments
      CodeUri: ../app
      Handler: search.indexDocuments
      Runtime: nodejs6.10
      Timeout: 20
      Policies:
        Statement:
          - Effect: Allow
            Action: cloudsearch:IndexDocuments
            Resource:
              - !Sub arn:aws:cloudsearch:${AWS::Region}:${AWS::AccountId}:domain/${SearchDomain}

  CloudSearchDescribeDomain:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CloudSearchDescribeDomain
      CodeUri: ../app
      Handler: search.describeDomain
      Runtime: nodejs6.10
      Timeout: 20
      Policies:
        Statement:
          - Effect: Allow
            Action: cloudsearch:DescribeDomains
            Resource:
              - !Sub arn:aws:cloudsearch:${AWS::Region}:${AWS::AccountId}:domain/${SearchDomain}

  SetupSearchDomainStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "SetupSearchDomain",
          "States": {
            "SetupSearchDomain": {
              "Type": "Parallel",
              "Next": "Succeed",
              "Branches": [{
                "StartAt": "ChooseEventType",
                "States": {
                  "ChooseEventType": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.RequestType",
                        "StringEquals": "Delete",
                        "Next": "Success"
                      }
                    ],
                    "Default": "DefineIndexFields"
                  },
                  "DefineIndexFields": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties",
                    "ResultPath": "$.Data.State",
                    "Resource": "${CloudSearchDefineIndexFields.Arn}",
                    "Next": "CheckReindexDocuments"
                  },
                  "CheckReindexDocuments": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.Data.State",
                        "StringEquals": "RequiresIndexDocuments",
                        "Next": "IndexDocuments"
                      }
                    ],
                    "Default": "CheckActiveState"
                  },
                  "IndexDocuments": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.SearchDomain",
                    "ResultPath": null,
                    "Resource": "${CloudSearchIndexDocuments.Arn}",
                    "Next": "CheckActiveState"
                  },
                  "CheckActiveState": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.Data.State",
                        "StringEquals": "Active",
                        "Next": "Success"
                      }
                    ],
                    "Default": "Wait"
                  },
                  "Wait" : {
                    "Type": "Wait",
                    "Seconds": 15,
                    "Next": "DescribeDomain"
                  },
                  "DescribeDomain": {
                    "Type": "Task",
                    "InputPath": "$.ResourceProperties.SearchDomain",
                    "ResultPath": "$.Data",
                    "Resource": "${CloudSearchDescribeDomain.Arn}",
                    "Next": "CheckActiveState"
                  },
                  "Success": {
                    "Type": "Pass",
                    "ResultPath": "$.Status",
                    "Result": "SUCCESS",
                    "End": true
                  }
                }
              }],
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.Error",
                "Next": "PassReason"
              }]
            },
            "Succeed": {
              "InputPath": "$.[0]",
              "Type": "Pass",
              "Next": "End"
            },
            "PassReason": {
              "Type": "Pass",
              "InputPath": "$.Error.Cause",
              "ResultPath": "$.Reason",
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Pass",
              "ResultPath": "$.Status",
              "Result": "FAILED",
              "Next": "End"
            },
            "End": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "${SendCloudFormationResponse.Arn}",
              "End": true
            }
          }
        }

  # Api:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     StageName: Latest
  #     DefinitionBody:
  #       Fn::Transform:
  #         Name: AWS::Include
  #         Parameters:
  #           Location: !Sub s3://${TemplateURLBase}/swagger.yaml

  # ApiCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Ref ApiDomain

  # # ApiDomainName:
  # #   Type: AWS::ApiGateway::DomainName
  # #   Properties:
  # #     CertificateArn: !Ref ApiCertificate
  # #     DomainName: !Ref ApiDomain

  # ApiDomainName:
  #   Type: AWS::CloudFormation::CustomResource
  #   Properties:
  #     ServiceToken: !GetAtt SetupCustomResource.Arn
  #     StateMachine: !Ref SetupApiDomainNameStateMachine
  #     Domain:
  #       Name: !Ref ApiDomain
  #       Certificate: !Ref ApiCertificate

  # CreateApiDomainName:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-CreateApiDomainName
  #     CodeUri: ../app
  #     Handler: apig.createDomainName
  #     Runtime: nodejs6.10
  #     Timeout: 10
  #     Policies:
  #       Statement:
  #         - Effect: Allow
  #           Action: apigateway:POST
  #           Resource:
  #             - !Sub arn:aws:apigateway:${AWS::Region}::/domainnames
  #         - Effect: Allow
  #           Action: cloudfront:UpdateDistribution
  #           Resource: '*'

  # UpdateApiDomainName:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-UpdateApiDomainName
  #     CodeUri: ../app
  #     Handler: apig.updateDomainName
  #     Runtime: nodejs6.10
  #     Timeout: 10
  #     Policies:
  #       Statement:
  #         - Effect: Allow
  #           Action: apigateway:PATCH
  #           Resource:
  #             - !Sub arn:aws:apigateway:${AWS::Region}::/domainnames/${ApiDomain}
  #         - Effect: Allow
  #           Action: cloudfront:UpdateDistribution
  #           Resource: '*'

  # DeleteApiDomainName:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-DeleteApiDomainName
  #     CodeUri: ../app
  #     Handler: apig.deleteDomainName
  #     Runtime: nodejs6.10
  #     Timeout: 10
  #     Policies:
  #       Statement:
  #         - Effect: Allow
  #           Action: apigateway:DELETE
  #           Resource:
  #             - !Sub arn:aws:apigateway:${AWS::Region}::/domainnames/${ApiDomain}
  #         - Effect: Allow
  #           Action: cloudfront:DeleteDistribution
  #           Resource: '*'

  # SetupApiDomainNameStateMachine:
  #   Type: AWS::StepFunctions::StateMachine
  #   Properties:
  #     RoleArn: !GetAtt StatesExecutionRole.Arn
  #     DefinitionString: !Sub |-
  #       {
  #         "StartAt": "SetupApiCertificate",
  #         "States": {
  #           "SetupApiCertificate": {
  #             "Type": "Parallel",
  #             "Next": "Succeed",
  #             "Branches": [{
  #               "StartAt": "ChooseEventType",
  #               "States": {
  #                 "ChooseEventType": {
  #                   "Type": "Choice",
  #                   "Choices": [
  #                     {
  #                       "Variable": "$.RequestType",
  #                       "StringEquals": "Create",
  #                       "Next": "CreateApiDomainName"
  #                     },
  #                     {
  #                       "Variable": "$.RequestType",
  #                       "StringEquals": "Update",
  #                       "Next": "CheckReplaceDomainName"
  #                     },
  #                     {
  #                       "Variable": "$.RequestType",
  #                       "StringEquals": "Delete",
  #                       "Next": "DeleteApiDomainName"
  #                     }
  #                   ]
  #                 },
  #                 "CreateApiDomainName": {
  #                   "Type": "Task",
  #                   "InputPath": "$.ResourceProperties.Domain",
  #                   "ResultPath": "$.Data.DistributionDomainName",
  #                   "Resource": "${CreateApiDomainName.Arn}",
  #                   "Next": "Success"
  #                 },
  #                 "CheckReplaceDomainName": {
  #                   "Type": "Choice",
  #                   "Choices": [
  #                     {
  #                       "Variable": "$.OldResourceProperties.Domain.Name",
  #                       "StringEquals": "${ApiDomain}",
  #                       "Next": "DeleteOldApiDomainName"
  #                     }
  #                   ],
  #                   "Default": "UpdateApiDomainName"
  #                 },
  #                 "DeleteOldApiDomainName": {
  #                   "Type": "Task",
  #                   "InputPath": "$.OldResourceProperties.Domain.Name",
  #                   "ResultPath": null,
  #                   "Resource": "${DeleteApiDomainName.Arn}",
  #                   "Next": "CreateApiDomainName"
  #                 },
  #                 "UpdateApiDomainName": {
  #                   "Type": "Task",
  #                   "InputPath": "$.ResourceProperties.Domain",
  #                   "ResultPath": "$.Data.DistributionDomainName",
  #                   "Resource": "${UpdateApiDomainName.Arn}",
  #                   "Next": "Success"
  #                 },
  #                 "DeleteApiDomainName": {
  #                   "Type": "Task",
  #                   "InputPath": "$.ResourceProperties.Domain.Name",
  #                   "ResultPath": null,
  #                   "Resource": "${DeleteApiDomainName.Arn}",
  #                   "Next": "Success"
  #                 },
  #                 "Success": {
  #                   "Type": "Pass",
  #                   "ResultPath": "$.Status",
  #                   "Result": "SUCCESS",
  #                   "End": true
  #                 }
  #               }
  #             }],
  #             "Catch": [{
  #               "ErrorEquals": [ "States.ALL" ],
  #               "ResultPath": "$.Error",
  #               "Next": "PassReason"
  #             }]
  #           },
  #           "Succeed": {
  #             "InputPath": "$.[0]",
  #             "Type": "Pass",
  #             "Next": "End"
  #           },
  #           "PassReason": {
  #             "Type": "Pass",
  #             "InputPath": "$.Error.Cause",
  #             "ResultPath": "$.Reason",
  #             "Next": "Fail"
  #           },
  #           "Fail": {
  #             "Type": "Pass",
  #             "ResultPath": "$.Status",
  #             "Result": "FAILED",
  #             "Next": "End"
  #           },
  #           "End": {
  #             "Type": "Task",
  #             "ResultPath": null,
  #             "Resource": "${SendCloudFormationResponse.Arn}",
  #             "End": true
  #           }
  #         }
  #       }

  # ApiPathMapping:
  #   Type: AWS::ApiGateway::BasePathMapping
  #   DependsOn:
  #     - ApiDomainName
  #     - ApiLatestStage
  #   Properties:
  #     DomainName: !Ref ApiDomain
  #     RestApiId: !Ref Api
  #     Stage: Latest

  # ApiDnsRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     Name: !Ref ApiDomain
  #     Type: A
  #     HostedZoneId: !Ref DomainZone
  #     AliasTarget:
  #       DNSName: !GetAtt ApiDomainName.DistributionDomainName
  #       HostedZoneId: Z2FDTNDATAQYW2 # fixed value, per docs

  # ApiGetSpec:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-ApiGetSpec
  #     Role: !GetAtt LambdaBasicExecutionRole.Arn
  #     Handler: apig.getSpec
  #     Runtime: nodejs6.10
  #     Timeout: 10
  #     Environment:
  #       Variables:
  #         WEB_DOMAIN: !Ref WebDomain
  #     Code:
  #       S3Bucket: !Ref ArtifactsBucket
  #       S3Key: !Ref LambdaPackage

  # ApiGetSpecPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt ApiGetSpec.Arn
  #     Action: lambda:InvokeFunction
  #     Principal: apigateway.amazonaws.com
  #     SourceArn:
  #       !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/Latest/GET/

  # GenerateSignedCookiesPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt Web.Outputs.GenerateSignedCookiesArn
  #     Action: lambda:InvokeFunction
  #     Principal: apigateway.amazonaws.com
  #     SourceArn:
  #       !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/Latest/GET/weblogin

  # CreateDataset:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-CreateDataset
  #     CodeUri: ../app
  #     Handler: datasets.create
  #     Runtime: nodejs6.10
  #     Environment:
  #       Variables:
  #         DATASETS_TABLE: !Ref DatasetsTable
  #         WEB_DOMAIN: !Ref WebDomain
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /datasets
  #           Method: POST
  #           RestApiId: !Ref Api
  #     Policies:
  #       Statement:
  #         - Effect: Allow
  #           Action: dynamodb:PutItem
  #           Resource:
  #             - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DatasetsTable}

  CloudSearchUploadDocuments:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CloudSearchUploadDocuments
      CodeUri: ../app
      Handler: search.uploadDocuments
      Runtime: nodejs6.10
      Timeout: 30
      Environment:
        Variables:
          SEARCH_DOC_ENDPOINT: !GetAtt SetupSearchDomain.DocEndpoint
          SEARCH_STACK_SUFFIX: !FindInMap
            - StackMap
            - !Ref AWS::StackName
            - SearchStackSuffix
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:ListStreams
              - dynamodb:DescribeStream
              - dynamodb:GetShardIterator
              - dynamodb:GetRecords
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}-*/stream/*
          - Effect: Allow
            Action:
              - cloudsearch:document
            Resource:
              - !Sub arn:aws:cloudsearch:${AWS::Region}:${AWS::AccountId}:domain/${SearchDomain}

  DatasetsTableStreamMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt DatasetsTable.StreamArn
      FunctionName: !Ref CloudSearchUploadDocuments
      StartingPosition: TRIM_HORIZON
      BatchSize: 100

  ProjectsTableStreamMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt ProjectsTable.StreamArn
      FunctionName: !Ref CloudSearchUploadDocuments
      StartingPosition: TRIM_HORIZON
      BatchSize: 100

  # ListDatasets:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-ListDatasets
  #     CodeUri: ../app
  #     Handler: datasets.list
  #     Runtime: nodejs6.10
  #     Environment:
  #       Variables:
  #         SEARCH_QUERY_ENDPOINT: !GetAtt SetupSearchDomain.QueryEndpoint
  #         SEARCH_STACK_SUFFIX: !FindInMap
  #           - StackMap
  #           - !Ref AWS::StackName
  #           - SearchStackSuffix
  #         WEB_DOMAIN: !Ref WebDomain
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /datasets
  #           Method: GET
  #           RestApiId: !Ref Api
  #     Policies:
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - cloudsearch:search
  #           Resource:
  #             - !Sub arn:aws:cloudsearch:${AWS::Region}:${AWS::AccountId}:domain/${SearchDomain}

  # GetDataset:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-GetDataset
  #     CodeUri: ../app
  #     Handler: apig.proxy
  #     Runtime: nodejs6.10
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /datasets/{dataset_id}
  #           Method: GET
  #           RestApiId: !Ref Api

  # PatchDataset:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-PatchDataset
  #     CodeUri: ../app
  #     Handler: apig.proxy
  #     Runtime: nodejs6.10
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /datasets/{dataset_id}
  #           Method: PATCH
  #           RestApiId: !Ref Api

  # DeleteDataset:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-DeleteDataset
  #     CodeUri: ../app
  #     Handler: apig.proxy
  #     Runtime: nodejs6.10
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /datasets/{dataset_id}
  #           Method: DELETE
  #           RestApiId: !Ref Api

  DatasetsAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt RequestDatasetCredentialsRole.Arn
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DatasetsAccessRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${DatasetsBucket}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${DatasetsBucket}/*

  RequestDatasetCredentialsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RequestDatasetCredentialsRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DatasetsTable}

  # RequestDatasetCredentials:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-RequestDatasetCredentials
  #     CodeUri: ../app
  #     Handler: datasets.requestCredentials
  #     Runtime: nodejs6.10
  #     Environment:
  #       Variables:
  #         DATASETS_TABLE: !Ref DatasetsTable
  #         DATASETS_BUCKET: !Ref DatasetsBucket
  #         DATASETS_ROLE: !GetAtt DatasetsAccessRole.Arn
  #         WEB_DOMAIN: !Ref WebDomain
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /datasets/{dataset_id}/credentials
  #           Method: POST
  #           RestApiId: !Ref Api
  #     Role: !GetAtt RequestDatasetCredentialsRole.Arn

  # SetDatasetStorage:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-SetDatasetStorage
  #     CodeUri: ../app
  #     Handler: datasets.setStorage
  #     Runtime: nodejs6.10
  #     Timeout: 30
  #     MemorySize: 1024
  #     Environment:
  #       Variables:
  #         DATASETS_TABLE: !Ref DatasetsTable
  #         DATASETS_BUCKET: !Ref DatasetsBucket
  #         WEB_DOMAIN: !Ref WebDomain
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /datasets/{dataset_id}/storage
  #           Method: PUT
  #           RestApiId: !Ref Api
  #     Policies:
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - s3:ListBucket
  #           Resource:
  #             - !Sub arn:aws:s3:::${DatasetsBucket}
  #         - Effect: Allow
  #           Action:
  #             - s3:PutObjectTagging
  #           Resource:
  #             - !Sub arn:aws:s3:::${DatasetsBucket}/*
  #         - Effect: Allow
  #           Action:
  #             - dynamodb:UpdateItem
  #           Resource:
  #             - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DatasetsTable}

  # CreateProject:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-CreateProject
  #     CodeUri: ../app
  #     Handler: projects.create
  #     Runtime: nodejs6.10
  #     Environment:
  #       Variables:
  #         PROJECTS_TABLE: !Ref ProjectsTable
  #         DATASETS_BUCKET: !Ref DatasetsBucket
  #         LOGS_BUCKET: !Sub arn:aws:s3:::${LogsBucket}
  #         WEB_DOMAIN: !Ref WebDomain
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /projects
  #           Method: POST
  #           RestApiId: !Ref Api
  #     Policies:
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - s3:PutAnalyticsConfiguration
  #           Resource:
  #             - !Sub arn:aws:s3:::${DatasetsBucket}
  #         - Effect: Allow
  #           Action:
  #             - dynamodb:PutItem
  #           Resource:
  #             - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProjectsTable}

  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplateURLBase}/vpc.yaml
      Parameters:
        BackendStack: !Ref AWS::StackName
        SetupCustomResourceArn: !GetAtt SetupCustomResource.Arn
        SendCloudFormationResponseArn: !GetAtt SendCloudFormationResponse.Arn
        ArtifactsBucket: !Ref ArtifactsBucket
        LambdaPackage: !Ref LambdaPackage
        VpcRange: !Ref VpcRange

  Batch:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplateURLBase}/batch.yaml
      Parameters:
        BackendStack: !Ref AWS::StackName
        SetupCustomResourceArn: !GetAtt SetupCustomResource.Arn
        SendCloudFormationResponseArn: !GetAtt SendCloudFormationResponse.Arn
        ArtifactsBucket: !Ref ArtifactsBucket
        LambdaPackage: !Ref LambdaPackage
        SubnetIds: !GetAtt VPC.Outputs.SubnetIds
        SecurityGroup: !GetAtt VPC.Outputs.DefaultSecurityGroup
        ClusterCores: !Ref ClusterCores
        SpotBidPercent: !Ref SpotBidPercent
        SSHKeyName: !GetAtt Instances.Outputs.SSHKeyName

  Instances:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplateURLBase}/instances.yaml
      Parameters:
        BackendStack: !Ref AWS::StackName
        SetupCustomResourceArn: !GetAtt SetupCustomResource.Arn
        SendCloudFormationResponseArn: !GetAtt SendCloudFormationResponse.Arn
        ArtifactsBucket: !Ref ArtifactsBucket
        SecretsBucket: !Ref SecretsBucket
        LambdaPackage: !Ref LambdaPackage
        SubnetIds: !GetAtt VPC.Outputs.SubnetIds
        SecurityGroup: !GetAtt VPC.Outputs.DefaultSecurityGroup
        EncryptionKeyId: !Ref EncryptionKeyId
        SSHKeyPutRoleArn: !Ref SSHKeyPutRoleArn
        SSHKeyGetRoleArn: !Ref SSHKeyGetRoleArn

  # Web:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub https://s3.amazonaws.com/${TemplateURLBase}/web.yaml
  #     Parameters:
  #       BackendStack: !Ref AWS::StackName
  #       SetupCustomResourceArn: !GetAtt SetupCustomResource.Arn
  #       SendCloudFormationResponseArn: !GetAtt SendCloudFormationResponse.Arn
  #       ArtifactsBucket: !Ref ArtifactsBucket
  #       SecretsBucket: !Ref SecretsBucket
  #       WebBucket: !Ref WebBucket
  #       LambdaPackage: !Ref LambdaPackage
  #       EncryptionKeyId: !Ref EncryptionKeyId
  #       DomainZone: !Ref DomainZone
  #       WebDomain: !Ref WebDomain
  #       WebTTL: !Ref WebTTL
  #       WebPriceClass: !Ref WebPriceClass
  #       WebLocations: !Ref WebLocations
  #       WebACL: !Ref WebACL
  #       WebSigningKeyPutRoleArn: !Ref WebSigningKeyPutRoleArn
  #       WebSigningKeyGetRoleArn: !Ref WebSigningKeyGetRoleArn
  #       DeleteS3SecretArn: !GetAtt DeleteS3Secret.Arn

Outputs:
  DatasetsTable:
    Value: !Ref DatasetsTable
