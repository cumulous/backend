swagger: '2.0'
info:
  title: Backend API
  version: '1'
schemes:
  - https
produces:
  - application/json

paths:
  /:
    options:
      tags:
        - Spec
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
            Vary:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin: stageVariables.CorsOrigin
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Vary: "'Accept-Encoding'"
    get:
      summary: Retrieve the API spec
      description: Returns the current specification of this API.
      operationId: getApi
      security:
        - member_token: []
      tags:
        - Spec
      parameters:
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: OpenAPI/Swagger 2.0 definition of this API.
          schema:
            $ref: '#/definitions/Spec'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-GetApi/invocations
  /weblogin:
    options:
      tags:
        - Web
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin: stageVariables.CorsOrigin
              method.response.header.Access-Control-Allow-Credentials: "'true'"
    get:
      summary: Set website cookies
      description: Sets browser cookies for accessing protected content on the website.
      operationId: weblogin
      security:
        - member_token: []
      tags:
        - Web
      parameters:
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Set-Cookie headers for accessing the website
          headers:
            Set-Cookie:
              description: '"CloudFront-Expires" header'
              type: string
            Set-cookie:
              description: '"CloudFront-Key-Pair-Id" header'
              type: string
            set-cookie:
              description: '"CloudFront-Signature" header'
              type: string
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-GenerateSignedCookies/invocations
  /projects:
    options:
      tags:
        - Projects
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin: stageVariables.CorsOrigin
              method.response.header.Access-Control-Allow-Credentials: "'true'"
    post:
      summary: Create a project
      description: |
        Defines a new project.
      operationId: createProject
      security:
        - member_token: []
      tags:
        - Projects
      parameters:
        - $ref: '#/parameters/ProjectCreationRequest'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Properties of the created project
          schema:
            $ref: '#/definitions/Project'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-CreateProject/invocations
    get:
      summary: Search projects
      description: |
        Returns a list of projects for the current member,
        filtered by optional parameters.

        **requires scopes:
        *projects:describe*,
        *projects:describe_details (conditional)*
        **
      operationId: listProjects
      security:
        - member_token: []
      tags:
        - Projects
      parameters:
        - $ref: '#/parameters/ProjectsQueryNameContains'
        - $ref: '#/parameters/ProjectsQueryIsMember'
        - $ref: '#/parameters/ProjectsQueryIsHidden'
        - $ref: '#/parameters/ProjectsQueryStatus'
        - $ref: '#/parameters/QueryPaginationOffset'
        - $ref: '#/parameters/QueryPaginationLimit'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: List of projects
          schema:
            $ref: '#/definitions/ListOfProjects'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-GetProjects/invocations
  /datasets:
    options:
      tags:
        - Datasets
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
            Vary:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin: stageVariables.CorsOrigin
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Vary: "'Accept-Encoding'"
    post:
      summary: Create a dataset
      description: |
        Defines a new dataset.
      operationId: createDataset
      security:
        - member_token: []
      tags:
        - Datasets
      parameters:
        - $ref: '#/parameters/DatasetCreationRequest'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Properties of the created dataset
          schema:
            $ref: '#/definitions/Dataset'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-CreateDataset/invocations
    get:
      summary: Get a list of datasets
      description: |
        Returns a list of datasets for the current member,
        filtered by optional parameters.
      operationId: listDatasets
      security:
        - member_token: []
      tags:
        - Datasets
      parameters:
        - $ref: '#/parameters/DatasetsQueryStatus'
        - $ref: '#/parameters/QueryDescriptionContains'
        - $ref: '#/parameters/QueryProjectId'
        - $ref: '#/parameters/QuerySort'
        - $ref: '#/parameters/QueryPaginationOffset'
        - $ref: '#/parameters/QueryPaginationLimit'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: List of datasets
          schema:
            $ref: '#/definitions/ListOfDatasets'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-ListDatasets/invocations
  /datasets/{dataset_id}:
    options:
      tags:
        - Datasets
      parameters:
        - $ref: '#/parameters/DatasetId'
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
            Vary:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin: stageVariables.CorsOrigin
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Vary: "'Accept-Encoding'"
    get:
      summary: Get properties of a dataset
      description: |
        Returns dataset object for a specified ID
      operationId: getDataset
      security:
        - member_token: []
      tags:
        - Datasets
      parameters:
        - $ref: '#/parameters/DatasetId'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Dataset
          schema:
            $ref: '#/definitions/Dataset'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-GetDataset/invocations
    patch:
      summary: Modify properties of a dataset
      description: |
        Modifies select properties of a dataset
      operationId: modifyDataset
      security:
        - member_token: []
      tags:
        - Datasets
      parameters:
        - $ref: '#/parameters/DatasetId'
        - $ref: '#/parameters/DatasetModificationRequest'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Modified dataset
          schema:
            $ref: '#/definitions/Dataset'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-ModifyDataset/invocations
    delete:
      summary: Delete a dataset
      description: |
        Schedules complete deletion of a dataset.

        Marks dataset status as _Deleting_ until completed.
      operationId: deleteDataset
      security:
        - member_token: []
      tags:
        - Datasets
      parameters:
        - $ref: '#/parameters/DatasetId'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Status of the dataset scheduled for deletion
          schema:
            $ref: '#/definitions/DatasetDeleting'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-DeleteDataset/invocations
  /datasets/{dataset_id}/credentials:
    options:
      tags:
        - Datasets
      parameters:
        - $ref: '#/parameters/DatasetId'
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
            Vary:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin: stageVariables.CorsOrigin
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Vary: "'Accept-Encoding'"
    post:
      summary: Request credentials for dataset access
      description: |
        Returns temporary credentials to access the dataset storage on S3
      operationId: requestDatasetCredentials
      security:
        - member_token: []
      tags:
        - Datasets
      parameters:
        - $ref: '#/parameters/DatasetId'
        - $ref: '#/parameters/DatasetCredentialsRequest'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Temporary credentials for dataset access
          schema:
            $ref: '#/definitions/DatasetCredentialsResponse'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-RequestDatasetCredentials/invocations
  /datasets/{dataset_id}/storage:
    options:
      tags:
        - Datasets
      parameters:
        - $ref: '#/parameters/DatasetId'
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
            Vary:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin: stageVariables.CorsOrigin
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Vary: "'Accept-Encoding'"
    put:
      summary: Set dataset storage options
      description: |
        Makes the dataset either _available_ for analysis/download, or _archived_.
        This method **must** be called to confirm a successful upload, or to
        restore the dataset from archive before processing it.

        _available_ may only be set when the dataset status is _'uploading'_,
        _'archived'_, or already _'available'_;
        _archived_ - when the status is _'available'_ or already _'archived'_.
      operationId: setDatasetStorage
      security:
        - member_token: []
      tags:
        - Datasets
      parameters:
        - $ref: '#/parameters/DatasetId'
        - $ref: '#/parameters/DatasetStorageRequest'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Dataset storage options
          schema:
            $ref: '#/definitions/DatasetStorageResponse'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-SetDatasetStorage/invocations
  /pipelines:
    options:
      tags:
        - Pipelines
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
            Vary:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin: stageVariables.CorsOrigin
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Vary: "'Accept-Encoding'"
    post:
      summary: Create a pipeline
      description: |
        Defines a new computational pipeline or a new version of a pipeline.
      operationId: createPipeline
      security:
        - member_token: []
      tags:
        - Pipelines
      parameters:
        - $ref: '#/parameters/PipelineCreationRequest'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Properties of the created pipeline
          schema:
            $ref: '#/definitions/Pipeline'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-CreatePipeline/invocations
  /analyses:
    options:
      tags:
        - Analyses
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
            Vary:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin: stageVariables.CorsOrigin
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Vary: "'Accept-Encoding'"
    post:
      summary: Create an analysis
      description: |
        Creates a new analysis. This action doesn't schedule any
        computational pipelines. It only allocates storage space to run
        one or more pipelines, and stores general information about
        the purpose of analyzing the data.

        Use [POST /analyses/{analysis_id}/execution](#executeAnalysis) to schedule a pipeline.
      operationId: createAnalysis
      security:
        - member_token: []
      tags:
        - Analyses
      parameters:
        - $ref: '#/parameters/AnalysisCreationRequest'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Properties of the created analysis
          schema:
            $ref: '#/definitions/Analysis'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-CreateAnalysis/invocations
    get:
      summary: Get a list of analyses
      description: |
        Returns a list of analyses for the current member,
        filtered by optional parameters.
      operationId: listAnalyses
      security:
        - member_token: []
      tags:
        - Analyses
      parameters:
        - $ref: '#/parameters/AnalysesQueryStatus'
        - $ref: '#/parameters/QueryDescriptionContains'
        - $ref: '#/parameters/QueryProjectId'
        - $ref: '#/parameters/QuerySort'
        - $ref: '#/parameters/QueryPaginationOffset'
        - $ref: '#/parameters/QueryPaginationLimit'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: List of analyses
          schema:
            $ref: '#/definitions/ListOfAnalyses'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-ListAnalyses/invocations
  /analyses/{analysis_id}/execution:
    options:
      tags:
        - Analyses
      parameters:
        - $ref: '#/parameters/AnalysisId'
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
            Vary:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin: stageVariables.CorsOrigin
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Vary: "'Accept-Encoding'"
    post:
      summary: Execute analysis
      description: |
        Schedules execution of a computational pipeline for the given analysis.
        Only one pipeline may be run at a time, but several different (or identical)
        pipelines may be executed in succession.

        The data generated in one execution is available to all of the subsequent
        executions, unless they overwrite it.
      operationId: executeAnalysis
      security:
        - member_token: []
      tags:
        - Analyses
      parameters:
        - $ref: '#/parameters/AnalysisId'
        - $ref: '#/parameters/AnalysisExecutionRequest'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Properties of the submitted execution
          schema:
            $ref: '#/definitions/AnalysisExecution'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-Analyses-SubmitExecution/invocations
    delete:
      summary: Cancel an analysis
      description: |
        Cancel execution of a computational pipeline for the given analysis.
      operationId: cancelAnalysis
      security:
        - member_token: []
      tags:
        - Analyses
      parameters:
        - $ref: '#/parameters/AnalysisId'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Properties of the canceled execution
          schema:
            $ref: '#/definitions/AnalysisExecution'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: ${API_LAMBDA_PREFIX}-Analyses-CancelExecution/invocations

definitions:
  Spec:
    type: object
  Project:
    required:
      - id
      - name
      - created_at
      - created_by
      - status
    properties:
      id:
        $ref: '#/definitions/ProjectId'
      name:
        $ref: '#/definitions/ProjectName'
      description:
        $ref: '#/definitions/Description'
      created_at:
        $ref: '#/definitions/Date'
      created_by:
        $ref: '#/definitions/ProjectMemberId'
      status:
        $ref: '#/definitions/ProjectStatus'
  ProjectId:
    description: Unique identifier for a project
    type: string
    format: uuid
  ProjectName:
    description: Project name
    type: string
    pattern: ^[\w-., ]{1,100}$
  ProjectStatus:
    description: Project status
    type: string
    enum:
      - active
      - removed
  ListOfProjects:
    type: object
    properties:
      projects:
        type: array
        items:
          $ref: '#/definitions/Project'
      next:
        $ref: '#/definitions/PaginationNext'
  ProjectMemberId:
    description: Unique identifier for a project member
    type: string
    format: uuid
  Dataset:
    required:
      - id
      - project_id
      - created_at
      - created_by
      - status
    properties:
      id:
        $ref: '#/definitions/DatasetId'
      project_id:
        $ref: '#/definitions/ProjectId'
      created_at:
        $ref: '#/definitions/Date'
      created_by:
        $ref: '#/definitions/ProjectMemberId'
      description:
        $ref: '#/definitions/Description'
      status:
        $ref: '#/definitions/DatasetStatus'
      metadata:
        $ref: '#/definitions/DatasetMetadata'
  DatasetId:
    description: Unique identifier for a dataset
    type: string
    format: uuid
  DatasetStatus:
    description: Project status
    type: string
    enum:
      - created
      - uploading
      - available
      - archived
      - removing
      - removed
      - deleting
      - deleted
  DatasetMetadata:
    description: Additional information on the dataset
    type: object
    additionalProperties:
      type: string
      maxLength: 100
  Bucket:
    description: Name of S3 storage bucket
    type: string
    pattern: ^[a-z0-9][a-z0-9-]*[a-z0-9](\.[a-z0-9][a-z0-9-]*[a-z0-9])*$
    minLength: 3
    maxLength: 63
  ListOfDatasets:
    type: object
    required:
      - offset
      - items
    properties:
      offset:
        $ref: '#/definitions/PaginationOffset'
      items:
        type: array
        items:
          $ref: '#/definitions/Dataset'
      next:
        $ref: '#/definitions/PaginationNext'
  DatasetDeleting:
    required:
      - id
      - status
    properties:
      id:
        $ref: '#/definitions/DatasetId'
      status:
        $ref: '#/definitions/DatasetStatus'
  DatasetCredentialsAction:
    description: Action for dataset credentials
    type: string
    enum:
      - upload
      - download
  DatasetCredentialsResponse:
    required:
      - id
      - action
      - credentials
      - expires_at
      - bucket
      - prefix
    additionalProperties: false
    properties:
      id:
        $ref: '#/definitions/DatasetId'
      action:
        $ref: '#/definitions/DatasetCredentialsAction'
      credentials:
        $ref: '#/definitions/AwsCredentials'
      expires_at:
        $ref: '#/definitions/Date'
      bucket:
        $ref: '#/definitions/Bucket'
      prefix:
        $ref: '#/definitions/DatasetPrefix'
  DatasetPrefix:
    description: Prefix for storing a dataset
    type: string
    pattern: ^[\w-/]{1,64}$
  DatasetStorageType:
    description: Dataset storage type
    type: string
    enum:
      - available
      - archived
  DatasetStorageResponse:
    required:
      - id
      - type
    properties:
      id:
        $ref: '#/definitions/DatasetId'
      type:
        $ref: '#/definitions/DatasetStorageType'
  Pipeline:
    required:
      - id
      - name
      - datasets
      - steps
      - status
      - created_at
      - created_by
    properties:
      id:
        $ref: '#/definitions/PipelineId'
      name:
        $ref: '#/definitions/PipelineName'
      datasets:
        $ref: '#/definitions/PipelineDatasets'
      steps:
        $ref: '#/definitions/PipelineSteps'
      status:
        $ref: '#/definitions/PipelineStatus'
      created_at:
        $ref: '#/definitions/Date'
      created_by:
        $ref: '#/definitions/ProjectMemberId'
      description:
        $ref: '#/definitions/Description'
  PipelineId:
    description: Unique identifier for a pipeline
    type: string
    format: uuid
  PipelineName:
    description: Pipeline name
    type: string
    pattern: ^[\w-. ]{1,100}$
  PipelineDatasets:
    description: Map of datasets used in the pipeline
    type: object
    additionalProperties:
       $ref: '#/definitions/PipelineDataset'
  PipelineDataset:
    description: Dataset ID used in the pipeline (if any)
    type: string
    format: uuid
  PipelineSteps:
    description: List of steps comprising the pipeline
    type: array
    minItems: 1
    maxItems: 100
    items:
       $ref: '#/definitions/PipelineStep'
  PipelineStep:
    description: Step of the pipeline
    required:
      - app
      - args
    additionalProperties: false
    properties:
      app:
        $ref: '#/definitions/AppName'
      args:
        $ref: '#/definitions/AppArgs'
      cores:
        $ref: '#/definitions/StepCores'
      memory:
        $ref: '#/definitions/StepMemory'
  AppName:
    description: Name and optionally version of an app executed in a pipeline
    type: string
    pattern: ^[a-z0-9]+(:[0-9][.0-9a-z]*)?$
    maxLength: 50
  AppArgs:
    description: Arguments for an app executed in a pipeline
    type: string
    pattern: ^(?=((\[d:\/\w{1,50}\/\]|\[d:(\/\w{1,50}\/)?\w[\w-. ]*(\/\w[\w-. ]*)*\/?\]|\[i:(\/\w{1,50}\/)?\w[\w-. ]*(\/\w[\w-. ]*)*\]|\[o:\w[\w-. ]*(\/\w[\w-. ]*)*\]|[\w-. :=]+)+))\1$
    maxLength: 1000
  StepCores:
    description: Minimum number of virtual cores required by a step in a pipeline
    type: integer
    minimum: 1
    default: 1
    maximum: 64
  StepMemory:
    description: |
      Maximum amount of memory (GB = 1000 MB) consumed by a step in a pipeline
    type: number
    minimum: 0.5
    default: 2
    maximum: 480
  PipelineStatus:
    description: Pipeline status
    type: string
    enum:
      - active
      - deprecated
  Analysis:
    required:
      - id
      - project_id
      - status
      - created_at
      - created_by
    properties:
      id:
        $ref: '#/definitions/AnalysisId'
      project_id:
        $ref: '#/definitions/ProjectId'
      description:
        $ref: '#/definitions/Description'
      status:
        $ref: '#/definitions/AnalysisStatus'
      pipeline_id:
        $ref: '#/definitions/PipelineId'
      jobs:
        $ref: '#/definitions/AnalysisJobStatuses'
      error:
        $ref: '#/definitions/AnalysisError'
      created_at:
        $ref: '#/definitions/Date'
      created_by:
        $ref: '#/definitions/ProjectMemberId'
  AnalysisId:
    description: Unique identifier of an analysis
    type: string
    format: uuid
  AnalysisStatus:
    description: Analysis status
    type: string
    enum:
      - created
      - submitted
      - pending
      - running
      - canceling
      - failing
      - failed
      - succeeded
      - archiving
      - archived
      - removing
      - removed
      - deleting
  AnalysisError:
    description: Cause of analysis failure, if any
    type: string
  ListOfAnalyses:
    type: object
    required:
      - offset
      - items
    properties:
      offset:
        $ref: '#/definitions/PaginationOffset'
      items:
        type: array
        items:
          $ref: '#/definitions/Analysis'
      next:
        $ref: '#/definitions/PaginationNext'
  AnalysisExecution:
    required:
      - analysis_id
      - pipeline_id
      - datasets
      - status
    additionalProperties: false
    properties:
      analysis_id:
        $ref: '#/definitions/AnalysisId'
      pipeline_id:
        $ref: '#/definitions/PipelineId'
      datasets:
        $ref: '#/definitions/PipelineDatasets'
      status:
        $ref: '#/definitions/AnalysisStatus'
  AnalysisJobStatuses:
    description: List of statuses of the jobs executed for an analysis
    type: array
    items:
      $ref: '#/definitions/AnalysisJobStatus'
  AnalysisJobStatus:
    description: Status of a job executed for an analysis
    type: string
    enum:
      - submitted
      - pending
      - runnable
      - starting
      - running
      - succeeded
      - failed
  Description:
    type: string
    pattern: ^[\w-.,;?! ]{1,1000}$
  AwsCredentials:
    required:
      - access_key_id
      - secret_access_key
      - session_token
    properties:
      access_key_id:
        type: string
        pattern: ^[\w]{16,128}$
      secret_access_key:
        type: string
      session_token:
        type: string
  PaginationOffset:
    type: integer
    minimum: 0
  PaginationNext:
    type: integer
    minimum: 1
  Date:
    type: string
    format: date-time

parameters:
  ProjectsQueryNameContains:
    in: query
    name: name_contains
    description: part of project name, case-insensitive
    type: string
    pattern: ^[\w-., ]{1,100}$
  ProjectsQueryIsMember:
    in: query
    name: is_member
    description: filter projects by requester's membership
    type: boolean
  ProjectsQueryIsHidden:
    in: query
    name: is_hidden
    description: |
      filter by project 'hidden' flag

      **requires scope:
      *projects:describe_details*
      **
    type: boolean
  ProjectsQueryStatus:
    in: query
    name: status
    description: filter by project status
    type: string
    enum:
      - active
      - removed
  ProjectCreationRequest:
    in: body
    name: ProjectCreationRequest
    description: Properties of the project to be created
    required: true
    schema:
      required:
        - name
      additionalProperties: false
      properties:
        name:
          $ref: '#/definitions/ProjectName'
        description:
          $ref: '#/definitions/Description'
  QueryProjectId:
    in: query
    name: project_id
    description: Filter by project ID
    type: string
    format: uuid
  DatasetCreationRequest:
    in: body
    name: DatasetCreationRequest
    description: Properties of the dataset to be created
    required: true
    schema:
      required:
        - project_id
      additionalProperties: false
      properties:
        project_id:
          $ref: '#/definitions/ProjectId'
        description:
          $ref: '#/definitions/Description'
        metadata:
          $ref: '#/definitions/DatasetMetadata'
  DatasetsQueryStatus:
    in: query
    name: status
    description: Filter by dataset status
    type: string
    enum:
      - created
      - uploading
      - available
      - archived
      - removing
      - removed
      - deleting
      - deleted
  DatasetId:
    in: path
    name: dataset_id
    description: Unique identifier for a dataset
    required: true
    type: string
    format: uuid
  DatasetModificationRequest:
    in: body
    name: DatasetModificationRequest
    description: Dataset properties to be modified
    required: true
    schema:
      additionalProperties: false
      properties:
        description:
          $ref: '#/definitions/Description'
        metadata:
          $ref: '#/definitions/DatasetMetadata'
  DatasetCredentialsRequest:
    in: body
    name: DatasetCredentialsRequest
    description: Request for dataset credentials
    required: true
    schema:
      required:
        - action
      additionalProperties: false
      properties:
        action:
          $ref: '#/definitions/DatasetCredentialsAction'
  DatasetStorageRequest:
    in: body
    name: DatasetStorageRequest
    description: Dataset storage options
    required: true
    schema:
      required:
        - type
      additionalProperties: false
      properties:
        type:
          $ref: '#/definitions/DatasetStorageType'
  PipelineCreationRequest:
    in: body
    name: PipelineCreationRequest
    description: Properties of the pipeline to be created
    required: true
    schema:
      required:
        - name
        - datasets
        - steps
      additionalProperties: false
      properties:
        name:
          $ref: '#/definitions/PipelineName'
        datasets:
          $ref: '#/definitions/PipelineDatasets'
        steps:
          $ref: '#/definitions/PipelineSteps'
        description:
          $ref: '#/definitions/Description'
  AnalysisCreationRequest:
    in: body
    name: AnalysisCreationRequest
    description: Properties of the analysis to be created
    required: true
    schema:
      required:
        - project_id
      additionalProperties: false
      properties:
        project_id:
          $ref: '#/definitions/ProjectId'
        description:
          $ref: '#/definitions/Description'
  AnalysesQueryStatus:
    in: query
    name: status
    description: Filter by analysis status
    type: string
    enum:
      - created
      - submitted
      - pending
      - running
      - failing
      - failed
      - succeeded
      - archiving
      - archived
      - removing
      - removed
      - deleting
  AnalysisId:
    in: path
    name: analysis_id
    description: Unique identifier for an analysis
    required: true
    type: string
    format: uuid
  AnalysisExecutionRequest:
    in: body
    name: AnalysisExecutionRequest
    description: Parameters for execution of an analysis
    required: true
    schema:
      required:
        - pipeline_id
        - datasets
      additionalProperties: false
      properties:
        pipeline_id:
          $ref: '#/definitions/PipelineId'
        datasets:
          $ref: '#/definitions/PipelineDatasets'
  QueryDescriptionContains:
    in: query
    name: description_contains
    description: Part of an item description (case-insensitive)
    type: string
    pattern: ^[\w-., ]{1,200}$
  QuerySort:
    in: query
    name: sort
    description: Sort by select attributes in specific order
    type: string
    pattern: ^created_at:(asc|desc)$
    default: 'created_at:desc'
  QueryPaginationOffset:
    in: query
    name: offset
    description: Starting index for pagination
    type: integer
    minimum: 0
    default: 0
  QueryPaginationLimit:
    in: query
    name: limit
    description: Maximum number of paginated results
    type: integer
    minimum: 1
    default: 10
  CompressionRequest:
    in: header
    name: Accept-Encoding
    type: string
    pattern: (deflate|gzip|\*)?
    maxLength: 64

x-amazon-apigateway-binary-media-types:
  - '*/*'

securityDefinitions:
  member_token:
    type: apiKey
    in: header
    name: Authorization
    x-amazon-apigateway-authtype: custom
    x-amazon-apigateway-authorizer:
      type: token
      authorizerUri: ${API_LAMBDA_PREFIX}-Authorizer/invocations
      authorizerCredentials: ${AUTHORIZER_INVOCATION_ROLE_ARN}
      identityValidationExpression: '^[\w-]{100,200}\.[\w-]{200,400}\.[\w-]{300,600}$'
      authorizerResultTtlInSeconds: 60
