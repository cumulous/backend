swagger: '2.0'
info:
  title: Backend API
  version: '1'
schemes:
  - https

paths:
  /:
    get:
      summary: Retrieve the API spec
      description: Returns the current specification of this API.
      security:
        - member_token: []
      tags:
        - Spec
      produces:
        - application/json
      responses:
        200:
          description: OpenAPI/Swagger 2.0 definition of this API.
          schema:
            type: object
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApi.Arn}/invocations
  /weblogin:
    options:
      responses:
        200:
          description: CORS headers
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin: "'${WebDomain}'"
    post:
      summary: Set website cookies
      description: Sets browser cookies for accessing protected content on the website.
      security:
        - member_token: []
      tags:
        - Web
      responses:
        200:
          description: Set-Cookie headers for accessing the website
          headers:
            Set-Cookie:
              description: '"CloudFront-Expires" header'
              type: string
            Set-cookie:
              description: '"CloudFront-Key-Pair-Id" header'
              type: string
            set-cookie:
              description: '"CloudFront-Signature" header'
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GenerateSignedCookies.Arn}/invocations
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'${WebDomain}'"
  /projects:
    get:
      summary: Search projects
      description: |
        Returns a list of projects for the current member,
        filtered by optional parameters.

        **requires scopes:
        *projects:describe*,
        *projects:describe_details (conditional)*
        **
      security:
        - member_token: []
      tags:
        - Projects
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/ProjectsQueryNameContains'
        - $ref: '#/parameters/ProjectsQueryIsMember'
        - $ref: '#/parameters/ProjectsQueryIsHidden'
        - $ref: '#/parameters/ProjectsQueryStatus'
        - $ref: '#/parameters/ProjectsQueryIRB'
        - $ref: '#/parameters/QueryPaginationFrom'
        - $ref: '#/parameters/QueryPaginationMax'
      responses:
        200:
          description: List of projects
          schema:
            $ref: '#/definitions/ListOfProjects'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProjects.Arn}/invocations

definitions:
  Project:
    required:
      - id
      - name
      - status
    properties:
      id:
        $ref: '#/definitions/ProjectId'
      name:
        $ref: '#/definitions/ProjectName'
      hidden:
        $ref: '#/definitions/ProjectHidden'
      status:
        $ref: '#/definitions/ProjectStatus'
      IRB:
        $ref: '#/definitions/ProjectIRB'
  ProjectId:
    description: Unique identifier for a project
    type: string
    format: uuid
  ProjectName:
    description: Project name
    type: string
    pattern: ^[\w-., ]{1,100}$
  ProjectHidden:
    description:
      Indicates whether project name and status are hidden from public view
    type: boolean
  ProjectStatus:
    description: Project status
    type: string
    enum:
      - Available
      - Removed
  ProjectIRB:
    description: project IRB identifier
    type: string
    pattern: ^[\w-.]{1,100}$
  ListOfProjects:
    type: object
    properties:
      projects:
        type: array
        items:
          $ref: '#/definitions/Project'
      next:
        $ref: '#/definitions/PaginationNext'
  PaginationNext:
    type: integer
    minimum: 1

parameters:
  ProjectsQueryNameContains:
    in: query
    name: name_contains
    description: part of project name, case-insensitive
    type: string
    pattern: ^[\w-., ]{1,100}$
  ProjectsQueryIsMember:
    in: query
    name: is_member
    description: filter projects by requester's membership
    type: boolean
  ProjectsQueryIsHidden:
    in: query
    name: is_hidden
    description: |
      filter by project 'hidden' flag

      **requires scope:
      *projects:describe_details*
      **
    type: boolean
  ProjectsQueryStatus:
    in: query
    name: status
    description: filter by project status
    type: string
    enum:
      - Available
      - Removed
  ProjectsQueryIRB:
    in: query
    name: irb
    description: |
      project IRB (might not be unique)

      **requires scope:
      *projects:describe_details*
      **
    type: string
    pattern: ^[\w-.]{1,100}$
  QueryPaginationFrom:
    in: query
    name: from
    description: starting index for pagination
    type: integer
    minimum: 0
    default: 0
  QueryPaginationMax:
    in: query
    name: max
    description: maximum count of paginated results
    type: integer
    minimum: 1
    default: 10

securityDefinitions:
  member_token:
    type: apiKey
    in: header
    name: Authorization
    x-amazon-apigateway-authtype: custom
    x-amazon-apigateway-authorizer:
      type: token
      authorizerUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Authorizer.Arn}/invocations
      authorizerCredentials:
        Fn::Sub: ${AuthorizerInvocationRole.Arn}
      identityValidationExpression: '^[\w-]{100,200}\.[\w-]{200,400}\.[\w-]{300,600}$'
      authorizerResultTtlInSeconds: 60
