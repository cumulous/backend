swagger: '2.0'
info:
  title: Backend API
  version: '1'
schemes:
  - https

paths:
  /:
    options:
      tags:
        - Spec
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
            Vary:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin:
                Fn::Sub: "'https://${WebDomain}'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Vary: "'Accept-Encoding'"
    get:
      summary: Retrieve the API spec
      description: Returns the current specification of this API.
      operationId: getSpec
      security:
        - member_token: []
      tags:
        - Spec
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: OpenAPI/Swagger 2.0 definition of this API.
          schema:
            $ref: '#/definitions/Spec'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApi.Arn}/invocations
  /weblogin:
    options:
      tags:
        - Web
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin:
                Fn::Sub: "'https://${WebDomain}'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
    get:
      summary: Set website cookies
      description: Sets browser cookies for accessing protected content on the website.
      operationId: weblogin
      security:
        - member_token: []
      tags:
        - Web
      parameters:
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Set-Cookie headers for accessing the website
          headers:
            Set-Cookie:
              description: '"CloudFront-Expires" header'
              type: string
            Set-cookie:
              description: '"CloudFront-Key-Pair-Id" header'
              type: string
            set-cookie:
              description: '"CloudFront-Signature" header'
              type: string
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GenerateSignedCookies.Arn}/invocations
  /projects:
    get:
      summary: Search projects
      description: |
        Returns a list of projects for the current member,
        filtered by optional parameters.

        **requires scopes:
        *projects:describe*,
        *projects:describe_details (conditional)*
        **
      operationId: listProjects
      security:
        - member_token: []
      tags:
        - Projects
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/ProjectsQueryNameContains'
        - $ref: '#/parameters/ProjectsQueryIsMember'
        - $ref: '#/parameters/ProjectsQueryIsHidden'
        - $ref: '#/parameters/ProjectsQueryStatus'
        - $ref: '#/parameters/ProjectsQueryIRB'
        - $ref: '#/parameters/QueryPaginationOffset'
        - $ref: '#/parameters/QueryPaginationLimit'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: List of projects
          schema:
            $ref: '#/definitions/ListOfProjects'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProjects.Arn}/invocations
  /datasets:
    options:
      tags:
        - Datasets
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
            Vary:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin:
                Fn::Sub: "'https://${WebDomain}'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Vary: "'Accept-Encoding'"
    post:
      summary: Create a dataset
      description: |
        Defines a new dataset.
      operationId: createDataset
      security:
        - member_token: []
      tags:
        - Datasets
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/DatasetCreationRequest'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Properties of the created dataset
          schema:
            $ref: '#/definitions/Dataset'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateDataset.Arn}/invocations
    get:
      summary: Get a list of datasets
      description: |
        Returns a list of datasets for the current member,
        filtered by optional parameters.
      operationId: listDatasets
      security:
        - member_token: []
      tags:
        - Datasets
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/DatasetsQueryProjectId'
        - $ref: '#/parameters/DatasetsQueryDescriptionContains'
        - $ref: '#/parameters/DatasetsQueryStatus'
        - $ref: '#/parameters/DatasetsQuerySort'
        - $ref: '#/parameters/QueryPaginationOffset'
        - $ref: '#/parameters/QueryPaginationLimit'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: List of datasets
          schema:
            $ref: '#/definitions/ListOfDatasets'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListDatasets.Arn}/invocations
  /datasets/{dataset_id}:
    options:
      tags:
        - Datasets
      parameters:
        - $ref: '#/parameters/DatasetId'
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
            Vary:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin:
                Fn::Sub: "'https://${WebDomain}'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Vary: "'Accept-Encoding'"
    get:
      summary: Get properties of a dataset
      description: |
        Returns dataset object for a specified ID
      operationId: getDataset
      security:
        - member_token: []
      tags:
        - Datasets
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/DatasetId'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Dataset
          schema:
            $ref: '#/definitions/Dataset'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDataset.Arn}/invocations
    patch:
      summary: Modify properties of a dataset
      description: |
        Modifies select properties of a dataset
      operationId: modifyDataset
      security:
        - member_token: []
      tags:
        - Datasets
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/DatasetId'
        - $ref: '#/parameters/DatasetModificationRequest'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Modified dataset
          schema:
            $ref: '#/definitions/Dataset'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PatchDataset.Arn}/invocations
    delete:
      summary: Delete a dataset
      description: |
        Schedules complete deletion of a dataset.

        Marks dataset status as _Deleting_ until completed.
      operationId: deleteDataset
      security:
        - member_token: []
      tags:
        - Datasets
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/DatasetId'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Status of the dataset scheduled for deletion
          schema:
            $ref: '#/definitions/DatasetDeleting'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteDataset.Arn}/invocations
  /datasets/{dataset_id}/credentials:
    options:
      tags:
        - Datasets
      parameters:
        - $ref: '#/parameters/DatasetId'
      responses:
        200:
          description: HTTP options
          headers:
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Credentials:
              type: string
            Vary:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Authorization'"
              method.response.header.Access-Control-Allow-Origin:
                Fn::Sub: "'https://${WebDomain}'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Vary: "'Accept-Encoding'"
    post:
      summary: Request credentials for data access
      description: |
        Returns temporary credentials to access the data stored on S3
      operationId: requestDataCredentials
      security:
        - member_token: []
      tags:
        - Datasets
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/DatasetId'
        - $ref: '#/parameters/DatasetCredentialsRequest'
        - $ref: '#/parameters/CompressionRequest'
      responses:
        200:
          description: Temporary credentials for data access
          schema:
            $ref: '#/definitions/DatasetCredentialsResponse'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostDatasetCredentials.Arn}/invocations

definitions:
  Spec:
    type: object
  Project:
    required:
      - id
      - name
      - status
    properties:
      id:
        $ref: '#/definitions/ProjectId'
      name:
        $ref: '#/definitions/ProjectName'
      hidden:
        $ref: '#/definitions/ProjectHidden'
      status:
        $ref: '#/definitions/ProjectStatus'
      IRB:
        $ref: '#/definitions/ProjectIRB'
  ProjectId:
    description: Unique identifier for a project
    type: string
    format: uuid
  ProjectName:
    description: Project name
    type: string
    pattern: ^[\w-., ]{1,100}$
  ProjectHidden:
    description:
      Indicates whether project name and status are hidden from public view
    type: boolean
  ProjectStatus:
    description: Project status
    type: string
    enum:
      - Available
      - Removed
  ProjectIRB:
    description: project IRB identifier
    type: string
    pattern: ^[\w-.]{1,100}$
  ListOfProjects:
    type: object
    properties:
      projects:
        type: array
        items:
          $ref: '#/definitions/Project'
      next:
        $ref: '#/definitions/PaginationNext'
  MemberId:
    description: Unique identifier for a project member
    type: string
    format: uuid
  Dataset:
    required:
      - id
      - project_id
      - created_at
      - creator_id
      - status
    properties:
      id:
        $ref: '#/definitions/DatasetId'
      project_id:
        $ref: '#/definitions/ProjectId'
      created_at:
        $ref: '#/definitions/DateTime'
      creator_id:
        $ref: '#/definitions/MemberId'
      description:
        $ref: '#/definitions/DatasetDescription'
      status:
        $ref: '#/definitions/DatasetStatus'
      bucket:
        $ref: '#/definitions/Bucket'
      metadata:
        $ref: '#/definitions/DatasetMetadata'
  DatasetId:
    description: Unique identifier for a dataset
    type: string
    format: uuid
  DatasetDescription:
    description: Dataset description
    type: string
    maxLength: 1000
  DatasetStatus:
    description: Project status
    type: string
    enum:
      - created
      - uploading
      - available
      - archived
      - removing
      - removed
      - deleting
      - deleted
  DatasetMetadata:
    description: Additional information on the dataset
    type: object
    additionalProperties:
      type: string
      maxLength: 100
  Bucket:
    description: Name of S3 storage bucket
    type: string
    pattern: ^[a-z0-9]+(\.[a-z0-9]([a-z0-9-]*[a-z0-9]))*$
  ListOfDatasets:
    type: object
    required:
      - offset
      - items
    properties:
      offset:
        $ref: '#/definitions/PaginationOffset'
      items:
        type: array
        items:
          $ref: '#/definitions/Dataset'
      next:
        $ref: '#/definitions/PaginationNext'
  DatasetDeleting:
    required:
      - id
      - status
    properties:
      id:
        $ref: '#/definitions/DatasetId'
      status:
        $ref: '#/definitions/DatasetStatus'
  DatasetCredentialsAction:
    description: Action for the dataset credentials
    type: string
    enum:
      - upload
      - download
  DatasetCredentialsResponse:
    required:
      - id
      - action
      - credentials
      - expires_at
      - bucket
    properties:
      id:
        $ref: '#/definitions/DatasetId'
      action:
        $ref: '#/definitions/DatasetCredentialsAction'
      credentials:
        $ref: '#/definitions/AwsCredentials'
      expires_at:
        $ref: '#/definitions/DateTime'
      bucket:
        $ref: '#/definitions/Bucket'
  AwsCredentials:
    required:
      - access_key_id
      - secret_access_key
      - session_token
    properties:
      access_key_id:
        type: string
      secret_access_key:
        type: string
      session_token:
        type: string
  PaginationOffset:
    type: integer
    minimum: 0
  PaginationNext:
    type: integer
    minimum: 1
  DateTime:
    type: string
    format: date-time

parameters:
  ProjectsQueryNameContains:
    in: query
    name: name_contains
    description: part of project name, case-insensitive
    type: string
    pattern: ^[\w-., ]{1,100}$
  ProjectsQueryIsMember:
    in: query
    name: is_member
    description: filter projects by requester's membership
    type: boolean
  ProjectsQueryIsHidden:
    in: query
    name: is_hidden
    description: |
      filter by project 'hidden' flag

      **requires scope:
      *projects:describe_details*
      **
    type: boolean
  ProjectsQueryStatus:
    in: query
    name: status
    description: filter by project status
    type: string
    enum:
      - available
      - removed
  ProjectsQueryIRB:
    in: query
    name: irb
    description: |
      project IRB (might not be unique)

      **requires scope:
      *projects:describe_details*
      **
    type: string
    pattern: ^[\w-.]{1,100}$
  DatasetCreationRequest:
    in: body
    name: DatasetCreationRequest
    description: Properties of the dataset to be created
    required: true
    schema:
      required:
        - project_id
      additionalProperties: false
      properties:
        project_id:
          $ref: '#/definitions/ProjectId'
        description:
          $ref: '#/definitions/DatasetDescription'
        metadata:
          $ref: '#/definitions/DatasetMetadata'
  DatasetsQueryProjectId:
    in: query
    name: project_id
    description: Filter by project ID
    type: string
    format: uuid
  DatasetsQueryDescriptionContains:
    in: query
    name: description_contains
    description: Part of the dataset description (case-insensitive)
    type: string
    pattern: ^[\w-., ]{1,200}$
  DatasetsQueryStatus:
    in: query
    name: status
    description: Filter by dataset status
    type: string
    enum:
      - created
      - uploading
      - available
      - archived
      - removing
      - removed
      - deleting
      - deleted
  DatasetsQuerySort:
    in: query
    name: sort
    description: Sort by select attributes in specific order
    type: string
    pattern: ^created_at:(asc|desc)$
    default: 'created_at:desc'
  DatasetId:
    in: path
    name: dataset_id
    description: Unique identifier for a dataset
    required: true
    type: string
    format: uuid
  DatasetModificationRequest:
    in: body
    name: DatasetModificationRequest
    description: Dataset properties to be modified
    required: true
    schema:
      additionalProperties: false
      properties:
        description:
          $ref: '#/definitions/DatasetDescription'
        metadata:
          $ref: '#/definitions/DatasetMetadata'
  DatasetCredentialsRequest:
    in: body
    name: DatasetCredentialsRequest
    description: Request for the data access
    required: true
    schema:
      required:
        - action
      additionalProperties: false
      properties:
        action:
          $ref: '#/definitions/DatasetCredentialsAction'
  QueryPaginationOffset:
    in: query
    name: offset
    description: Starting index for pagination
    type: integer
    minimum: 0
    default: 0
  QueryPaginationLimit:
    in: query
    name: limit
    description: Maximum number of paginated results
    type: integer
    minimum: 1
    default: 10
  CompressionRequest:
    in: header
    name: Accept-Encoding
    type: string
    pattern: (deflate|gzip|\*)?
    maxLength: 64

x-amazon-apigateway-binary-media-types:
  - '*/*'

securityDefinitions:
  member_token:
    type: apiKey
    in: header
    name: Authorization
    x-amazon-apigateway-authtype: custom
    x-amazon-apigateway-authorizer:
      type: token
      authorizerUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Authorizer.Arn}/invocations
      authorizerCredentials:
        Fn::Sub: ${AuthorizerInvocationRole.Arn}
      identityValidationExpression: '^[\w-]{100,200}\.[\w-]{200,400}\.[\w-]{300,600}$'
      authorizerResultTtlInSeconds: 60
